{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "# General imports\n",
    "import string\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import sklearn.feature_extraction as skprep\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "from itertools import compress\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import random\n",
    "random.seed(20190124)\n",
    "%matplotlib inline\n",
    "\n",
    "# Keras imports\n",
    "import tensorflow as tf\n",
    "import tensorflow.keras as keras\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "from tensorflow.keras.models import Sequential, Model\n",
    "from tensorflow.keras.layers import Input, Embedding, Reshape, MaxPooling1D\n",
    "from tensorflow.keras.layers import Activation\n",
    "from tensorflow.keras.layers import Flatten, Dense, Dropout, Lambda\n",
    "from tensorflow.keras.layers import BatchNormalization\n",
    "from tensorflow.keras.optimizers import SGD, RMSprop, Adam\n",
    "from tensorflow.keras.metrics import categorical_crossentropy, categorical_accuracy\n",
    "from tensorflow.keras.layers import *\n",
    "from tensorflow.keras.preprocessing import image, sequence\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "\n",
    "# Preprocess\n",
    "import pandas as pd\n",
    "pd.set_option('display.max_colwidth',-1)\n",
    "\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import string\n",
    "import re\n",
    "import warnings\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "import codecs\n",
    "import unicodedata\n",
    "warnings.filterwarnings('ignore')\n",
    "from collections import Counter\n",
    "\n",
    "import nltk\n",
    "from collections import Counter\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import PorterStemmer\n",
    "\n",
    "\n",
    "#file \n",
    "import pickle\n",
    "import fileinput\n",
    "\n",
    "#sklearn\n",
    "from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\n",
    "from sklearn.metrics import recall_score, make_scorer, confusion_matrix\n",
    "from sklearn.utils.multiclass import unique_labels\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>confidence</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>trying to wait a patient as i can lol</td>\n",
       "      <td>1</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Good morning Fotopro Team,  I noticed in some of the comments below you would be updating shipment details in June.  It's June 8 now, is there an update on when we can expect orders?</td>\n",
       "      <td>1</td>\n",
       "      <td>0.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>these still on track? ahead? behind?</td>\n",
       "      <td>1</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>any update on delivery?</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>product so nice had to get it twice</td>\n",
       "      <td>1</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>Me again, my package just arrived, thanks for this project!</td>\n",
       "      <td>1</td>\n",
       "      <td>0.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>I'm part of the third batch that was just shipped. A previous comment mentioned Tracking info, would you happen to some for me? I know that it'll take a few extra days to arrive here in Germany, I'm just anxious to gift this to a friend of mine.</td>\n",
       "      <td>1</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>Thanks and best regards\\r\\nLeon</td>\n",
       "      <td>1</td>\n",
       "      <td>0.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>It looks like when I originally tried to ship yours I had a shipping error. I just clicked refresh on it and it came back okay, so I'll be able to ship yours along with the remaining ~30 backers this Thursday.</td>\n",
       "      <td>0</td>\n",
       "      <td>0.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>Has everyone received there stop? Where is mine??</td>\n",
       "      <td>1</td>\n",
       "      <td>0.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>150 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                                                                                                                                                                                                      text  \\\n",
       "0    trying to wait a patient as i can lol                                                                                                                                                                                                                   \n",
       "1    Good morning Fotopro Team,  I noticed in some of the comments below you would be updating shipment details in June.  It's June 8 now, is there an update on when we can expect orders?                                                                  \n",
       "2    these still on track? ahead? behind?                                                                                                                                                                                                                    \n",
       "3    any update on delivery?                                                                                                                                                                                                                                 \n",
       "4    product so nice had to get it twice                                                                                                                                                                                                                     \n",
       "..                                   ...                                                                                                                                                                                                                     \n",
       "145  Me again, my package just arrived, thanks for this project!                                                                                                                                                                                             \n",
       "146  I'm part of the third batch that was just shipped. A previous comment mentioned Tracking info, would you happen to some for me? I know that it'll take a few extra days to arrive here in Germany, I'm just anxious to gift this to a friend of mine.   \n",
       "147  Thanks and best regards\\r\\nLeon                                                                                                                                                                                                                         \n",
       "148  It looks like when I originally tried to ship yours I had a shipping error. I just clicked refresh on it and it came back okay, so I'll be able to ship yours along with the remaining ~30 backers this Thursday.                                       \n",
       "149  Has everyone received there stop? Where is mine??                                                                                                                                                                                                       \n",
       "\n",
       "     sentiment  confidence  \n",
       "0    1          0.3         \n",
       "1    1          0.6         \n",
       "2    1          0.2         \n",
       "3    1          0.0         \n",
       "4    1          0.5         \n",
       "..  ..          ...         \n",
       "145  1          0.7         \n",
       "146  1          0.5         \n",
       "147  1          0.6         \n",
       "148  0          0.6         \n",
       "149  1          0.1         \n",
       "\n",
       "[150 rows x 3 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(204058, 3)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Extract the files.\n",
    "df = pd.read_csv(\"Full_Data.csv\",encoding='iso-8859-1')\n",
    "display(df.head(150))\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## fastText Download\n",
    "We Used fasttext for embeddings\n",
    "First, download the fasttet model and apply it to our data so that each word is associated with the corresponding embedding vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2019-12-11 15:16:27--  https://github.com/facebookresearch/fastText/archive/v0.9.1.zip\n",
      "Resolving github.com (github.com)... 192.30.253.113\n",
      "Connecting to github.com (github.com)|192.30.253.113|:443... connected.\n",
      "HTTP request sent, awaiting response... 302 Found\n",
      "Location: https://codeload.github.com/facebookresearch/fastText/zip/v0.9.1 [following]\n",
      "--2019-12-11 15:16:28--  https://codeload.github.com/facebookresearch/fastText/zip/v0.9.1\n",
      "Resolving codeload.github.com (codeload.github.com)... 192.30.253.121\n",
      "Connecting to codeload.github.com (codeload.github.com)|192.30.253.121|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 4327207 (4.1M) [application/zip]\n",
      "Saving to: ‘v0.9.1.zip’\n",
      "\n",
      "v0.9.1.zip          100%[===================>]   4.13M  8.68MB/s    in 0.5s    \n",
      "\n",
      "2019-12-11 15:16:29 (8.68 MB/s) - ‘v0.9.1.zip’ saved [4327207/4327207]\n",
      "\n",
      "Archive:  v0.9.1.zip\n",
      "b5b7d307274ce00ef52198fbc692ed3bd11d9856\n",
      "   creating: fastText-0.9.1/\n",
      "   creating: fastText-0.9.1/.circleci/\n",
      "  inflating: fastText-0.9.1/.circleci/cmake_test.sh  \n",
      "  inflating: fastText-0.9.1/.circleci/config.yml  \n",
      "  inflating: fastText-0.9.1/.circleci/gcc_test.sh  \n",
      "  inflating: fastText-0.9.1/.circleci/pip_test.sh  \n",
      "  inflating: fastText-0.9.1/.circleci/pull_data.sh  \n",
      "  inflating: fastText-0.9.1/.circleci/python_test.sh  \n",
      "  inflating: fastText-0.9.1/.circleci/run_locally.sh  \n",
      "  inflating: fastText-0.9.1/.circleci/setup_circleimg.sh  \n",
      "  inflating: fastText-0.9.1/.circleci/setup_debian.sh  \n",
      "  inflating: fastText-0.9.1/.gitignore  \n",
      "  inflating: fastText-0.9.1/CMakeLists.txt  \n",
      "  inflating: fastText-0.9.1/CODE_OF_CONDUCT.md  \n",
      "  inflating: fastText-0.9.1/CONTRIBUTING.md  \n",
      "  inflating: fastText-0.9.1/LICENSE  \n",
      "  inflating: fastText-0.9.1/MANIFEST.in  \n",
      "  inflating: fastText-0.9.1/Makefile  \n",
      "  inflating: fastText-0.9.1/README.md  \n",
      "   creating: fastText-0.9.1/alignment/\n",
      "  inflating: fastText-0.9.1/alignment/README.md  \n",
      "  inflating: fastText-0.9.1/alignment/align.py  \n",
      "  inflating: fastText-0.9.1/alignment/eval.py  \n",
      "  inflating: fastText-0.9.1/alignment/example.sh  \n",
      "  inflating: fastText-0.9.1/alignment/unsup_align.py  \n",
      "  inflating: fastText-0.9.1/alignment/utils.py  \n",
      "  inflating: fastText-0.9.1/classification-example.sh  \n",
      "  inflating: fastText-0.9.1/classification-results.sh  \n",
      "   creating: fastText-0.9.1/crawl/\n",
      "  inflating: fastText-0.9.1/crawl/README.md  \n",
      "  inflating: fastText-0.9.1/crawl/dedup.cc  \n",
      "  inflating: fastText-0.9.1/crawl/download_crawl.sh  \n",
      "  inflating: fastText-0.9.1/crawl/filter_dedup.sh  \n",
      "  inflating: fastText-0.9.1/crawl/filter_utf8.cc  \n",
      "  inflating: fastText-0.9.1/crawl/process_wet_file.sh  \n",
      "   creating: fastText-0.9.1/docs/\n",
      "  inflating: fastText-0.9.1/docs/aligned-vectors.md  \n",
      "  inflating: fastText-0.9.1/docs/api.md  \n",
      "  inflating: fastText-0.9.1/docs/cheatsheet.md  \n",
      "  inflating: fastText-0.9.1/docs/crawl-vectors.md  \n",
      "  inflating: fastText-0.9.1/docs/dataset.md  \n",
      "  inflating: fastText-0.9.1/docs/english-vectors.md  \n",
      "  inflating: fastText-0.9.1/docs/faqs.md  \n",
      "  inflating: fastText-0.9.1/docs/language-identification.md  \n",
      "  inflating: fastText-0.9.1/docs/options.md  \n",
      "  inflating: fastText-0.9.1/docs/pretrained-vectors.md  \n",
      "  inflating: fastText-0.9.1/docs/python-module.md  \n",
      "  inflating: fastText-0.9.1/docs/references.md  \n",
      "  inflating: fastText-0.9.1/docs/supervised-models.md  \n",
      "  inflating: fastText-0.9.1/docs/supervised-tutorial.md  \n",
      "  inflating: fastText-0.9.1/docs/support.md  \n",
      "  inflating: fastText-0.9.1/docs/unsupervised-tutorials.md  \n",
      "  inflating: fastText-0.9.1/eval.py  \n",
      "  inflating: fastText-0.9.1/get-wikimedia.sh  \n",
      "   creating: fastText-0.9.1/python/\n",
      "  inflating: fastText-0.9.1/python/README.md  \n",
      "  inflating: fastText-0.9.1/python/README.rst  \n",
      "   creating: fastText-0.9.1/python/benchmarks/\n",
      "  inflating: fastText-0.9.1/python/benchmarks/README.rst  \n",
      "  inflating: fastText-0.9.1/python/benchmarks/get_word_vector.py  \n",
      "   creating: fastText-0.9.1/python/doc/\n",
      "   creating: fastText-0.9.1/python/doc/examples/\n",
      "  inflating: fastText-0.9.1/python/doc/examples/FastTextEmbeddingBag.py  \n",
      "  inflating: fastText-0.9.1/python/doc/examples/bin_to_vec.py  \n",
      "  inflating: fastText-0.9.1/python/doc/examples/compute_accuracy.py  \n",
      "  inflating: fastText-0.9.1/python/doc/examples/get_vocab.py  \n",
      "  inflating: fastText-0.9.1/python/doc/examples/train_supervised.py  \n",
      "  inflating: fastText-0.9.1/python/doc/examples/train_unsupervised.py  \n",
      "   creating: fastText-0.9.1/python/fasttext_module/\n",
      "   creating: fastText-0.9.1/python/fasttext_module/fasttext/\n",
      "  inflating: fastText-0.9.1/python/fasttext_module/fasttext/FastText.py  \n",
      "  inflating: fastText-0.9.1/python/fasttext_module/fasttext/__init__.py  \n",
      "   creating: fastText-0.9.1/python/fasttext_module/fasttext/pybind/\n",
      "  inflating: fastText-0.9.1/python/fasttext_module/fasttext/pybind/fasttext_pybind.cc  \n",
      "   creating: fastText-0.9.1/python/fasttext_module/fasttext/tests/\n",
      "  inflating: fastText-0.9.1/python/fasttext_module/fasttext/tests/__init__.py  \n",
      "  inflating: fastText-0.9.1/python/fasttext_module/fasttext/tests/test_configurations.py  \n",
      "  inflating: fastText-0.9.1/python/fasttext_module/fasttext/tests/test_script.py  \n",
      "   creating: fastText-0.9.1/python/fasttext_module/fasttext/util/\n",
      "  inflating: fastText-0.9.1/python/fasttext_module/fasttext/util/__init__.py  \n",
      "  inflating: fastText-0.9.1/python/fasttext_module/fasttext/util/util.py  \n",
      "  inflating: fastText-0.9.1/quantization-example.sh  \n",
      "  inflating: fastText-0.9.1/runtests.py  \n",
      "   creating: fastText-0.9.1/scripts/\n",
      "   creating: fastText-0.9.1/scripts/kbcompletion/\n",
      "  inflating: fastText-0.9.1/scripts/kbcompletion/README.md  \n",
      "  inflating: fastText-0.9.1/scripts/kbcompletion/data.sh  \n",
      "  inflating: fastText-0.9.1/scripts/kbcompletion/eval.cpp  \n",
      "  inflating: fastText-0.9.1/scripts/kbcompletion/fb15k.sh  \n",
      "  inflating: fastText-0.9.1/scripts/kbcompletion/fb15k237.sh  \n",
      "  inflating: fastText-0.9.1/scripts/kbcompletion/svo.sh  \n",
      "  inflating: fastText-0.9.1/scripts/kbcompletion/wn18.sh  \n",
      "   creating: fastText-0.9.1/scripts/quantization/\n",
      "  inflating: fastText-0.9.1/scripts/quantization/quantization-results.sh  \n",
      " extracting: fastText-0.9.1/setup.cfg  \n",
      "  inflating: fastText-0.9.1/setup.py  \n",
      "   creating: fastText-0.9.1/src/\n",
      "  inflating: fastText-0.9.1/src/args.cc  \n",
      "  inflating: fastText-0.9.1/src/args.h  \n",
      "  inflating: fastText-0.9.1/src/densematrix.cc  \n",
      "  inflating: fastText-0.9.1/src/densematrix.h  \n",
      "  inflating: fastText-0.9.1/src/dictionary.cc  \n",
      "  inflating: fastText-0.9.1/src/dictionary.h  \n",
      "  inflating: fastText-0.9.1/src/fasttext.cc  \n",
      "  inflating: fastText-0.9.1/src/fasttext.h  \n",
      "  inflating: fastText-0.9.1/src/loss.cc  \n",
      "  inflating: fastText-0.9.1/src/loss.h  \n",
      "  inflating: fastText-0.9.1/src/main.cc  \n",
      "  inflating: fastText-0.9.1/src/matrix.cc  \n",
      "  inflating: fastText-0.9.1/src/matrix.h  \n",
      "  inflating: fastText-0.9.1/src/meter.cc  \n",
      "  inflating: fastText-0.9.1/src/meter.h  \n",
      "  inflating: fastText-0.9.1/src/model.cc  \n",
      "  inflating: fastText-0.9.1/src/model.h  \n",
      "  inflating: fastText-0.9.1/src/productquantizer.cc  \n",
      "  inflating: fastText-0.9.1/src/productquantizer.h  \n",
      "  inflating: fastText-0.9.1/src/quantmatrix.cc  \n",
      "  inflating: fastText-0.9.1/src/quantmatrix.h  \n",
      "  inflating: fastText-0.9.1/src/real.h  \n",
      "  inflating: fastText-0.9.1/src/utils.cc  \n",
      "  inflating: fastText-0.9.1/src/utils.h  \n",
      "  inflating: fastText-0.9.1/src/vector.cc  \n",
      "  inflating: fastText-0.9.1/src/vector.h  \n",
      "   creating: fastText-0.9.1/tests/\n",
      "  inflating: fastText-0.9.1/tests/fetch_test_data.sh  \n",
      "   creating: fastText-0.9.1/website/\n",
      "  inflating: fastText-0.9.1/website/README.md  \n",
      "   creating: fastText-0.9.1/website/blog/\n",
      "  inflating: fastText-0.9.1/website/blog/2016-08-18-blog-post.md  \n",
      "  inflating: fastText-0.9.1/website/blog/2017-05-02-blog-post.md  \n",
      "  inflating: fastText-0.9.1/website/blog/2017-10-02-blog-post.md  \n",
      "  inflating: fastText-0.9.1/website/blog/2019-06-25-blog-post.md  \n",
      "   creating: fastText-0.9.1/website/core/\n",
      "  inflating: fastText-0.9.1/website/core/Footer.js  \n",
      "  inflating: fastText-0.9.1/website/package.json  \n",
      "   creating: fastText-0.9.1/website/pages/\n",
      "   creating: fastText-0.9.1/website/pages/en/\n",
      "  inflating: fastText-0.9.1/website/pages/en/index.js  \n",
      "  inflating: fastText-0.9.1/website/sidebars.json  \n",
      "  inflating: fastText-0.9.1/website/siteConfig.js  \n",
      "   creating: fastText-0.9.1/website/static/\n",
      "   creating: fastText-0.9.1/website/static/docs/\n",
      "   creating: fastText-0.9.1/website/static/docs/en/\n",
      "   creating: fastText-0.9.1/website/static/docs/en/html/\n",
      " extracting: fastText-0.9.1/website/static/docs/en/html/.classfasttext_1_1QMatrix-members.html.i4eKqy  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/annotated.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/annotated_dup.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/args_8cc.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/args_8h.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/args_8h.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/args_8h_source.html  \n",
      " extracting: fastText-0.9.1/website/static/docs/en/html/bc_s.png  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/bdwn.png  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classes.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1Args-members.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1Args.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1Args.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1Dictionary-members.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1Dictionary.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1Dictionary.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1FastText-members.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1FastText.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1FastText.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1Matrix-members.html  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1Matrix.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1Matrix.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1Model-members.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1Model.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1Model.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1ProductQuantizer-members.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1ProductQuantizer.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1ProductQuantizer.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1QMatrix-members.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1QMatrix.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1QMatrix.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1Vector-members.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1Vector.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/classfasttext_1_1Vector.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/closed.png  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/dictionary_8cc.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/dictionary_8h.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/dictionary_8h.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/dictionary_8h_source.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/dir_68267d1309a1af8e8297ef4c3efbcdba.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/dir_68267d1309a1af8e8297ef4c3efbcdba.js  \n",
      " extracting: fastText-0.9.1/website/static/docs/en/html/doc.png  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/doxygen.css  \n",
      " extracting: fastText-0.9.1/website/static/docs/en/html/doxygen.png  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/dynsections.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/fasttext_8cc.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/fasttext_8h.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/fasttext_8h.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/fasttext_8h_source.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/favicon.png  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/files.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/files.js  \n",
      " extracting: fastText-0.9.1/website/static/docs/en/html/folderclosed.png  \n",
      " extracting: fastText-0.9.1/website/static/docs/en/html/folderopen.png  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_0x7e.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_b.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_c.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_d.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_dup.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_e.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_f.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_func.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_g.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_h.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_i.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_k.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_l.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_m.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_n.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_o.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_p.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_q.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_r.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_s.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_t.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_u.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_v.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_vars.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_w.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/functions_z.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/globals.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/globals_defs.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/globals_func.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/index.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/jquery.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/main_8cc.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/main_8cc.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/matrix_8cc.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/matrix_8h.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/matrix_8h_source.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/menu.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/menudata.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/model_8cc.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/model_8h.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/model_8h.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/model_8h_source.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/namespacefasttext.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/namespacefasttext.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/namespacefasttext_1_1utils.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/namespacemembers.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/namespacemembers_enum.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/namespacemembers_func.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/namespacemembers_type.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/namespaces.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/namespaces.js  \n",
      " extracting: fastText-0.9.1/website/static/docs/en/html/nav_f.png  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/nav_g.png  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/nav_h.png  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/navtree.css  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/navtree.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/navtreedata.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/navtreeindex0.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/navtreeindex1.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/open.png  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/productquantizer_8cc.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/productquantizer_8cc.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/productquantizer_8h.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/productquantizer_8h_source.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/qmatrix_8cc.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/qmatrix_8h.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/qmatrix_8h_source.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/real_8h.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/real_8h.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/real_8h_source.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/resize.js  \n",
      "   creating: fastText-0.9.1/website/static/docs/en/html/search/\n",
      " extracting: fastText-0.9.1/website/static/docs/en/html/search/.files_7.html.StRRNc  \n",
      " extracting: fastText-0.9.1/website/static/docs/en/html/search/.variables_a.html.1MGQ27  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_0.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_0.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_1.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_1.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_10.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_10.js  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_11.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_11.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_12.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_12.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_13.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_13.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_14.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_14.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_15.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_15.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_16.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_16.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_17.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_17.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_2.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_2.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_3.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_3.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_4.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_4.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_5.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_5.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_6.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_6.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_7.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_7.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_8.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_8.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_9.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_9.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_a.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_a.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_b.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_b.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_c.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_c.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_d.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_d.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_e.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_e.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_f.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/all_f.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/classes_0.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/classes_0.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/classes_1.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/classes_1.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/classes_2.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/classes_2.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/classes_3.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/classes_3.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/classes_4.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/classes_4.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/classes_5.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/classes_5.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/classes_6.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/classes_6.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/classes_7.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/classes_7.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/classes_8.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/classes_8.js  \n",
      " extracting: fastText-0.9.1/website/static/docs/en/html/search/close.png  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/defines_0.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/defines_0.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/defines_1.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/defines_1.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/defines_2.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/defines_2.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/defines_3.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/defines_3.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/enums_0.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/enums_0.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/enums_1.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/enums_1.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/enums_2.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/enums_2.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/enumvalues_0.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/enumvalues_0.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/enumvalues_1.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/enumvalues_1.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/enumvalues_2.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/enumvalues_2.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/enumvalues_3.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/enumvalues_3.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/enumvalues_4.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/enumvalues_4.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/enumvalues_5.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/enumvalues_5.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/files_0.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/files_0.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/files_1.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/files_1.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/files_2.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/files_2.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/files_3.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/files_3.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/files_4.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/files_4.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/files_5.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/files_5.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/files_6.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/files_6.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/files_7.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/files_7.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/files_8.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/files_8.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_0.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_0.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_1.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_1.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_10.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_10.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_11.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_11.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_12.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_12.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_13.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_13.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_14.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_14.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_15.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_15.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_16.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_16.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_17.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_17.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_2.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_2.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_3.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_3.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_4.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_4.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_5.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_5.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_6.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_6.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_7.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_7.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_8.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_8.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_9.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_9.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_a.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_a.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_b.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_b.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_c.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_c.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_d.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_d.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_e.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_e.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_f.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/functions_f.js  \n",
      " extracting: fastText-0.9.1/website/static/docs/en/html/search/mag_sel.png  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/namespaces_0.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/namespaces_0.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/nomatches.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/search.css  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/search.js  \n",
      " extracting: fastText-0.9.1/website/static/docs/en/html/search/search_l.png  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/search_m.png  \n",
      " extracting: fastText-0.9.1/website/static/docs/en/html/search/search_r.png  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/searchdata.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/typedefs_0.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/typedefs_0.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/typedefs_1.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/typedefs_1.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_0.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_0.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_1.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_1.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_10.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_10.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_11.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_11.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_12.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_12.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_13.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_13.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_2.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_2.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_3.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_3.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_4.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_4.js  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_5.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_5.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_6.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_6.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_7.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_7.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_8.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_8.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_9.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_9.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_a.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_a.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_b.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_b.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_c.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_c.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_d.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_d.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_e.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_e.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_f.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/search/variables_f.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/splitbar.png  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/structfasttext_1_1Node-members.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/structfasttext_1_1Node.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/structfasttext_1_1Node.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/structfasttext_1_1entry-members.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/structfasttext_1_1entry.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/structfasttext_1_1entry.js  \n",
      " extracting: fastText-0.9.1/website/static/docs/en/html/sync_off.png  \n",
      " extracting: fastText-0.9.1/website/static/docs/en/html/sync_on.png  \n",
      " extracting: fastText-0.9.1/website/static/docs/en/html/tab_a.png  \n",
      " extracting: fastText-0.9.1/website/static/docs/en/html/tab_b.png  \n",
      " extracting: fastText-0.9.1/website/static/docs/en/html/tab_h.png  \n",
      " extracting: fastText-0.9.1/website/static/docs/en/html/tab_s.png  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/tabs.css  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/utils_8cc.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/utils_8cc.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/utils_8h.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/utils_8h.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/utils_8h_source.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/vector_8cc.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/vector_8cc.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/vector_8h.html  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/vector_8h.js  \n",
      "  inflating: fastText-0.9.1/website/static/docs/en/html/vector_8h_source.html  \n",
      "  inflating: fastText-0.9.1/website/static/fasttext.css  \n",
      "   creating: fastText-0.9.1/website/static/img/\n",
      "   creating: fastText-0.9.1/website/static/img/authors/\n",
      "  inflating: fastText-0.9.1/website/static/img/authors/armand_joulin.jpg  \n",
      "  inflating: fastText-0.9.1/website/static/img/authors/christian_puhrsch.png  \n",
      "  inflating: fastText-0.9.1/website/static/img/authors/edouard_grave.jpeg  \n",
      "  inflating: fastText-0.9.1/website/static/img/authors/piotr_bojanowski.jpg  \n",
      "  inflating: fastText-0.9.1/website/static/img/authors/tomas_mikolov.jpg  \n",
      "   creating: fastText-0.9.1/website/static/img/blog/\n",
      "  inflating: fastText-0.9.1/website/static/img/blog/2016-08-18-blog-post-img1.png  \n",
      "  inflating: fastText-0.9.1/website/static/img/blog/2016-08-18-blog-post-img2.png  \n",
      "  inflating: fastText-0.9.1/website/static/img/blog/2017-05-02-blog-post-img1.jpg  \n",
      "  inflating: fastText-0.9.1/website/static/img/blog/2017-05-02-blog-post-img2.jpg  \n",
      "  inflating: fastText-0.9.1/website/static/img/blog/2017-10-02-blog-post-img1.png  \n",
      "  inflating: fastText-0.9.1/website/static/img/cbo_vs_skipgram.png  \n",
      "  inflating: fastText-0.9.1/website/static/img/fasttext-icon-api.png  \n",
      "  inflating: fastText-0.9.1/website/static/img/fasttext-icon-bg-web.png  \n",
      "  inflating: fastText-0.9.1/website/static/img/fasttext-icon-color-square.png  \n",
      "  inflating: fastText-0.9.1/website/static/img/fasttext-icon-color-web.png  \n",
      "  inflating: fastText-0.9.1/website/static/img/fasttext-icon-faq.png  \n",
      "  inflating: fastText-0.9.1/website/static/img/fasttext-icon-tutorial.png  \n",
      "  inflating: fastText-0.9.1/website/static/img/fasttext-icon-white-web.png  \n",
      "  inflating: fastText-0.9.1/website/static/img/fasttext-logo-color-web.png  \n",
      "  inflating: fastText-0.9.1/website/static/img/fasttext-logo-white-web.png  \n",
      "  inflating: fastText-0.9.1/website/static/img/logo-color.png  \n",
      "  inflating: fastText-0.9.1/website/static/img/model-black.png  \n",
      "  inflating: fastText-0.9.1/website/static/img/model-blue.png  \n",
      "  inflating: fastText-0.9.1/website/static/img/model-red.png  \n",
      "  inflating: fastText-0.9.1/website/static/img/ogimage.png  \n",
      "  inflating: fastText-0.9.1/website/static/img/oss_logo.png  \n",
      "  inflating: fastText-0.9.1/wikifil.pl  \n",
      "  inflating: fastText-0.9.1/word-vector-example.sh  \n"
     ]
    }
   ],
   "source": [
    "!wget https://github.com/facebookresearch/fastText/archive/v0.9.1.zip\n",
    "!unzip v0.9.1.zip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/Olivia/Documents/MDA/a3/fastText-0.9.1/fastText-0.9.1\n",
      "c++ -pthread -std=c++0x -march=native -O3 -funroll-loops -DNDEBUG -c src/args.cc\n",
      "c++ -pthread -std=c++0x -march=native -O3 -funroll-loops -DNDEBUG -c src/matrix.cc\n",
      "c++ -pthread -std=c++0x -march=native -O3 -funroll-loops -DNDEBUG -c src/dictionary.cc\n",
      "c++ -pthread -std=c++0x -march=native -O3 -funroll-loops -DNDEBUG -c src/loss.cc\n",
      "c++ -pthread -std=c++0x -march=native -O3 -funroll-loops -DNDEBUG -c src/productquantizer.cc\n",
      "c++ -pthread -std=c++0x -march=native -O3 -funroll-loops -DNDEBUG -c src/densematrix.cc\n",
      "c++ -pthread -std=c++0x -march=native -O3 -funroll-loops -DNDEBUG -c src/quantmatrix.cc\n",
      "c++ -pthread -std=c++0x -march=native -O3 -funroll-loops -DNDEBUG -c src/vector.cc\n",
      "c++ -pthread -std=c++0x -march=native -O3 -funroll-loops -DNDEBUG -c src/model.cc\n",
      "c++ -pthread -std=c++0x -march=native -O3 -funroll-loops -DNDEBUG -c src/utils.cc\n",
      "c++ -pthread -std=c++0x -march=native -O3 -funroll-loops -DNDEBUG -c src/meter.cc\n",
      "c++ -pthread -std=c++0x -march=native -O3 -funroll-loops -DNDEBUG -c src/fasttext.cc\n",
      "\u001b[1msrc/fasttext.cc:323:16: \u001b[0m\u001b[0;1;35mwarning: \u001b[0m\u001b[1m'selectEmbeddings' is deprecated:\n",
      "      selectEmbeddings is being deprecated. [-Wdeprecated-declarations]\u001b[0m\n",
      "    auto idx = selectEmbeddings(qargs.cutoff);\n",
      "\u001b[0;1;32m               ^\n",
      "\u001b[0m\u001b[1msrc/fasttext.h:165:3: \u001b[0m\u001b[0;1;30mnote: \u001b[0m'selectEmbeddings' has been explicitly marked\n",
      "      deprecated here\u001b[0m\n",
      "  FASTTEXT_DEPRECATED(\"selectEmbeddings is being deprecated.\")\n",
      "\u001b[0;1;32m  ^\n",
      "\u001b[0m\u001b[1msrc/utils.h:18:49: \u001b[0m\u001b[0;1;30mnote: \u001b[0mexpanded from macro 'FASTTEXT_DEPRECATED'\u001b[0m\n",
      "#define FASTTEXT_DEPRECATED(msg) __attribute__((__deprecated__(msg)))\n",
      "\u001b[0;1;32m                                                ^\n",
      "\u001b[0m\u001b[1msrc/fasttext.cc:551:5: \u001b[0m\u001b[0;1;35mwarning: \u001b[0m\u001b[1m'precomputeWordVectors' is deprecated:\n",
      "      precomputeWordVectors is being deprecated. [-Wdeprecated-declarations]\u001b[0m\n",
      "    precomputeWordVectors(*wordVectors_);\n",
      "\u001b[0;1;32m    ^\n",
      "\u001b[0m\u001b[1msrc/fasttext.h:180:3: \u001b[0m\u001b[0;1;30mnote: \u001b[0m'precomputeWordVectors' has been explicitly marked\n",
      "      deprecated here\u001b[0m\n",
      "  FASTTEXT_DEPRECATED(\"precomputeWordVectors is being deprecated.\")\n",
      "\u001b[0;1;32m  ^\n",
      "\u001b[0m\u001b[1msrc/utils.h:18:49: \u001b[0m\u001b[0;1;30mnote: \u001b[0mexpanded from macro 'FASTTEXT_DEPRECATED'\u001b[0m\n",
      "#define FASTTEXT_DEPRECATED(msg) __attribute__((__deprecated__(msg)))\n",
      "\u001b[0;1;32m                                                ^\n",
      "\u001b[0m2 warnings generated.\n",
      "c++ -pthread -std=c++0x -march=native -O3 -funroll-loops -DNDEBUG args.o matrix.o dictionary.o loss.o productquantizer.o densematrix.o quantmatrix.o vector.o model.o utils.o meter.o fasttext.o src/main.cc -o fasttext\n"
     ]
    }
   ],
   "source": [
    "#Compile the library to sth. the computer can understand\n",
    "\n",
    "%cd fastText-0.9.1\n",
    "\n",
    "!make"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Download the embedding vectors\n",
    "fasttext is language dependent model, there are four levels of embeddings, since we're analyzing the sentimental analysis, so the forth one that trained using subword information from webcrawl of many websites was used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2019-12-11 15:16:52--  https://dl.fbaipublicfiles.com/fasttext/vectors-english/crawl-300d-2M-subword.zip\n",
      "Resolving dl.fbaipublicfiles.com (dl.fbaipublicfiles.com)... 2606:4700:10::6814:16a6, 2606:4700:10::6814:6a6, 104.20.22.166, ...\n",
      "Connecting to dl.fbaipublicfiles.com (dl.fbaipublicfiles.com)|2606:4700:10::6814:16a6|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 5828358084 (5.4G) [application/zip]\n",
      "Saving to: ‘crawl-300d-2M-subword.zip’\n",
      "\n",
      "crawl-300d-2M-subwo 100%[===================>]   5.43G  9.61MB/s    in 8m 16s  \n",
      "\n",
      "2019-12-11 15:25:08 (11.2 MB/s) - ‘crawl-300d-2M-subword.zip’ saved [5828358084/5828358084]\n",
      "\n",
      "gunzip: can't stat: crawl-300d-2M-subword.zip!gunzip (crawl-300d-2M-subword.zip!gunzip.gz): No such file or directory\n",
      "gunzip: crawl-300d-2M-subword.zip: unknown suffix -- ignored\n"
     ]
    }
   ],
   "source": [
    "!wget https://dl.fbaipublicfiles.com/fasttext/vectors-english/crawl-300d-2M-subword.zip\n",
    "!gunzip -v -f crawl-300d-2M-subword.zip!gunzip -v -f crawl-300d-2M-subword.zip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CMakeLists.txt             loss.o\r\n",
      "CODE_OF_CONDUCT.md         matrix.o\r\n",
      "CONTRIBUTING.md            meter.o\r\n",
      "LICENSE                    model.o\r\n",
      "MANIFEST.in                productquantizer.o\r\n",
      "Makefile                   \u001b[34mpython\u001b[m\u001b[m/\r\n",
      "README.md                  \u001b[31mquantization-example.sh\u001b[m\u001b[m*\r\n",
      "\u001b[34malignment\u001b[m\u001b[m/                 quantmatrix.o\r\n",
      "args.o                     runtests.py\r\n",
      "\u001b[31mclassification-example.sh\u001b[m\u001b[m* \u001b[34mscripts\u001b[m\u001b[m/\r\n",
      "\u001b[31mclassification-results.sh\u001b[m\u001b[m* setup.cfg\r\n",
      "\u001b[34mcrawl\u001b[m\u001b[m/                     setup.py\r\n",
      "crawl-300d-2M-subword.zip  \u001b[34msrc\u001b[m\u001b[m/\r\n",
      "densematrix.o              \u001b[34mtests\u001b[m\u001b[m/\r\n",
      "dictionary.o               utils.o\r\n",
      "\u001b[34mdocs\u001b[m\u001b[m/                      vector.o\r\n",
      "eval.py                    \u001b[34mwebsite\u001b[m\u001b[m/\r\n",
      "\u001b[31mfasttext\u001b[m\u001b[m*                  wikifil.pl\r\n",
      "fasttext.o                 \u001b[31mword-vector-example.sh\u001b[m\u001b[m*\r\n",
      "\u001b[31mget-wikimedia.sh\u001b[m\u001b[m*\r\n"
     ]
    }
   ],
   "source": [
    "ls"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we can perform the preprocessing.\n",
    "# Data Preprocessing\n",
    "With the fasttext embedding model is downloaded, the data that comes from two crowdfunding platform can be preprocessed.\n",
    "By looking at the dataset, we have many comments with positive sentiment =1 and negative sentiment = 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/Olivia/Documents/MDA/a3\n"
     ]
    }
   ],
   "source": [
    "# Come back to the original work folder\n",
    "%cd .."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, clean the text\n",
    "Remove the special characters \n",
    "Keep the text in a clear format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>word_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>trying to wait a patient as i can lol</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Good morning Fotopro Team,  I noticed in some of the comments below you would be updating shipment details in June.  It's June 8 now, is there an update on when we can expect orders?</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>these still on track? ahead? behind?</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>any update on delivery?</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>product so nice had to get it twice</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Just curious... Will you have any extension goals for if you hit 200% of your goal, or if you hit $10,000?</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Got hands on this kit at the photoshow Birmingham England liked it so much have backed it, looking forward to delivery.</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>looking forward to the many uses of this product. I am an educator who takes many films and pictures on mobile and other devices, so this should come in very handy for me.</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Hi! Looking forward to getting this product. What size tablet can the Mogo handle? Also, when I do basic videos, I usually use my cell phone for the audio. Is there a way to use the dampener (or, pop filter) along with holding the phone? I notice the thin wire that holds that filter is attached to the  mic holder, but I would like some way to put the filter with the phone to cover the phone microphone.</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Weâll post an update in the afternoon tomorrow! @clive</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Hi Guys,\\r\\n\\r\\nMay i know is there any update on this?</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>They've shipped! Last few boxes are being picked up on Monday and will arrive by two day shipping.</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>No update when they actually shipped out / if they shipped out?</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Woooohoooooooo ... the lightboxes are near! Juhuuuuu ...</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>update please. When will these start shipping?</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>In a previous update you mentioned the deliveries starting Dec 1st, did that happen?</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Good Morning, \\r\\nHas there been any news?</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Have surveys been sent out yet?</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>@Creator: been quiet for some time. How's the project going? Any new updates?</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>@ Imran: Thank you so much! We are all so excited.</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                                                                                                                                                                                                                                                                                                                                                                     text  \\\n",
       "0   trying to wait a patient as i can lol                                                                                                                                                                                                                                                                                                                                                                                   \n",
       "1   Good morning Fotopro Team,  I noticed in some of the comments below you would be updating shipment details in June.  It's June 8 now, is there an update on when we can expect orders?                                                                                                                                                                                                                                  \n",
       "2   these still on track? ahead? behind?                                                                                                                                                                                                                                                                                                                                                                                    \n",
       "3   any update on delivery?                                                                                                                                                                                                                                                                                                                                                                                                 \n",
       "4   product so nice had to get it twice                                                                                                                                                                                                                                                                                                                                                                                     \n",
       "5   Just curious... Will you have any extension goals for if you hit 200% of your goal, or if you hit $10,000?                                                                                                                                                                                                                                                                                                              \n",
       "6   Got hands on this kit at the photoshow Birmingham England liked it so much have backed it, looking forward to delivery.                                                                                                                                                                                                                                                                                                 \n",
       "7   looking forward to the many uses of this product. I am an educator who takes many films and pictures on mobile and other devices, so this should come in very handy for me.                                                                                                                                                                                                                                             \n",
       "8   Hi! Looking forward to getting this product. What size tablet can the Mogo handle? Also, when I do basic videos, I usually use my cell phone for the audio. Is there a way to use the dampener (or, pop filter) along with holding the phone? I notice the thin wire that holds that filter is attached to the  mic holder, but I would like some way to put the filter with the phone to cover the phone microphone.   \n",
       "9   Weâll post an update in the afternoon tomorrow! @clive                                                                                                                                                                                                                                                                                                                                                                \n",
       "10  Hi Guys,\\r\\n\\r\\nMay i know is there any update on this?                                                                                                                                                                                                                                                                                                                                                                 \n",
       "11  They've shipped! Last few boxes are being picked up on Monday and will arrive by two day shipping.                                                                                                                                                                                                                                                                                                                      \n",
       "12  No update when they actually shipped out / if they shipped out?                                                                                                                                                                                                                                                                                                                                                         \n",
       "13  Woooohoooooooo ... the lightboxes are near! Juhuuuuu ...                                                                                                                                                                                                                                                                                                                                                                \n",
       "14  update please. When will these start shipping?                                                                                                                                                                                                                                                                                                                                                                          \n",
       "15  In a previous update you mentioned the deliveries starting Dec 1st, did that happen?                                                                                                                                                                                                                                                                                                                                    \n",
       "16  Good Morning, \\r\\nHas there been any news?                                                                                                                                                                                                                                                                                                                                                                              \n",
       "17  Have surveys been sent out yet?                                                                                                                                                                                                                                                                                                                                                                                         \n",
       "18  @Creator: been quiet for some time. How's the project going? Any new updates?                                                                                                                                                                                                                                                                                                                                           \n",
       "19  @ Imran: Thank you so much! We are all so excited.                                                                                                                                                                                                                                                                                                                                                                      \n",
       "\n",
       "    word_count  \n",
       "0   9           \n",
       "1   36          \n",
       "2   6           \n",
       "3   4           \n",
       "4   8           \n",
       "5   21          \n",
       "6   21          \n",
       "7   33          \n",
       "8   79          \n",
       "9   9           \n",
       "10  10          \n",
       "11  18          \n",
       "12  12          \n",
       "13  8           \n",
       "14  7           \n",
       "15  14          \n",
       "16  7           \n",
       "17  6           \n",
       "18  13          \n",
       "19  11          "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check number of words\n",
    "df['word_count'] = df['text'].apply(lambda x: len(str(x).split(\" \")))\n",
    "df[['text','word_count']].head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>stopwords_percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>trying to wait a patient as i can lol</td>\n",
       "      <td>0.555556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Good morning Fotopro Team,  I noticed in some of the comments below you would be updating shipment details in June.  It's June 8 now, is there an update on when we can expect orders?</td>\n",
       "      <td>0.416667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>these still on track? ahead? behind?</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>any update on delivery?</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>product so nice had to get it twice</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Just curious... Will you have any extension goals for if you hit 200% of your goal, or if you hit $10,000?</td>\n",
       "      <td>0.523810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Got hands on this kit at the photoshow Birmingham England liked it so much have backed it, looking forward to delivery.</td>\n",
       "      <td>0.380952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>looking forward to the many uses of this product. I am an educator who takes many films and pictures on mobile and other devices, so this should come in very handy for me.</td>\n",
       "      <td>0.515152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Hi! Looking forward to getting this product. What size tablet can the Mogo handle? Also, when I do basic videos, I usually use my cell phone for the audio. Is there a way to use the dampener (or, pop filter) along with holding the phone? I notice the thin wire that holds that filter is attached to the  mic holder, but I would like some way to put the filter with the phone to cover the phone microphone.</td>\n",
       "      <td>0.367089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Weâll post an update in the afternoon tomorrow! @clive</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Hi Guys,\\r\\n\\r\\nMay i know is there any update on this?</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>They've shipped! Last few boxes are being picked up on Monday and will arrive by two day shipping.</td>\n",
       "      <td>0.444444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>No update when they actually shipped out / if they shipped out?</td>\n",
       "      <td>0.416667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Woooohoooooooo ... the lightboxes are near! Juhuuuuu ...</td>\n",
       "      <td>0.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>update please. When will these start shipping?</td>\n",
       "      <td>0.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>In a previous update you mentioned the deliveries starting Dec 1st, did that happen?</td>\n",
       "      <td>0.357143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Good Morning, \\r\\nHas there been any news?</td>\n",
       "      <td>0.428571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Have surveys been sent out yet?</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>@Creator: been quiet for some time. How's the project going? Any new updates?</td>\n",
       "      <td>0.307692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>@ Imran: Thank you so much! We are all so excited.</td>\n",
       "      <td>0.454545</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                                                                                                                                                                                                                                                                                                                                                                     text  \\\n",
       "0   trying to wait a patient as i can lol                                                                                                                                                                                                                                                                                                                                                                                   \n",
       "1   Good morning Fotopro Team,  I noticed in some of the comments below you would be updating shipment details in June.  It's June 8 now, is there an update on when we can expect orders?                                                                                                                                                                                                                                  \n",
       "2   these still on track? ahead? behind?                                                                                                                                                                                                                                                                                                                                                                                    \n",
       "3   any update on delivery?                                                                                                                                                                                                                                                                                                                                                                                                 \n",
       "4   product so nice had to get it twice                                                                                                                                                                                                                                                                                                                                                                                     \n",
       "5   Just curious... Will you have any extension goals for if you hit 200% of your goal, or if you hit $10,000?                                                                                                                                                                                                                                                                                                              \n",
       "6   Got hands on this kit at the photoshow Birmingham England liked it so much have backed it, looking forward to delivery.                                                                                                                                                                                                                                                                                                 \n",
       "7   looking forward to the many uses of this product. I am an educator who takes many films and pictures on mobile and other devices, so this should come in very handy for me.                                                                                                                                                                                                                                             \n",
       "8   Hi! Looking forward to getting this product. What size tablet can the Mogo handle? Also, when I do basic videos, I usually use my cell phone for the audio. Is there a way to use the dampener (or, pop filter) along with holding the phone? I notice the thin wire that holds that filter is attached to the  mic holder, but I would like some way to put the filter with the phone to cover the phone microphone.   \n",
       "9   Weâll post an update in the afternoon tomorrow! @clive                                                                                                                                                                                                                                                                                                                                                                \n",
       "10  Hi Guys,\\r\\n\\r\\nMay i know is there any update on this?                                                                                                                                                                                                                                                                                                                                                                 \n",
       "11  They've shipped! Last few boxes are being picked up on Monday and will arrive by two day shipping.                                                                                                                                                                                                                                                                                                                      \n",
       "12  No update when they actually shipped out / if they shipped out?                                                                                                                                                                                                                                                                                                                                                         \n",
       "13  Woooohoooooooo ... the lightboxes are near! Juhuuuuu ...                                                                                                                                                                                                                                                                                                                                                                \n",
       "14  update please. When will these start shipping?                                                                                                                                                                                                                                                                                                                                                                          \n",
       "15  In a previous update you mentioned the deliveries starting Dec 1st, did that happen?                                                                                                                                                                                                                                                                                                                                    \n",
       "16  Good Morning, \\r\\nHas there been any news?                                                                                                                                                                                                                                                                                                                                                                              \n",
       "17  Have surveys been sent out yet?                                                                                                                                                                                                                                                                                                                                                                                         \n",
       "18  @Creator: been quiet for some time. How's the project going? Any new updates?                                                                                                                                                                                                                                                                                                                                           \n",
       "19  @ Imran: Thank you so much! We are all so excited.                                                                                                                                                                                                                                                                                                                                                                      \n",
       "\n",
       "    stopwords_percent  \n",
       "0   0.555556           \n",
       "1   0.416667           \n",
       "2   0.333333           \n",
       "3   0.500000           \n",
       "4   0.500000           \n",
       "5   0.523810           \n",
       "6   0.380952           \n",
       "7   0.515152           \n",
       "8   0.367089           \n",
       "9   0.333333           \n",
       "10  0.500000           \n",
       "11  0.444444           \n",
       "12  0.416667           \n",
       "13  0.250000           \n",
       "14  0.285714           \n",
       "15  0.357143           \n",
       "16  0.428571           \n",
       "17  0.333333           \n",
       "18  0.307692           \n",
       "19  0.454545           "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check percentage of stopwords\n",
    "stop = stopwords.words('english')\n",
    "\n",
    "df['stopwords_percent'] = df['text'].apply(lambda x: len([x for x in x.split() if x in stop]))/df['word_count']\n",
    "df[['text','stopwords_percent']].head(20)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>numerics_percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>trying to wait a patient as i can lol</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Good morning Fotopro Team,  I noticed in some of the comments below you would be updating shipment details in June.  It's June 8 now, is there an update on when we can expect orders?</td>\n",
       "      <td>0.027778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>these still on track? ahead? behind?</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>any update on delivery?</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>product so nice had to get it twice</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                                                                                                                                     text  \\\n",
       "0  trying to wait a patient as i can lol                                                                                                                                                    \n",
       "1  Good morning Fotopro Team,  I noticed in some of the comments below you would be updating shipment details in June.  It's June 8 now, is there an update on when we can expect orders?   \n",
       "2  these still on track? ahead? behind?                                                                                                                                                     \n",
       "3  any update on delivery?                                                                                                                                                                  \n",
       "4  product so nice had to get it twice                                                                                                                                                      \n",
       "\n",
       "   numerics_percent  \n",
       "0  0.000000          \n",
       "1  0.027778          \n",
       "2  0.000000          \n",
       "3  0.000000          \n",
       "4  0.000000          "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check percentage of digits\n",
    "df['numerics_percent'] = df['text'].apply(lambda x: len([x for x in x.split() if x.isdigit()]))/df['word_count']\n",
    "df[['text','numerics_percent']].head()\n",
    "#very little digital number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>upper_percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>trying to wait a patient as i can lol</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Good morning Fotopro Team,  I noticed in some of the comments below you would be updating shipment details in June.  It's June 8 now, is there an update on when we can expect orders?</td>\n",
       "      <td>0.027778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>these still on track? ahead? behind?</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>any update on delivery?</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>product so nice had to get it twice</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                                                                                                                                     text  \\\n",
       "0  trying to wait a patient as i can lol                                                                                                                                                    \n",
       "1  Good morning Fotopro Team,  I noticed in some of the comments below you would be updating shipment details in June.  It's June 8 now, is there an update on when we can expect orders?   \n",
       "2  these still on track? ahead? behind?                                                                                                                                                     \n",
       "3  any update on delivery?                                                                                                                                                                  \n",
       "4  product so nice had to get it twice                                                                                                                                                      \n",
       "\n",
       "   upper_percent  \n",
       "0  0.000000       \n",
       "1  0.027778       \n",
       "2  0.000000       \n",
       "3  0.000000       \n",
       "4  0.000000       "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check percentage of upper case\n",
    "df['upper_percent'] = df['text'].apply(lambda x: len([x for x in x.split() if x.isupper()]))/df['word_count']\n",
    "df[['text','upper_percent']].head()\n",
    "#small percentage of upper case"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>confidence</th>\n",
       "      <th>word_count</th>\n",
       "      <th>stopwords_percent</th>\n",
       "      <th>numerics_percent</th>\n",
       "      <th>upper_percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>trying to wait a patient as i can lol</td>\n",
       "      <td>1</td>\n",
       "      <td>0.3</td>\n",
       "      <td>9</td>\n",
       "      <td>0.555556</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Good morning Fotopro Team,  I noticed in some ...</td>\n",
       "      <td>1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>36</td>\n",
       "      <td>0.416667</td>\n",
       "      <td>0.027778</td>\n",
       "      <td>0.027778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>these still on track? ahead? behind?</td>\n",
       "      <td>1</td>\n",
       "      <td>0.2</td>\n",
       "      <td>6</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>any update on delivery?</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>product so nice had to get it twice</td>\n",
       "      <td>1</td>\n",
       "      <td>0.5</td>\n",
       "      <td>8</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204053</th>\n",
       "      <td>I'm curious if you've looked at working with t...</td>\n",
       "      <td>1</td>\n",
       "      <td>0.7</td>\n",
       "      <td>41</td>\n",
       "      <td>0.317073</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.024390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204054</th>\n",
       "      <td>Looking forward to another awesome campaign Ke...</td>\n",
       "      <td>1</td>\n",
       "      <td>1.7</td>\n",
       "      <td>15</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204055</th>\n",
       "      <td>Nice. Thanks for all answers! Cheers.</td>\n",
       "      <td>1</td>\n",
       "      <td>1.4</td>\n",
       "      <td>6</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204056</th>\n",
       "      <td>Wink was (and still) amazing. I was less enthu...</td>\n",
       "      <td>1</td>\n",
       "      <td>1.7</td>\n",
       "      <td>43</td>\n",
       "      <td>0.395349</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.046512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204057</th>\n",
       "      <td>Good luck - and bring us more projects :)</td>\n",
       "      <td>1</td>\n",
       "      <td>0.7</td>\n",
       "      <td>9</td>\n",
       "      <td>0.222222</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>204058 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     text  sentiment  \\\n",
       "0                   trying to wait a patient as i can lol          1   \n",
       "1       Good morning Fotopro Team,  I noticed in some ...          1   \n",
       "2                    these still on track? ahead? behind?          1   \n",
       "3                                 any update on delivery?          1   \n",
       "4                     product so nice had to get it twice          1   \n",
       "...                                                   ...        ...   \n",
       "204053  I'm curious if you've looked at working with t...          1   \n",
       "204054  Looking forward to another awesome campaign Ke...          1   \n",
       "204055              Nice. Thanks for all answers! Cheers.          1   \n",
       "204056  Wink was (and still) amazing. I was less enthu...          1   \n",
       "204057          Good luck - and bring us more projects :)          1   \n",
       "\n",
       "        confidence  word_count  stopwords_percent  numerics_percent  \\\n",
       "0              0.3           9           0.555556          0.000000   \n",
       "1              0.6          36           0.416667          0.027778   \n",
       "2              0.2           6           0.333333          0.000000   \n",
       "3              0.0           4           0.500000          0.000000   \n",
       "4              0.5           8           0.500000          0.000000   \n",
       "...            ...         ...                ...               ...   \n",
       "204053         0.7          41           0.317073          0.000000   \n",
       "204054         1.7          15           0.200000          0.000000   \n",
       "204055         1.4           6           0.333333          0.000000   \n",
       "204056         1.7          43           0.395349          0.000000   \n",
       "204057         0.7           9           0.222222          0.000000   \n",
       "\n",
       "        upper_percent  \n",
       "0            0.000000  \n",
       "1            0.027778  \n",
       "2            0.000000  \n",
       "3            0.000000  \n",
       "4            0.000000  \n",
       "...               ...  \n",
       "204053       0.024390  \n",
       "204054       0.000000  \n",
       "204055       0.000000  \n",
       "204056       0.046512  \n",
       "204057       0.000000  \n",
       "\n",
       "[204058 rows x 7 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.drop_duplicates(keep=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Remove punctuation and Double Space\n",
    "punctuation including emoji"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Text cleaning: remove punctuation and double space\n",
    "import string\n",
    "\n",
    "# Collect punctuation signs.\n",
    "table = str.maketrans(' ', ' ', string.punctuation)\n",
    "\n",
    "# Remove them from the text\n",
    "#emoji also be deleted in this step\n",
    "df.iloc[:,0] = [j.translate(table) for j in df.iloc[:,0]]\n",
    "df.iloc[:,0] = [j.replace('\\x96',' ') for j in df.iloc[:,0]]\n",
    "\n",
    "# Eliminate double spaces\n",
    "df.iloc[:,0] = [\" \".join(j.split()) for j in df.iloc[:,0]]\n",
    "\n",
    "# Show first 5\n",
    "df[['text']].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Stopwords Removal\n",
    "“Stop words” are the most common words in a language like “the”, “a”, “on”, “is”, “all”. These words do not carry important meaning and are usually removed from texts. It is possible to remove stop words using Natural Language Toolkit (NLTK), a suite of libraries and programs for symbolic and statistical natural language processing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Remove stop words\n",
    "# get stop_words\n",
    "# remove stop words\n",
    "stop_words = set(stopwords.words('english'))\n",
    "stop_words.add(\"would\")\n",
    "def remove_stop_words(string):\n",
    "    word_list = string.split()\n",
    "    filterd_list = []\n",
    "    for word in word_list:\n",
    "        if word not in stop_words:\n",
    "            filterd_list.append(word)\n",
    "    new_string = ' '.join(filterd_list)\n",
    "    return new_string"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Remove Contraction\n",
    "Contractions are shortened version of words or syllables. They often exist in either written or spoken forms in the English language. These shortened versions or contractions of words are created by removing specific letters and sounds. In case of English contractions, they are often created by removing one of the vowels from the word. Examples would be, do not to don’t and I would to I’d. Converting each contraction to its expanded, original form helps with text standardization.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def replace_contraction(string):\n",
    "    contraction_dict = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \n",
    "                        \"couldn't\": \"could not\", \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \n",
    "                        \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \n",
    "                        \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",  \n",
    "                        \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\", \n",
    "                        \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\n",
    "                        \"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\", \"it'd've\": \"it would have\", \n",
    "                        \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \n",
    "                        \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \n",
    "                        \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\",\n",
    "                        \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \n",
    "                        \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \n",
    "                        \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \n",
    "                        \"she's\": \"she is\", \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \n",
    "                        \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \n",
    "                        \"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \n",
    "                        \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\", \"they'll\": \"they will\", \n",
    "                        \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\", \n",
    "                        \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \n",
    "                        \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\", \n",
    "                        \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",  \"what's\": \"what is\", \n",
    "                        \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \n",
    "                        \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \n",
    "                        \"who's\": \"who is\", \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \n",
    "                        \"won't\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\", \"wouldn't\": \"would not\", \n",
    "                        \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\n",
    "                        \"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \"you'd've\": \"you would have\", \n",
    "                        \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\"}\n",
    "    word_list = string.split()\n",
    "    for index,word in enumerate(word_list):\n",
    "        if word in contraction_dict.keys():\n",
    "            word_list[index] = contraction_dict[word]\n",
    "    new_string = ' '.join(word_list)\n",
    "    return new_string"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Clean Text\n",
    "- numbers\n",
    "- convert uppercase to lowercase:\n",
    "    - This step allows a word to appear exactly the same every time it appears, so we can calculate word frequency accurately in the further analysis.\n",
    "- remove all stopwords: no analytical value\n",
    "- space\n",
    "- contraction\n",
    "- accented characters\n",
    "    - Usually in any text corpus, you might be dealing with accented characters/letters, especially if you only want to analyze the English language. Hence, we need to make sure that these characters are converted and standardized into ASCII characters. A simple example — converting é to e.\n",
    "- weblinks\n",
    "    - Often, unstructured text contains a lot of noise, especially if you use techniques like web or screen scraping. HTML tags are typically one of these components which don’t add much value towards understanding and analyzing text."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# define a function to cleanup the text\n",
    "def clean_text(x):\n",
    "    # remove all space and newline\n",
    "    text = x\n",
    "    text = text.replace(\"\\r\\n\",\"\")\n",
    "    # to lower case\n",
    "    text = text.lower()\n",
    "    #remove weblinks\n",
    "    text = re.sub(r\"http\\S+\", \"\", text)\n",
    "    #remove contractions\n",
    "    text = replace_contraction(text)\n",
    "    # remove all numbers\n",
    "    text = re.sub(r'\\d+','',text)\n",
    "    #remove punctuations\n",
    "    pattern = r'[^a-zA-z0-9\\s]'\n",
    "    text = re.sub(pattern, ' ', text)\n",
    "    #remove stopwords\n",
    "    text = remove_stop_words(text)\n",
    "    #remove accented characters\n",
    "    text = unicodedata.normalize('NFKD', text).encode('ascii', 'ignore').decode('utf-8', 'ignore')\n",
    "    return text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"Clean_text\"] = df['text'].apply(clean_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Clean_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>trying wait patient lol</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>good morning fotopro team noticed comments updating shipment details june june update expect orders</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>still track ahead behind</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>update delivery</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>product nice get twice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>strap looks really cheap mind much carabiners scratched bag holds going new strap made carabiners</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>got bag months ago first day using button inside broke pulling laptop seems really cheaply made responses company replacement messages literally first day received broke bag worth money looks like promotional bag could gotten free purchase cologne set department store</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>got shoulder strap pretty cheap expecting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>business guys ever product ok really worth price service terrible</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>well least got bag</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                                                                                                                                                                                                                      Clean_text\n",
       "0   trying wait patient lol                                                                                                                                                                                                                                                     \n",
       "1   good morning fotopro team noticed comments updating shipment details june june update expect orders                                                                                                                                                                         \n",
       "2   still track ahead behind                                                                                                                                                                                                                                                    \n",
       "3   update delivery                                                                                                                                                                                                                                                             \n",
       "4   product nice get twice                                                                                                                                                                                                                                                      \n",
       "..                     ...                                                                                                                                                                                                                                                      \n",
       "95  strap looks really cheap mind much carabiners scratched bag holds going new strap made carabiners                                                                                                                                                                           \n",
       "96  got bag months ago first day using button inside broke pulling laptop seems really cheaply made responses company replacement messages literally first day received broke bag worth money looks like promotional bag could gotten free purchase cologne set department store\n",
       "97  got shoulder strap pretty cheap expecting                                                                                                                                                                                                                                   \n",
       "98  business guys ever product ok really worth price service terrible                                                                                                                                                                                                           \n",
       "99  well least got bag                                                                                                                                                                                                                                                          \n",
       "\n",
       "[100 rows x 1 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['Clean_text']].head(100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Stemming\n",
    "Stemming refers to the removal of suffices, like “ing”, “ly”, “s”, etc. by a simple rule-based approach. For this purpose, we will use PorterStemmer from the NLTK library.\n",
    "\n",
    "To understand stemming, you need to gain some perspective on what word stems represent. Word stems are also known as the base form of a word, and we can create new words by attaching affixes to them in a process known as inflection. Consider the word JUMP. You can add affixes to it and form new words like JUMPS, JUMPED, and JUMPING. In this case, the base word JUMP is the word stem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                                 tri wait patient lol\n",
       "1    good morn fotopro team notic comment updat shi...\n",
       "2                             still track ahead behind\n",
       "3                                       updat deliveri\n",
       "4                               product nice get twice\n",
       "Name: Clean_text, dtype: object"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## I choose not to because many usual words will change to problematic words\n",
    "## there are many errors in stemming: over stemming/under stemming like it change trying to tri, morning to morn\n",
    "st = PorterStemmer()\n",
    "df['Clean_text'][:5].apply(lambda x: \" \".join([st.stem(word) for word in x.split()]))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Lemmatization\n",
    "Lemmatization is a more effective option than stemming because it converts the word into its root word, rather than just stripping the suffices. It makes use of the vocabulary and does a morphological analysis to obtain the root word.\n",
    "\n",
    "Lemmatization is very similar to stemming, where we remove word affixes to get to the base form of a word. However, the base form in this case is known as the root word, but not the root stem. The difference being that the root word is always a lexicographically correct word (present in the dictionary), but the root stem may not be so. Thus, root word, also known as the lemma, will always be present in the dictionary. Both nltk and spacy have excellent lemmatizers. We will be using spacy here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "import nltk\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "from nltk.corpus import wordnet\n",
    "\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "\n",
    "# function to convert nltk tag to wordnet tag\n",
    "def nltk_tag_to_wordnet_tag(nltk_tag):\n",
    "    if nltk_tag.startswith('J'):\n",
    "        return wordnet.ADJ\n",
    "    elif nltk_tag.startswith('V'):\n",
    "        return wordnet.VERB\n",
    "    elif nltk_tag.startswith('N'):\n",
    "        return wordnet.NOUN\n",
    "    elif nltk_tag.startswith('R'):\n",
    "        return wordnet.ADV\n",
    "    else:          \n",
    "        return None\n",
    "\n",
    "def lemmatize_sentence(sentence):\n",
    "    #tokenize the sentence and find the POS tag for each token\n",
    "    nltk_tagged = nltk.pos_tag(nltk.word_tokenize(sentence))  \n",
    "    #tuple of (token, wordnet_tag)\n",
    "    wordnet_tagged = map(lambda x: (x[0], nltk_tag_to_wordnet_tag(x[1])), nltk_tagged)\n",
    "    lemmatized_sentence = []\n",
    "    for word, tag in wordnet_tagged:\n",
    "        if tag is None:\n",
    "            #if there is no available tag, append the token as is\n",
    "            lemmatized_sentence.append(word)\n",
    "        else:        \n",
    "            #else use the tag to lemmatize the token\n",
    "            lemmatized_sentence.append(lemmatizer.lemmatize(word, tag))\n",
    "    return \" \".join(lemmatized_sentence)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"Clean_text\"] = df['Clean_text'].apply(lemmatize_sentence)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'think ask postal zip code problem paypal directly payment customdstuff com leave note ordering'"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[142,'Clean_text']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def deEmojify(inputString):\n",
    "    return inputString.encode('ascii', 'ignore').decode('ascii')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"Clean_text\"] = df['Clean_text'].apply(deEmojify)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Check if data is clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Clean_text</th>\n",
       "      <th>word_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>try wait patient lol</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>good morning fotopro team notice comment updat...</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>still track ahead behind</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>update delivery</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>product nice get twice</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          Clean_text  word_count\n",
       "0                               try wait patient lol           4\n",
       "1  good morning fotopro team notice comment updat...          14\n",
       "2                           still track ahead behind           4\n",
       "3                                    update delivery           2\n",
       "4                             product nice get twice           4"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check number of words of clean text\n",
    "df['word_count'] = df['Clean_text'].apply(lambda x: len(str(x).split(\" \")))\n",
    "df[['Clean_text','word_count']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#check percentage of stopwords\n",
    "stop = stopwords.words('english')\n",
    "\n",
    "df['stopwords_percent'] = df['Clean_text'].apply(lambda x: len([x for x in x.split() if x in stop]))/df['word_count']\n",
    "df[['Clean_text','stopwords_percent']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#check percentage of upper case of clean text\n",
    "df['upper_percent'] = df['Clean_text'].apply(lambda x: len([x for x in x.split() if x.isupper()]))/df['word_count']\n",
    "df[['Clean_text','upper_percent']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Check percentage of special character\n",
    "\n",
    "df['weblinks'] = df['Clean_text'].apply(lambda x: len([x for x in x.split() if re.findall(r'(https?://[^\\s]+)', x)]))/df['word_count']\n",
    "df[['Clean_text','weblinks']].head(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>Clean_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>trying to wait a patient as i can lol</td>\n",
       "      <td>try wait patient lol</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Good morning Fotopro Team,  I noticed in some of the comments below you would be updating shipment details in June.  It's June 8 now, is there an update on when we can expect orders?</td>\n",
       "      <td>good morning fotopro team notice comment update shipment detail june june update expect order</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>these still on track? ahead? behind?</td>\n",
       "      <td>still track ahead behind</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>any update on delivery?</td>\n",
       "      <td>update delivery</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>product so nice had to get it twice</td>\n",
       "      <td>product nice get twice</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Just curious... Will you have any extension goals for if you hit 200% of your goal, or if you hit $10,000?</td>\n",
       "      <td>curious extension goal hit goal hit</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Got hands on this kit at the photoshow Birmingham England liked it so much have backed it, looking forward to delivery.</td>\n",
       "      <td>get hand kit photoshow birmingham england like much back look forward delivery</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>looking forward to the many uses of this product. I am an educator who takes many films and pictures on mobile and other devices, so this should come in very handy for me.</td>\n",
       "      <td>look forward many us product educator take many film picture mobile device come handy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Hi! Looking forward to getting this product. What size tablet can the Mogo handle? Also, when I do basic videos, I usually use my cell phone for the audio. Is there a way to use the dampener (or, pop filter) along with holding the phone? I notice the thin wire that holds that filter is attached to the  mic holder, but I would like some way to put the filter with the phone to cover the phone microphone.</td>\n",
       "      <td>hi look forward get product size tablet mogo handle also basic video usually use cell phone audio way use dampener pop filter along hold phone notice thin wire hold filter attach mic holder like way put filter phone cover phone microphone</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Weâll post an update in the afternoon tomorrow! @clive</td>\n",
       "      <td>post update afternoon tomorrow clive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Hi Guys,\\r\\n\\r\\nMay i know is there any update on this?</td>\n",
       "      <td>hi guy may know update</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>They've shipped! Last few boxes are being picked up on Monday and will arrive by two day shipping.</td>\n",
       "      <td>ship last box pick monday arrive two day ship</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>No update when they actually shipped out / if they shipped out?</td>\n",
       "      <td>update actually ship ship</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Woooohoooooooo ... the lightboxes are near! Juhuuuuu ...</td>\n",
       "      <td>woooohoooooooo lightboxes near juhuuuuu</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>update please. When will these start shipping?</td>\n",
       "      <td>update please start shipping</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                                                                                                                                                                                                                                                                                                                                                                     text                                                                                                                                                                                                                                      Clean_text\n",
       "0   trying to wait a patient as i can lol                                                                                                                                                                                                                                                                                                                                                                                  try wait patient lol                                                                                                                                                                                                                          \n",
       "1   Good morning Fotopro Team,  I noticed in some of the comments below you would be updating shipment details in June.  It's June 8 now, is there an update on when we can expect orders?                                                                                                                                                                                                                                 good morning fotopro team notice comment update shipment detail june june update expect order                                                                                                                                                 \n",
       "2   these still on track? ahead? behind?                                                                                                                                                                                                                                                                                                                                                                                   still track ahead behind                                                                                                                                                                                                                      \n",
       "3   any update on delivery?                                                                                                                                                                                                                                                                                                                                                                                                update delivery                                                                                                                                                                                                                               \n",
       "4   product so nice had to get it twice                                                                                                                                                                                                                                                                                                                                                                                    product nice get twice                                                                                                                                                                                                                        \n",
       "5   Just curious... Will you have any extension goals for if you hit 200% of your goal, or if you hit $10,000?                                                                                                                                                                                                                                                                                                             curious extension goal hit goal hit                                                                                                                                                                                                           \n",
       "6   Got hands on this kit at the photoshow Birmingham England liked it so much have backed it, looking forward to delivery.                                                                                                                                                                                                                                                                                                get hand kit photoshow birmingham england like much back look forward delivery                                                                                                                                                                \n",
       "7   looking forward to the many uses of this product. I am an educator who takes many films and pictures on mobile and other devices, so this should come in very handy for me.                                                                                                                                                                                                                                            look forward many us product educator take many film picture mobile device come handy                                                                                                                                                         \n",
       "8   Hi! Looking forward to getting this product. What size tablet can the Mogo handle? Also, when I do basic videos, I usually use my cell phone for the audio. Is there a way to use the dampener (or, pop filter) along with holding the phone? I notice the thin wire that holds that filter is attached to the  mic holder, but I would like some way to put the filter with the phone to cover the phone microphone.  hi look forward get product size tablet mogo handle also basic video usually use cell phone audio way use dampener pop filter along hold phone notice thin wire hold filter attach mic holder like way put filter phone cover phone microphone\n",
       "9   Weâll post an update in the afternoon tomorrow! @clive                                                                                                                                                                                                                                                                                                                                                               post update afternoon tomorrow clive                                                                                                                                                                                                          \n",
       "10  Hi Guys,\\r\\n\\r\\nMay i know is there any update on this?                                                                                                                                                                                                                                                                                                                                                                hi guy may know update                                                                                                                                                                                                                        \n",
       "11  They've shipped! Last few boxes are being picked up on Monday and will arrive by two day shipping.                                                                                                                                                                                                                                                                                                                     ship last box pick monday arrive two day ship                                                                                                                                                                                                 \n",
       "12  No update when they actually shipped out / if they shipped out?                                                                                                                                                                                                                                                                                                                                                        update actually ship ship                                                                                                                                                                                                                     \n",
       "13  Woooohoooooooo ... the lightboxes are near! Juhuuuuu ...                                                                                                                                                                                                                                                                                                                                                               woooohoooooooo lightboxes near juhuuuuu                                                                                                                                                                                                       \n",
       "14  update please. When will these start shipping?                                                                                                                                                                                                                                                                                                                                                                         update please start shipping                                                                                                                                                                                                                  "
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['text','Clean_text']].head(15)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Estimate the embedding\n",
    "\n",
    "When we have the embedding model, using it:\n",
    "\n",
    "    - calculate the words that appear on the text and save to disk\n",
    "    - use the fastText program to obtain the word embeddings\n",
    "    - import the embeddings into a keras input layer\n",
    "    - train the model\n",
    "\n",
    "Start by selecting the inindividual words. Used the Keras internal model as Tokenizer, it will also add a dictionary to each word, which will be saved in the tokenizer model.\n",
    "\n",
    "## Tokenization\n",
    "Tokenization is the process of splitting the given text into smaller pieces called tokens. Words, numbers, punctuation marks, and others can be considered as tokens. In this table (“Tokenization” sheet) several tools for implementing tokenization are described."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "tokenizer = Tokenizer() # Creates tokenizer model.\n",
    "tokenizer.fit_on_texts(df.iloc[:,7]) # Trains it over the tokens that we have.\n",
    "\n",
    "# Get words\n",
    "Vals = list(tokenizer.word_index.keys())\n",
    "\n",
    "# Write CSV with the output.\n",
    "file = codecs.open('Token.csv', \"w\", \"utf-8\")\n",
    "\n",
    "for item in Vals:\n",
    "    file.write(\"%s\\r\\n\" % item)\n",
    "    \n",
    "file.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "get\r",
      "\r\n",
      "receive\r",
      "\r\n",
      "update\r",
      "\r\n",
      "thanks\r",
      "\r\n",
      "please\r",
      "\r\n",
      "one\r",
      "\r\n",
      "work\r",
      "\r\n",
      "ship\r",
      "\r\n",
      "like\r",
      "\r\n",
      "go\r",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!head Token.csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we have a csv file with all the words being used to comment in a standard format. \n",
    "It's ready to get the embeddings by calling the fasttext software from the command line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A3 Deep Learning.ipynb   Embedding.tsv            Token.csv\r\n",
      "A3.ipynb                 Embedding.tsv.bak        Untitled.ipynb\r\n",
      "Coursework 3.pdf         Embeddings.csv           WordDictionary.pkl\r\n",
      "Data_EmbeddingMatrix.txt \u001b[31mFull_Data.csv\u001b[m\u001b[m            \u001b[34mfastText-0.9.1\u001b[m\u001b[m\r\n",
      "\u001b[34mData_Preprocessed\u001b[m\u001b[m        \u001b[31mFull_Data.zip\u001b[m\u001b[m            v0.9.1.zip\r\n",
      "Data_Preprocessed.zip    \u001b[34mSlides\u001b[m\u001b[m                   wordDist.pdf\r\n"
     ]
    }
   ],
   "source": [
    "!ls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Archive:  crawl-300d-2M-subword.zip\n",
      "replace crawl-300d-2M-subword.vec? [y]es, [n]o, [A]ll, [N]one, [r]ename: ^C\n"
     ]
    }
   ],
   "source": [
    "!unzip crawl-300d-2M-subword.zip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "!./fastText-0.9.1/fasttext print-sentence-vectors fastText-0.9.1/crawl-300d-2M-subword.bin < Token.csv > Embedding.tsv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.007181 -0.089073 0.19473 -0.016126 -0.044843 -0.094701 0.19616 -0.018465 -0.086646 0.12113 0.023217 0.019671 -0.016454 0.0065642 -0.030724 -0.041599 0.02576 0.016276 0.036183 0.059891 0.046455 -0.10075 -0.021495 -0.023996 0.08337 -0.039292 0.060459 0.0029318 -0.0058676 -0.013658 -0.0086531 -0.087365 0.030636 0.015001 0.026891 -0.0052913 0.055496 0.022995 0.0056023 0.020985 -0.011607 -0.085155 0.02051 0.041695 -0.0074898 0.10059 -0.019427 0.011985 -0.018916 0.019231 0.020266 -0.029564 0.0076768 0.048306 -0.1891 -0.0067369 -0.057447 -0.0068907 -0.2866 -0.022092 0.0020975 -0.077045 0.0039817 -0.008649 -0.012246 -0.007959 0.0044499 -0.20425 -0.0031668 -0.056271 -0.0068235 -0.053962 0.0012724 0.017395 0.025839 -0.015109 -0.022239 -0.010507 -0.030959 -0.009455 0.052147 0.0016768 -0.20783 0.020811 0.019109 -0.030324 0.0031172 0.026053 0.059512 -0.0064557 -0.021406 -0.0068667 -0.053342 0.098833 0.013572 0.24795 -0.005514 0.01564 0.070622 0.050324 -0.014125 0.053655 0.054952 0.015084 -0.085443 -0.0035916 0.0047346 -0.023393 0.079274 0.031667 -0.0029112 -0.0044163 0.010843 0.027586 -0.053617 -0.063808 -0.012448 0.016483 0.015438 -0.19298 0.023328 -0.011743 0.013026 -0.019489 -0.018428 0.027045 0.03968 0.06388 -0.036822 0.052139 -0.015636 -0.0085293 -0.10904 0.024257 -0.016292 0.0060693 -0.02328 -0.018426 0.01091 0.0025726 0.025677 -0.012118 0.012346 -0.01303 -0.084382 0.0087822 0.0039358 -0.0080182 0.0056787 0.015262 -0.018135 -0.14266 0.011279 0.0065109 0.0084604 -0.019792 0.022867 -0.05304 0.10129 0.00014117 -0.0040732 0.059048 -0.050459 0.046374 -0.10907 0.06405 -0.034948 -0.013196 -0.012158 0.0065849 -0.025452 0.031071 -0.033801 -0.018032 0.0011271 0.017125 0.0012363 -0.0068077 -0.046786 0.0073168 0.01976 0.027016 0.040201 -0.11856 -0.13601 0.05483 -0.045248 0.17863 -0.015533 -0.01658 0.038305 0.0094675 -0.052131 -0.0093663 -0.020184 0.00076267 0.20974 0.022279 -0.00321 0.01827 -0.12497 -0.030199 -0.016503 0.034719 -0.026256 -0.039047 0.015311 0.03435 -0.02153 0.042827 -0.12067 0.0043686 -0.19771 0.011058 -0.019172 0.0011864 0.016623 -0.019668 -0.023337 -0.019225 -0.036686 -0.026238 0.012753 -0.019663 0.13206 -0.014287 0.00083491 0.086853 0.018195 0.024933 0.043932 -0.0057613 0.094502 -0.01837 -0.0060363 -0.021968 0.046032 -0.017458 -0.029452 -0.0011172 0.019647 -0.015428 5.1545e-05 0.053906 -0.0096212 0.046192 0.041248 0.010295 0.0078684 -0.039386 0.079796 -0.0061669 -0.025624 -0.098117 0.0018898 -0.048922 -0.02669 0.017588 -0.021412 -0.0057654 0.044725 -0.0079276 0.059897 -0.027831 0.041625 -0.0012234 0.011036 -0.010971 -0.0037627 -0.029048 -0.016983 -0.012343 -0.064216 -0.0050283 0.00041457 -0.0012385 0.047088 -0.0039882 -0.003756 0.046761 0.10689 0.014293 0.065917 0.038852 0.0041943 -0.015522 -0.03897 -0.051893 0.00096793 -0.015917 -0.0041126 0.046395 0.033611 0.00070786 0.020645 0.028258 -0.055644 -0.042866 -0.02914 0.00012571 \r\n",
      "0.014856 -0.16472 0.14477 0.01312 0.011416 -0.051152 0.1905 -0.044082 0.015225 -0.017878 -0.0009182 -0.03484 -0.005457 0.02638 -0.012146 0.023138 0.012153 -0.012786 -0.039445 -0.055701 -0.071817 -0.23197 -0.027741 -0.014853 0.10496 -0.052002 -0.012915 -0.019114 0.0096481 -0.0085882 -0.0093885 -0.034825 0.013387 0.0086543 0.0096821 0.083728 0.0032625 -0.022704 -0.071112 -0.017934 -0.073718 -0.10906 -0.022095 0.010789 -0.043025 0.099376 -0.10181 0.0023904 -0.056794 -0.014021 0.026166 -0.066484 -0.052602 0.038801 -0.062283 0.011554 -0.023412 0.054746 -0.27082 -0.035834 -0.017256 0.011004 -0.047441 -0.013894 -0.024851 -0.060609 -0.022017 -0.12044 -0.011286 -0.0031677 0.034277 -0.038414 0.0074753 0.019095 -0.0019167 -0.032125 -0.08385 -0.029075 -0.011854 0.016212 0.0090164 0.012366 -0.22844 0.050827 0.0040314 -0.048768 0.013271 -0.0528 -0.030424 0.0059057 0.076145 0.052591 -0.033057 0.10289 -0.0086023 0.24059 -0.028616 0.011739 0.089233 0.075181 -0.0055937 0.023395 0.00047905 0.023659 -0.095157 -0.05986 -0.020732 0.0054226 0.05505 0.077649 -0.072338 0.03234 0.03716 0.00065823 -0.017786 -0.015957 -0.078475 -0.0097733 -0.0089752 -0.18267 -0.021883 -0.034021 0.0019659 -0.010254 0.004125 -0.057666 0.02498 0.052998 0.034874 0.11532 0.006838 0.0049258 0.014761 0.018261 -0.013786 0.011805 -0.055636 0.055824 0.046745 0.018812 -0.0077999 -0.013492 0.022532 -0.037579 -0.11221 0.0086763 0.036066 -0.055927 0.035039 -0.0059549 0.00070657 -0.075358 0.018039 -0.010428 0.0083697 -0.033033 0.03326 -0.018052 -0.017284 0.014841 -0.019795 0.065929 -0.031347 0.012888 -0.04271 -0.022646 0.059117 0.02306 0.011866 -0.11837 0.014654 -0.0078041 0.033414 0.064655 -0.036134 0.0066518 0.025856 -0.036812 -0.026977 0.044082 0.024601 0.040979 0.053196 -0.094413 -0.06835 0.05964 -0.034906 -0.030139 0.009554 0.030806 0.029846 -0.044364 -0.062689 0.008109 -0.0405 0.032146 0.19033 -0.016082 0.01034 0.077947 -0.14535 -0.027981 -0.018246 -0.0055242 0.033457 -0.05557 -0.036619 0.0083697 -0.028232 0.018259 -0.098566 -0.025286 -0.066918 0.006835 -0.032906 -0.038873 0.011686 0.028748 -0.079506 -0.032286 0.074333 -0.0029596 0.0063222 -0.016637 0.049982 0.022617 -0.031158 0.050379 -0.021979 0.027145 -0.011362 0.015738 0.034917 -0.16787 0.014621 -0.024281 0.074223 0.02545 -0.0045745 0.023417 -0.032864 0.012837 -0.031768 0.065785 -0.071646 0.061465 0.062846 -0.0043174 0.0256 -0.079894 0.10847 -0.07739 0.047306 -0.0093746 0.0084926 0.028778 0.017209 -0.035017 -0.023204 -0.022503 0.014878 0.15672 -0.027327 -0.0062036 -0.0061271 -0.034054 -0.021754 -0.0046166 -0.002719 0.084681 -0.0026006 0.016574 0.012347 -0.038504 0.02491 0.020261 0.10667 -0.015789 -0.013809 -0.071296 0.080959 -0.034661 0.050331 -0.014167 0.007117 -0.038695 0.034152 -0.017181 -0.013737 -0.012254 0.037761 0.021115 0.019899 0.032761 0.01148 -0.0056755 0.055893 0.05676 -0.080176 -0.012144 \r\n",
      "0.0078675 -0.01046 0.044125 -0.011423 -0.057885 -0.029846 0.16228 0.028473 -0.0030843 0.012258 -0.014839 0.078401 -0.0074587 -0.0011654 -0.017685 0.032576 -0.035189 0.0011245 0.012134 -0.0027249 0.047777 0.014928 -0.022427 0.06273 0.076769 -0.036659 -0.092461 0.082639 -0.058097 -0.01741 0.021054 0.0027404 0.0095829 -0.048548 -0.041878 -0.10357 0.020952 -0.062801 0.057903 -0.14026 -0.031283 -0.15585 0.001642 0.048984 -0.0039844 0.1206 0.0028837 0.047837 -0.0047775 0.033351 -0.1159 -0.04259 0.080721 -0.081647 -0.029027 0.038664 0.064278 -0.0082157 -0.25166 -0.058388 0.022564 0.022505 -0.074634 -0.015305 0.021445 -0.034611 0.010016 -0.06912 0.0095855 -0.072471 0.0307 -0.036321 -0.0046932 0.039441 -0.038409 0.0085663 -0.055098 0.010368 -0.01212 0.026489 0.05787 0.017192 -0.027547 -0.016161 0.067332 -0.019175 -0.060591 -0.051222 -0.04386 0.022867 -0.017401 -0.042248 -0.037506 -0.03386 -0.012252 0.25709 0.037088 0.016082 0.10152 0.1119 -0.011902 -0.067751 -0.016673 -0.013641 -0.11561 -0.015533 -0.041803 -0.12685 -0.042378 -0.039965 -0.044185 0.0043174 -0.059496 0.016495 -0.010275 -0.091613 -0.1036 0.036651 -0.053847 -0.10948 0.010409 -0.013387 -0.009361 0.0086904 0.046256 0.012409 0.011505 0.10055 -0.0017453 0.043366 -0.033296 -0.028739 -0.091074 0.025223 0.0601 0.028029 0.014437 0.028855 0.032497 -0.077841 0.0028229 0.0031191 0.012705 -0.022011 0.006936 -0.020278 -0.023154 0.01401 0.045751 0.050169 0.0020358 0.015258 -0.022612 -0.0019749 0.041518 -0.015073 -0.0039002 0.074414 0.080756 0.035053 -0.063557 0.040602 -0.058008 0.051202 -0.083053 0.043758 -0.024266 -0.013993 0.053783 -0.0085382 -0.031746 -0.057571 -0.039869 0.049246 -0.010284 0.0015377 0.052228 -0.036156 -0.084232 0.047753 -0.043639 -0.10741 -0.036769 -0.069187 -0.099962 0.029962 -0.0088997 -0.0029719 -0.038635 0.0028912 -0.0017286 -0.08164 -0.039789 0.028787 0.042213 0.034818 0.15328 -0.029149 0.016323 0.024746 -0.22015 -0.051706 -0.021755 -0.0046199 0.021826 0.0019694 -0.019642 0.025338 0.0040037 0.0034012 -0.08883 0.1065 0.081148 0.018593 -0.012849 -0.053631 -0.093025 0.0081633 -0.043187 -0.012928 0.011443 0.061574 -0.02046 -0.035307 0.11988 -0.03544 0.092248 0.063819 -0.047083 -0.014365 -0.090383 -0.030106 -0.0098374 -0.052088 -0.041245 -0.12085 -0.0063379 0.072749 -0.034163 0.005663 -0.010886 -0.0075657 0.013552 -0.034384 -0.03349 0.023369 -0.029476 0.017512 0.032348 -0.11576 -0.018774 -0.033768 0.025777 0.045533 0.087057 0.057292 0.077358 0.0014552 0.029662 0.067453 -0.080527 0.10461 -0.06401 -0.030149 0.06063 0.016375 -0.0091807 0.057551 0.084178 -0.044329 -0.037349 -0.032106 -0.0057698 0.032647 -0.022804 0.092903 -0.0047458 0.052496 -0.0070866 0.0094274 -0.038416 0.051519 0.055958 0.015232 -0.02147 -0.020385 0.05953 0.040927 0.061123 -0.061956 0.030372 0.0057053 -0.07047 0.028578 0.048747 0.096779 0.14669 -0.017468 -0.079691 -0.052455 \r\n",
      "0.01621 -0.096392 0.038664 -0.021364 -0.053339 0.00071185 0.1823 0.054143 0.20609 -0.020268 -0.038682 0.041004 -0.0059724 0.032058 -0.0089208 0.059254 -0.0067645 0.00094685 -0.097619 -0.086349 -0.21404 -0.057197 -0.0035638 -0.018927 0.050906 -0.03961 -0.0051849 0.0038358 0.0020366 0.012925 0.0088793 0.0002393 0.014217 -0.010507 0.0033921 0.1075 0.0018875 0.030196 -0.011485 -0.016772 -0.042127 -0.076708 -0.03541 -0.013026 -0.058457 0.11334 -0.092298 0.036744 -0.13578 0.10047 0.012456 0.039127 0.0055722 0.045708 0.014404 -0.0056963 0.17288 -0.045699 -0.07386 -0.01406 -0.001509 0.1089 -0.08269 0.0059852 -0.015585 0.022473 0.013354 -0.23425 0.062399 0.078783 -0.013167 -0.04471 -0.023118 0.061884 0.031642 -0.020245 0.015561 0.015925 0.07617 0.0093355 0.0073963 -0.025384 -0.11238 -0.031499 0.061873 0.0056681 -0.00088721 -0.0019877 -0.035489 -0.041171 -0.11808 -0.0061461 -0.05868 0.071403 0.00038652 0.26139 0.021035 -0.012634 -0.035308 -0.0014309 -0.028871 -0.015846 0.019692 0.058766 -0.12241 0.023219 0.017821 0.015458 0.018737 0.034364 -0.019593 0.0020085 0.019059 -0.021822 -0.042804 0.020069 -0.00084373 0.070203 -0.040688 -0.1491 -0.065133 0.018804 -0.027773 -0.028995 -0.0086957 0.041739 0.025977 0.0001204 -0.045212 -0.16336 0.011915 0.036513 -0.017538 0.045631 -0.013924 0.027864 -0.029539 -0.041486 -0.010403 0.00354 0.028218 0.00087364 -0.10356 0.011833 0.046123 -0.02668 0.0306 0.0026888 0.05933 0.030975 -0.022278 -0.082614 -0.029556 0.086853 0.032354 0.019654 0.12949 -0.048823 0.11286 -0.02927 -0.020852 0.050076 0.0045349 0.037928 -0.026953 0.014626 -0.041367 0.03887 0.011935 -0.049949 -0.021833 0.051893 0.027254 -0.0070447 0.023581 0.044053 0.032082 -0.0035958 0.023251 0.020537 -0.012631 -0.029885 0.014146 -0.058346 -0.10313 0.059862 0.014988 0.06868 -0.067815 0.01534 0.0010942 0.029745 0.0017205 -0.059265 0.025946 -0.030853 -0.036799 0.02255 -0.032688 0.025809 -0.039466 0.027635 0.033531 0.025451 0.0083235 -0.030795 0.003353 0.030145 0.077066 -0.069623 -0.066275 0.053738 0.16282 0.027133 -0.054055 -0.0079194 0.024706 0.006244 -0.076328 0.042247 0.026155 0.02078 -0.027346 -0.057352 0.14036 0.0067949 0.041163 0.025202 0.019485 -0.047022 -0.012548 -0.11234 0.052855 0.035217 0.0035374 -0.0063724 0.076619 0.00082569 0.022415 -0.0092232 -0.014497 0.017929 -0.0091862 -0.09679 0.0023314 0.076067 0.0013615 -0.034148 0.024933 0.048724 0.036906 -0.0069026 0.0062321 0.033946 -0.0019873 -0.033754 -0.011912 -0.015952 0.036257 0.047934 -0.11653 0.080749 -0.096765 -0.0033046 0.060948 -0.035766 0.046382 0.049103 -0.023732 -0.052432 -0.0011748 -0.036978 0.020369 0.030317 -0.014529 -0.018202 0.064093 0.024505 0.0076077 -0.02591 -0.028491 0.018494 0.061274 -0.11683 0.011692 -0.071519 -0.053048 0.048229 -0.014311 -0.0016328 0.034218 0.065899 -0.033777 -0.012537 -0.045009 0.11126 0.10114 -0.025652 0.11224 0.022477 \r\n",
      "-0.0069416 -0.10033 0.050066 0.0090711 -0.029019 -0.038753 0.12917 -0.010285 0.088065 0.040843 -0.043374 -0.010168 -0.021562 -0.021408 -0.019132 0.050651 -0.0091856 -0.035656 -0.057585 0.042976 -0.020572 0.035985 0.012479 0.00107 0.094642 0.052339 -0.021441 0.010897 0.023586 0.019719 -0.047052 -0.038331 0.028565 -0.027917 -0.030597 0.0041616 0.0015821 -0.061249 -0.003416 -0.090467 -0.093659 -0.053052 -0.037697 0.028578 0.0058231 0.092079 -0.0072636 -0.012281 -0.077891 0.015803 -0.011137 0.008656 0.022143 0.021334 -0.087853 -0.01996 0.04444 -0.041321 -0.11613 0.03122 0.0040653 0.039088 0.037897 -0.0057879 -0.063658 0.022633 -0.033632 -0.11443 0.085456 0.048199 0.051388 0.026205 0.043252 0.017431 0.023799 -0.054652 -0.0782 -0.060001 0.043604 0.087183 0.096862 3.7122e-07 -0.15525 -0.033275 0.0023574 0.020567 -0.041987 -0.018348 -0.032269 -0.010124 -0.15743 0.04094 -0.11733 -0.13826 0.023979 0.27454 0.045396 -0.028451 -0.032255 0.10755 -0.040254 -0.03684 -0.025914 0.0158 -0.060079 -0.081346 0.050847 0.073405 0.02245 0.070614 -0.010889 0.017187 -0.040583 -0.03165 -0.068437 -0.030769 -0.015741 -0.01072 0.037184 -0.16411 0.01368 -0.020681 0.022532 -0.023088 -0.04361 0.013394 0.070447 0.041361 0.083831 0.12685 -0.017155 0.096065 -0.034396 -0.087371 -0.005627 -0.0054975 -0.037337 0.044579 0.0071024 -0.030805 0.019992 -0.055376 -0.045013 -0.018209 -7.8516e-05 -0.010068 -0.032106 -0.0064607 0.026271 0.021745 0.067686 -0.072701 -0.034845 -0.0025729 -0.033799 -0.0057436 -0.001063 -0.027154 0.136 -0.038607 0.029172 0.0001817 -0.052281 -0.042305 -0.11177 -0.0063057 0.0063035 -0.058216 -0.020594 -0.072034 -0.008341 0.0035661 -0.073719 -0.0086186 -0.014046 0.040989 -0.023297 -0.031215 -0.0052053 -0.046685 0.048456 0.010915 -0.0075029 -0.12511 -0.10418 0.042302 -0.028594 0.14082 0.026137 0.031015 0.056673 -0.008642 -0.15687 -0.042399 0.064929 -0.026509 0.11438 0.036391 -0.045559 0.076139 -0.098433 -0.063919 -0.011011 -0.027302 -0.030343 -0.065244 -0.015761 0.039794 0.020078 -0.02253 -0.11681 0.095019 0.13763 0.019353 0.0053616 -0.037792 0.036908 -0.0061721 -0.15349 0.0048232 -0.037504 0.013942 -0.013207 -0.025377 0.16639 -0.11201 -0.022122 0.083911 -0.03386 0.020933 0.022197 -0.039227 0.064725 0.040394 -0.00088252 -0.018384 0.072309 0.035378 0.010577 -0.043681 0.043824 -0.0094693 0.045018 -0.053358 0.03775 0.045769 0.027943 0.11579 -0.035978 -0.030214 -0.0067402 -0.077602 -0.0056777 -0.035945 -0.0096579 -0.026084 0.020612 -0.04238 0.012834 0.013939 -0.011275 0.036821 -0.11646 -0.049182 0.0038214 -0.038056 0.0032219 0.0055644 -0.0089527 -0.000348 -0.079237 -0.036822 -0.068341 0.017137 0.021146 -0.0054151 -0.024231 0.04652 -0.0074985 -0.016048 0.061176 0.024562 0.032713 0.037189 -0.063862 -0.012507 0.1231 -0.042324 0.017507 0.017156 -0.0034932 0.027354 0.12599 -0.049728 0.081953 0.077353 0.0051543 -0.06542 -0.017496 0.019157 \r\n",
      "0.012935 -0.029802 0.053732 -0.0079671 0.029372 -0.018989 0.17611 0.00055311 -0.011629 -0.12715 0.014453 -0.0067484 -0.011051 0.0026805 0.010862 0.022093 0.013695 0.047587 0.017159 0.09482 -0.020535 -0.052476 -0.043273 0.00060094 0.021053 -0.0049234 -0.14911 -0.0038349 0.0033859 0.003316 0.053149 -0.0496 -0.015506 -0.0094378 -0.052637 0.022344 0.022131 -0.023076 -0.0025773 0.042413 0.072279 -0.12974 0.0084006 -0.0049413 -0.017208 0.077881 -0.054472 -0.0018564 -0.080055 0.020686 0.0093598 0.0031392 0.030446 0.023892 -0.089124 0.0032223 0.062419 0.0084396 0.029086 0.0051555 0.02255 -0.0086705 -0.087765 -0.011835 -0.043699 0.014706 0.010971 -0.18305 -0.011449 0.053865 0.024335 -0.022249 0.0030724 0.012404 -0.010898 0.01933 -0.025452 -0.03287 0.043701 0.0039513 0.02133 -0.019457 -0.082822 0.0034238 -0.0062355 -0.0089878 -0.020179 0.009816 0.074422 -0.0048128 0.04637 0.0091704 0.045933 0.12877 -0.0016291 0.29725 -0.0085487 0.027813 0.0065327 -0.04495 0.026569 -0.02443 0.0076471 -0.0061734 0.096504 0.015546 0.0086259 -0.0079273 0.16568 0.031508 -0.039281 0.0078038 -0.012056 -0.077523 -0.017711 -0.013356 -0.12199 -0.0093058 -0.057924 -0.33659 0.078701 0.0207 0.010313 -0.0046489 -0.011587 0.04272 0.037809 0.037312 -0.037432 -0.027191 -0.024243 0.018508 -0.036979 0.0039335 -0.010145 0.0077049 -0.013019 0.023158 -0.089363 0.1388 0.015793 0.010581 0.10309 -0.064886 -0.071897 0.0046646 -0.0047913 -0.010575 -0.0079484 -0.0062879 0.014245 -0.08675 -0.061169 -0.012688 0.036043 0.0085364 -0.22878 -0.13098 -0.035562 -0.011523 0.011784 0.019443 -0.038632 0.0065687 -0.038077 0.011142 -0.00027997 0.027127 -0.018683 -0.028958 0.025203 0.019856 0.012983 0.03425 0.017582 0.0025451 0.10491 0.0035167 -0.067616 -0.038274 -0.021792 0.020776 0.016347 -0.1575 -0.15421 -0.037109 -0.047357 0.042703 0.014542 0.0012115 0.019867 -0.019588 -0.027058 -0.0036544 -0.01703 -0.04309 0.11759 -0.023706 -0.0056932 0.013687 -0.061087 -0.017257 -0.011617 -0.0045364 0.027938 0.113 0.0042566 0.017431 -0.0028971 0.066935 -0.15673 -9.9245e-05 -0.051663 0.021515 0.039242 -0.012781 0.046762 0.0092358 -0.072784 0.017165 0.019304 -0.032962 -0.025706 0.0078877 0.1807 -0.031853 0.0048989 0.10994 -0.0050996 0.0087889 0.0010933 0.010064 0.00066639 0.091459 -0.0096076 0.025172 -0.032807 -0.003287 0.017408 0.0080801 -0.033912 -0.008949 -0.00043016 0.0048398 0.0080371 0.032392 0.0034107 0.043774 -0.0035453 -0.121 0.1292 -0.025011 0.002468 0.053392 -0.071649 -0.076667 0.0043516 0.024311 0.00025912 0.0085561 0.015985 -0.050608 0.043779 0.010252 0.028949 0.0026659 -0.013106 0.02434 -0.058294 -0.0024465 0.0040797 0.023711 -0.046746 0.00051855 0.006038 -0.020563 -0.073484 -0.027517 -0.036277 0.021282 -0.087218 -0.0052728 0.00049872 0.013704 -0.0020986 -0.0026724 0.0044204 0.05742 -0.012384 -0.016933 -0.023912 -0.0010798 -0.10208 0.022338 -0.010795 0.1213 -0.049068 -0.044977 -0.063863 0.0066597 \r\n",
      "-0.0077061 -0.032595 0.127 0.042621 -0.090099 -0.066069 0.16168 -0.012458 -0.035176 0.070223 -0.0053961 0.052687 0.044588 -0.046596 -0.012012 -0.034985 -0.0097014 -0.019047 0.045454 0.11656 0.0034406 0.0021038 0.03158 -0.01787 0.10865 -0.019759 -0.099669 0.036164 0.0074624 0.0088781 -0.011083 0.062294 -0.050837 -0.013119 0.050073 -0.06504 0.047303 0.0061348 0.013647 -0.010662 0.062032 -0.16971 -0.033305 -0.0076523 -0.03317 0.10467 0.021368 0.051698 0.027512 -0.021371 0.034987 -0.0039782 -0.015836 0.023821 -0.08337 -0.023241 0.091179 -0.018455 -0.24828 -0.087653 -0.0033046 -0.050492 0.10462 -0.01672 -0.070267 -0.051049 0.0030119 0.019689 -0.010179 -0.062044 0.01725 -0.046017 -0.0039057 -0.015846 -0.021987 0.0030447 0.03795 0.0055577 0.025916 0.0094309 -0.074912 0.0016879 0.029035 0.023947 -0.0087314 -0.0037966 -0.022329 -0.039711 0.065373 -0.017201 0.035234 0.042078 -0.05925 -0.074307 0.0050722 0.3494 -0.01424 -0.020785 0.05743 0.048935 0.045314 0.028177 0.08568 0.083647 -0.060446 -0.059387 0.033956 0.02052 0.04274 0.013083 0.0071644 0.015146 -0.031568 0.017302 -0.036985 -0.03139 -0.043802 0.022793 -0.03251 -0.28108 -0.00050998 0.038769 0.040966 0.013682 -0.030665 -0.0055014 0.048408 0.038278 -0.14761 -0.0063767 -0.0042199 -0.0063468 -0.041189 -0.053532 0.0078304 -0.011718 0.05291 0.00064743 0.045442 0.040308 -0.022267 0.058219 0.002285 0.056895 0.039753 0.0012506 -0.048172 -0.028569 0.041864 0.038946 0.0083725 0.009872 -0.0015923 0.013224 0.020217 -0.053538 -0.046623 0.0070929 0.096178 0.0042008 0.052261 0.10026 -0.049013 0.051372 0.0052287 0.096136 -0.0024262 0.026016 0.021628 0.031758 -0.042977 0.05684 -0.047924 0.0024624 -0.052874 0.041851 0.039257 -0.0040402 -0.047098 -0.017909 -0.01004 -0.04365 0.081771 -0.038813 -0.13105 0.024258 0.081286 0.0085425 0.021222 0.064453 -0.037749 -0.053351 -0.036143 -0.060055 0.0055911 0.050459 0.11178 0.039023 0.038117 0.065096 -0.23878 0.0098546 -0.032573 0.070949 -0.0011435 -0.028811 0.041533 -0.003008 -0.068871 0.0046713 -0.13556 0.044517 -0.021307 -0.023433 -0.03408 0.045585 0.025905 -0.022128 -0.080317 0.027351 -0.019086 -0.014736 0.0061304 -0.01842 0.12699 0.04315 -0.015929 0.10064 0.008828 -0.0062155 -0.02167 -0.063302 -0.00072096 0.077771 -0.017944 0.0050815 0.0062962 0.017889 0.0087251 0.0037128 0.053888 -0.047841 0.025912 0.049643 0.062337 0.0088278 0.081091 0.024442 0.026325 -0.053685 0.040853 -0.038609 0.090605 0.014935 -0.0040784 -0.034825 0.014125 0.010461 -0.024713 0.0041832 0.033087 0.0055383 -0.061073 -0.024405 0.077099 0.016247 -0.033009 0.063638 -0.020329 -0.016476 0.0036171 0.00089975 -0.075807 0.029869 0.046919 -0.0062263 -0.019773 -0.00020871 -0.0089094 -0.023104 0.060527 0.0014889 0.027279 -0.043541 0.021455 0.035375 -0.072385 -0.063076 -0.015745 -0.027854 -0.00057729 -0.03992 -0.075772 0.034931 0.059349 0.06437 0.032521 -0.0042395 0.038926 0.0099016 \r\n",
      "-0.015309 -0.0036045 0.10614 -0.0088543 0.0035238 -0.038517 0.11901 -0.051298 -0.058716 -0.051515 0.018712 -0.10372 -0.07306 -0.10457 0.065693 -0.0097314 0.0051508 0.034903 0.063027 0.10258 0.065383 -0.02632 0.0047051 0.078639 -0.0048662 0.011836 -0.072119 0.010351 0.033579 0.040656 -0.017022 0.011088 -0.011593 0.027005 0.11199 -0.00046338 0.072191 0.021667 0.029956 0.059923 0.014895 -0.15065 -0.013216 -0.048375 -0.00098157 0.078378 -0.030818 -0.062242 0.059558 0.018587 -0.049878 -0.0055032 0.10434 -0.023511 -0.057878 -0.088003 -0.045552 -0.079234 -0.17722 -0.10832 0.055172 -0.074056 -0.0012306 0.066304 0.028476 -0.031312 -0.13903 0.0019818 -0.025104 0.00050179 -0.034545 0.022984 -0.026911 -0.02274 0.068743 -0.0024441 0.011668 0.04917 0.0096654 -0.017468 -0.036371 -0.061939 0.027868 -0.090787 0.044326 -0.033376 -0.10474 0.00047257 0.010538 0.067889 -0.011441 0.11079 -0.02226 0.011902 0.12361 0.24352 -0.0031832 -0.011057 0.087091 0.080381 -0.013667 0.067209 -0.055375 0.0040422 -0.036238 0.020994 0.068328 0.023893 0.057964 0.02182 -0.068041 -0.069393 0.0050024 0.048367 -0.071774 -0.034456 -0.048219 0.042433 0.015517 -0.16997 -0.028237 -0.051414 -0.018593 -0.026078 0.013196 0.018092 -0.015957 0.048147 0.13559 -0.028438 -0.073317 0.010409 -0.020462 -0.001729 0.024576 -0.047816 0.016005 0.09623 0.037139 -0.00021276 0.0030525 -0.0016606 0.11743 -0.04972 -0.068252 -0.031829 -0.054235 -0.071584 -0.03299 -0.052553 -0.030446 -0.059964 -0.030826 -0.011153 -0.037737 0.038538 -0.015739 -0.01707 0.016067 0.024649 0.017107 -0.020806 -0.021622 0.0012406 0.01335 0.07738 -0.0079041 -0.065718 -0.022316 -0.031533 0.0070762 0.039719 -0.038827 -0.036618 0.06933 0.016706 0.045582 0.060407 -0.059379 0.092048 0.080336 -0.079891 -0.026813 -0.1069 -0.095732 -0.0014112 -0.05022 0.054571 0.038908 -0.043523 -0.023525 0.010711 -0.031015 -0.0098978 -0.04376 -0.036894 0.060422 -0.059504 0.053279 -0.12554 -0.12462 -0.0022775 0.028053 0.019748 0.057347 0.04123 -0.066751 -0.028952 -0.044754 -0.075141 -0.10888 0.04981 -0.025065 -0.041177 0.010861 -0.075306 -0.011882 0.093497 -0.098056 -0.039101 0.11042 -0.063646 -0.024144 0.011397 0.087971 -0.014806 0.008913 0.083439 -0.10205 0.018726 -0.042753 0.02438 -0.026823 -0.0043765 -0.051217 0.022028 0.033973 -0.076764 0.0031957 -0.067368 -0.012323 -0.027183 0.039808 0.052684 -0.071396 0.029619 0.098096 0.0038251 0.0057323 -0.018468 0.020834 -0.0064851 0.055748 -0.042932 0.017218 -0.069638 0.06629 -0.074576 0.062763 -0.0011004 -0.017701 0.039956 -0.051718 0.011188 -0.019025 0.03417 0.0095242 0.0044851 -0.0024461 -0.070692 -0.05006 -0.0097882 -0.04833 0.0055163 0.14447 0.034457 0.038899 0.0039125 0.03413 0.044831 0.033644 -0.017781 0.091978 -0.048696 0.045362 0.030358 0.048943 -0.090933 -0.134 0.023802 0.064471 -0.10685 -0.089257 -0.027291 -0.029935 0.021948 -0.0086766 0.0089125 0.016463 0.067346 \r\n",
      "0.018911 -0.014773 0.088629 -0.0024652 -0.037861 -0.077909 0.25912 0.011378 0.023513 0.026677 0.016273 0.0078798 0.012146 0.02371 -0.0063843 0.017663 0.032719 0.041117 -0.088331 0.083541 -0.045916 -0.077853 0.014271 -0.0026525 0.066405 0.0035707 0.064154 -0.0015907 -0.010407 0.04236 0.0028196 -0.08038 0.022536 -0.0062232 -0.059246 0.015202 0.040354 0.0056395 0.021526 -0.029518 -0.089525 -0.04289 -0.039245 0.032765 0.0074435 0.12067 -0.056479 0.035519 -0.037189 -0.0021013 0.040956 -0.0026522 0.075444 0.018153 -0.13775 0.016631 -0.1125 -0.023608 0.018432 0.0012815 0.043353 -0.071191 -0.025869 0.0039886 -0.0017092 -0.015954 0.014915 0.023448 0.015645 -0.0034528 -0.010426 -0.037909 0.00035118 -0.039014 0.08991 0.007174 -0.00058533 -0.010419 0.019919 0.026067 0.056641 -0.005011 -0.24455 -0.023772 0.021667 0.018145 0.013509 -0.019937 0.069691 0.024632 -0.095661 -0.035796 -0.12605 0.0034972 0.032942 0.34083 0.028337 0.0018981 -0.0071996 0.015702 -0.023618 0.013951 0.063363 -0.0044336 -0.080693 0.016745 0.059701 -0.030464 0.061916 -0.011295 -0.048193 -0.017095 -0.012101 -0.038412 -0.074968 0.017136 -0.033086 -0.011839 -0.0013488 -0.26057 -0.01964 -0.0012453 -0.016353 -0.036532 -0.0088991 -0.026318 0.044322 0.040326 -0.039385 -0.076656 -0.017029 -0.013685 0.020962 0.022597 -0.021116 -0.01744 -0.065179 -0.047208 -0.030967 0.016432 0.049533 -0.035062 -0.054606 0.066151 -0.058022 0.017134 -0.0035306 -0.037507 0.0029066 0.035277 0.0375 0.11024 0.0008705 0.024159 -0.00056244 0.00039357 -0.002042 -0.05233 0.014303 -0.041653 -0.00010457 0.035246 -0.0062308 -0.011406 -0.0069647 -0.036928 -0.017904 -0.026948 0.018449 -0.00054537 0.0093251 0.020283 -0.046168 0.012101 0.0088786 0.02971 -0.040419 0.039315 0.081631 0.037998 0.0047325 -0.00060415 0.0073591 -0.16129 -0.19006 -0.0018553 -0.0029709 -0.089124 0.027496 -0.019137 0.0039264 -0.04033 -0.038168 0.030126 0.00044941 0.032289 0.034386 0.002246 -0.016752 0.017584 -0.1556 -0.011063 0.012077 0.031344 0.012757 -0.016028 0.030701 0.0067695 -0.0055937 0.00084644 -0.11866 0.0050009 0.11462 0.031179 -0.014859 0.02108 0.019329 -0.012334 -0.052517 -0.00078252 0.017177 -0.05401 -0.05011 0.016307 0.097739 -0.066423 0.025709 0.026711 0.053324 0.020323 0.20898 -0.0045741 -0.038962 0.049454 0.010268 0.0094279 -0.023035 -0.0090088 0.044713 -0.03559 0.049371 -0.026092 -0.013022 -0.05997 0.051989 0.035559 0.027795 -0.0075594 -0.018299 0.0060616 0.23129 0.0054597 -0.0066677 -0.0064297 -0.012908 -0.061475 0.0076218 0.04161 -0.018998 -0.0086236 0.033622 -0.01326 -0.0087905 0.060186 0.041552 -0.043087 0.013834 0.0017904 -0.023879 -0.025662 -0.0059512 -0.014314 -0.042143 -0.016468 0.023344 -0.007874 -0.12791 -0.09381 -0.00093772 -0.0298 0.032853 0.052771 0.0366 -0.028306 0.0068085 0.006754 0.047507 -0.16994 -0.019715 0.0092281 -0.018769 0.021491 -0.009647 0.0026713 -0.0051643 0.10491 -0.038408 -0.0050942 0.01476 0.0076273 \r\n",
      "-0.024961 -0.1819 0.068752 -0.030449 -0.058934 -0.039542 0.083582 -0.01106 -0.071599 0.040178 0.027628 -0.027281 -0.0066007 -0.029579 -0.046425 0.025119 0.0058485 0.026031 0.051296 0.1147 -0.0010122 -0.087711 0.013529 -0.020323 0.040392 -0.013507 0.02449 -0.0071695 -0.024823 0.0063323 0.0003268 0.01981 -0.0045659 0.016431 0.020734 0.022875 0.036373 0.00014654 0.021496 0.026287 -0.041295 -0.090979 0.020139 0.027941 -0.026115 0.1283 0.022678 0.0060236 0.019289 0.034582 0.01671 -0.03136 0.0024818 0.047429 -0.099367 -0.010444 -0.035632 -0.015292 -0.28845 -0.027987 0.0077244 -0.04997 -0.028404 0.018607 -0.029982 0.0063165 0.009138 -0.10357 0.0021827 -0.039225 0.017227 -0.07855 -0.0023428 -0.0029202 0.042102 -0.014303 -0.012548 -0.0049048 0.0061563 0.0053538 0.064663 -0.00072359 -0.19309 -0.010759 0.022762 0.019525 -0.012738 0.029309 0.088533 0.0020619 -0.083255 0.019395 -0.071666 -0.15289 -0.0053015 0.27041 -0.010195 0.017419 0.043868 0.027106 0.034705 0.0099545 0.044248 -0.0047726 -0.15548 -0.02054 0.0056567 -0.012366 0.044605 0.012175 0.011234 0.0085952 0.0041718 -0.0089064 -0.041482 -0.059476 0.0043718 -0.01056 0.0083008 -0.20531 -0.0065595 0.001238 0.023255 0.0082055 0.021656 -0.018534 0.033113 -0.068746 -0.042619 -0.03053 -0.025724 0.010757 -0.035226 -0.020161 0.01202 0.015337 0.0042229 0.0014762 0.036638 0.031452 0.013455 -0.00041716 -0.02574 -0.028351 0.0015492 0.024485 0.002594 -0.04629 0.0082875 0.010481 -0.024257 -0.11407 -0.039423 -0.0042098 0.023666 -0.012448 -0.11285 -0.011749 0.12052 0.0034427 -0.028683 0.037018 -0.053006 -0.02778 -0.030069 0.023742 -0.017609 -0.086508 -0.0072468 0.012303 -0.0068957 0.031598 0.0014469 0.019303 0.020505 0.015566 0.02688 0.00046867 -0.10952 -0.070665 -0.03464 0.0094399 0.010598 -0.11075 -0.21016 -0.071099 -0.015157 7.2463e-05 0.018466 -0.020122 -0.015412 0.019556 -0.10211 -0.0038193 -0.030486 -0.018026 0.15951 0.00075846 -0.015766 0.019432 -0.14571 -0.028473 0.0014258 0.0041853 -0.047816 -0.16133 -0.019966 0.034992 0.011435 0.043206 -0.10108 -0.010121 -0.1019 -0.032077 -0.013956 0.0060812 0.030524 -0.043763 -0.16796 -0.0045023 0.0091859 -0.036602 -0.026282 0.0094356 0.12872 -0.049855 -0.029638 0.12773 0.035589 0.0086303 0.099041 0.11036 0.035021 0.16324 -0.0092183 -0.047435 0.001741 -0.022155 0.0072833 -0.03822 0.053807 -0.0368 0.01191 0.06035 0.031828 0.1093 0.028852 0.025738 0.0095817 -0.0089882 0.070983 -0.025336 -0.0053524 -0.045518 -0.012551 -0.070038 0.0090112 0.041865 0.007007 -0.0060704 0.013385 -0.090524 -0.01045 -0.016817 0.0013663 0.017558 0.010082 -0.017323 0.050937 -0.024244 -0.061438 0.0074626 -0.10174 0.0026183 -0.00020934 -0.060048 -0.019913 0.021945 0.037222 -0.02266 0.034284 0.041045 0.050655 -0.022981 -0.00087111 -0.017414 -0.00029565 -0.12586 -0.0018429 -0.02346 0.054163 0.037485 0.064073 0.012864 -0.018028 0.0075848 0.041465 -0.039123 0.030905 0.0028862 \r\n"
     ]
    }
   ],
   "source": [
    "!head Embedding.tsv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is only for training, for testing we would:\n",
    "\n",
    "- If we kept the embedding as is, we simply calculate the new embeddings for the new words and add it to our matrix.\n",
    "\n",
    "- If we retrained the embeddings, then we would either use the output that we already have if the word was in our original vocabulary, or just leave a vector of zeros for those words if it is not.\n",
    "\n",
    "fastText outputs space-separated words. We replace them with a comma."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "with fileinput.FileInput('Embedding.tsv', inplace=True, backup='.bak') as file:\n",
    "    for line in file:\n",
    "        print(line.replace(' ', ','), end='')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We add a first line with the variable names, to be able to import it back."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the first line\n",
    "firstLine = ','.join(['D'+str(i) for i in np.arange(1, 301)]) + '\\n'\n",
    "\n",
    "# Open as read only. Read the file\n",
    "with open('Embedding.tsv', 'r') as original: \n",
    "  data = original.read()\n",
    "\n",
    "# Open to write and write the first line and the rest\n",
    "with open('Embeddings.csv', 'w') as modified: \n",
    "  modified.write(firstLine + data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,D23,D24,D25,D26,D27,D28,D29,D30,D31,D32,D33,D34,D35,D36,D37,D38,D39,D40,D41,D42,D43,D44,D45,D46,D47,D48,D49,D50,D51,D52,D53,D54,D55,D56,D57,D58,D59,D60,D61,D62,D63,D64,D65,D66,D67,D68,D69,D70,D71,D72,D73,D74,D75,D76,D77,D78,D79,D80,D81,D82,D83,D84,D85,D86,D87,D88,D89,D90,D91,D92,D93,D94,D95,D96,D97,D98,D99,D100,D101,D102,D103,D104,D105,D106,D107,D108,D109,D110,D111,D112,D113,D114,D115,D116,D117,D118,D119,D120,D121,D122,D123,D124,D125,D126,D127,D128,D129,D130,D131,D132,D133,D134,D135,D136,D137,D138,D139,D140,D141,D142,D143,D144,D145,D146,D147,D148,D149,D150,D151,D152,D153,D154,D155,D156,D157,D158,D159,D160,D161,D162,D163,D164,D165,D166,D167,D168,D169,D170,D171,D172,D173,D174,D175,D176,D177,D178,D179,D180,D181,D182,D183,D184,D185,D186,D187,D188,D189,D190,D191,D192,D193,D194,D195,D196,D197,D198,D199,D200,D201,D202,D203,D204,D205,D206,D207,D208,D209,D210,D211,D212,D213,D214,D215,D216,D217,D218,D219,D220,D221,D222,D223,D224,D225,D226,D227,D228,D229,D230,D231,D232,D233,D234,D235,D236,D237,D238,D239,D240,D241,D242,D243,D244,D245,D246,D247,D248,D249,D250,D251,D252,D253,D254,D255,D256,D257,D258,D259,D260,D261,D262,D263,D264,D265,D266,D267,D268,D269,D270,D271,D272,D273,D274,D275,D276,D277,D278,D279,D280,D281,D282,D283,D284,D285,D286,D287,D288,D289,D290,D291,D292,D293,D294,D295,D296,D297,D298,D299,D300\r\n",
      "-0.007181,-0.089073,0.19473,-0.016126,-0.044843,-0.094701,0.19616,-0.018465,-0.086646,0.12113,0.023217,0.019671,-0.016454,0.0065642,-0.030724,-0.041599,0.02576,0.016276,0.036183,0.059891,0.046455,-0.10075,-0.021495,-0.023996,0.08337,-0.039292,0.060459,0.0029318,-0.0058676,-0.013658,-0.0086531,-0.087365,0.030636,0.015001,0.026891,-0.0052913,0.055496,0.022995,0.0056023,0.020985,-0.011607,-0.085155,0.02051,0.041695,-0.0074898,0.10059,-0.019427,0.011985,-0.018916,0.019231,0.020266,-0.029564,0.0076768,0.048306,-0.1891,-0.0067369,-0.057447,-0.0068907,-0.2866,-0.022092,0.0020975,-0.077045,0.0039817,-0.008649,-0.012246,-0.007959,0.0044499,-0.20425,-0.0031668,-0.056271,-0.0068235,-0.053962,0.0012724,0.017395,0.025839,-0.015109,-0.022239,-0.010507,-0.030959,-0.009455,0.052147,0.0016768,-0.20783,0.020811,0.019109,-0.030324,0.0031172,0.026053,0.059512,-0.0064557,-0.021406,-0.0068667,-0.053342,0.098833,0.013572,0.24795,-0.005514,0.01564,0.070622,0.050324,-0.014125,0.053655,0.054952,0.015084,-0.085443,-0.0035916,0.0047346,-0.023393,0.079274,0.031667,-0.0029112,-0.0044163,0.010843,0.027586,-0.053617,-0.063808,-0.012448,0.016483,0.015438,-0.19298,0.023328,-0.011743,0.013026,-0.019489,-0.018428,0.027045,0.03968,0.06388,-0.036822,0.052139,-0.015636,-0.0085293,-0.10904,0.024257,-0.016292,0.0060693,-0.02328,-0.018426,0.01091,0.0025726,0.025677,-0.012118,0.012346,-0.01303,-0.084382,0.0087822,0.0039358,-0.0080182,0.0056787,0.015262,-0.018135,-0.14266,0.011279,0.0065109,0.0084604,-0.019792,0.022867,-0.05304,0.10129,0.00014117,-0.0040732,0.059048,-0.050459,0.046374,-0.10907,0.06405,-0.034948,-0.013196,-0.012158,0.0065849,-0.025452,0.031071,-0.033801,-0.018032,0.0011271,0.017125,0.0012363,-0.0068077,-0.046786,0.0073168,0.01976,0.027016,0.040201,-0.11856,-0.13601,0.05483,-0.045248,0.17863,-0.015533,-0.01658,0.038305,0.0094675,-0.052131,-0.0093663,-0.020184,0.00076267,0.20974,0.022279,-0.00321,0.01827,-0.12497,-0.030199,-0.016503,0.034719,-0.026256,-0.039047,0.015311,0.03435,-0.02153,0.042827,-0.12067,0.0043686,-0.19771,0.011058,-0.019172,0.0011864,0.016623,-0.019668,-0.023337,-0.019225,-0.036686,-0.026238,0.012753,-0.019663,0.13206,-0.014287,0.00083491,0.086853,0.018195,0.024933,0.043932,-0.0057613,0.094502,-0.01837,-0.0060363,-0.021968,0.046032,-0.017458,-0.029452,-0.0011172,0.019647,-0.015428,5.1545e-05,0.053906,-0.0096212,0.046192,0.041248,0.010295,0.0078684,-0.039386,0.079796,-0.0061669,-0.025624,-0.098117,0.0018898,-0.048922,-0.02669,0.017588,-0.021412,-0.0057654,0.044725,-0.0079276,0.059897,-0.027831,0.041625,-0.0012234,0.011036,-0.010971,-0.0037627,-0.029048,-0.016983,-0.012343,-0.064216,-0.0050283,0.00041457,-0.0012385,0.047088,-0.0039882,-0.003756,0.046761,0.10689,0.014293,0.065917,0.038852,0.0041943,-0.015522,-0.03897,-0.051893,0.00096793,-0.015917,-0.0041126,0.046395,0.033611,0.00070786,0.020645,0.028258,-0.055644,-0.042866,-0.02914,0.00012571,\r\n",
      "0.014856,-0.16472,0.14477,0.01312,0.011416,-0.051152,0.1905,-0.044082,0.015225,-0.017878,-0.0009182,-0.03484,-0.005457,0.02638,-0.012146,0.023138,0.012153,-0.012786,-0.039445,-0.055701,-0.071817,-0.23197,-0.027741,-0.014853,0.10496,-0.052002,-0.012915,-0.019114,0.0096481,-0.0085882,-0.0093885,-0.034825,0.013387,0.0086543,0.0096821,0.083728,0.0032625,-0.022704,-0.071112,-0.017934,-0.073718,-0.10906,-0.022095,0.010789,-0.043025,0.099376,-0.10181,0.0023904,-0.056794,-0.014021,0.026166,-0.066484,-0.052602,0.038801,-0.062283,0.011554,-0.023412,0.054746,-0.27082,-0.035834,-0.017256,0.011004,-0.047441,-0.013894,-0.024851,-0.060609,-0.022017,-0.12044,-0.011286,-0.0031677,0.034277,-0.038414,0.0074753,0.019095,-0.0019167,-0.032125,-0.08385,-0.029075,-0.011854,0.016212,0.0090164,0.012366,-0.22844,0.050827,0.0040314,-0.048768,0.013271,-0.0528,-0.030424,0.0059057,0.076145,0.052591,-0.033057,0.10289,-0.0086023,0.24059,-0.028616,0.011739,0.089233,0.075181,-0.0055937,0.023395,0.00047905,0.023659,-0.095157,-0.05986,-0.020732,0.0054226,0.05505,0.077649,-0.072338,0.03234,0.03716,0.00065823,-0.017786,-0.015957,-0.078475,-0.0097733,-0.0089752,-0.18267,-0.021883,-0.034021,0.0019659,-0.010254,0.004125,-0.057666,0.02498,0.052998,0.034874,0.11532,0.006838,0.0049258,0.014761,0.018261,-0.013786,0.011805,-0.055636,0.055824,0.046745,0.018812,-0.0077999,-0.013492,0.022532,-0.037579,-0.11221,0.0086763,0.036066,-0.055927,0.035039,-0.0059549,0.00070657,-0.075358,0.018039,-0.010428,0.0083697,-0.033033,0.03326,-0.018052,-0.017284,0.014841,-0.019795,0.065929,-0.031347,0.012888,-0.04271,-0.022646,0.059117,0.02306,0.011866,-0.11837,0.014654,-0.0078041,0.033414,0.064655,-0.036134,0.0066518,0.025856,-0.036812,-0.026977,0.044082,0.024601,0.040979,0.053196,-0.094413,-0.06835,0.05964,-0.034906,-0.030139,0.009554,0.030806,0.029846,-0.044364,-0.062689,0.008109,-0.0405,0.032146,0.19033,-0.016082,0.01034,0.077947,-0.14535,-0.027981,-0.018246,-0.0055242,0.033457,-0.05557,-0.036619,0.0083697,-0.028232,0.018259,-0.098566,-0.025286,-0.066918,0.006835,-0.032906,-0.038873,0.011686,0.028748,-0.079506,-0.032286,0.074333,-0.0029596,0.0063222,-0.016637,0.049982,0.022617,-0.031158,0.050379,-0.021979,0.027145,-0.011362,0.015738,0.034917,-0.16787,0.014621,-0.024281,0.074223,0.02545,-0.0045745,0.023417,-0.032864,0.012837,-0.031768,0.065785,-0.071646,0.061465,0.062846,-0.0043174,0.0256,-0.079894,0.10847,-0.07739,0.047306,-0.0093746,0.0084926,0.028778,0.017209,-0.035017,-0.023204,-0.022503,0.014878,0.15672,-0.027327,-0.0062036,-0.0061271,-0.034054,-0.021754,-0.0046166,-0.002719,0.084681,-0.0026006,0.016574,0.012347,-0.038504,0.02491,0.020261,0.10667,-0.015789,-0.013809,-0.071296,0.080959,-0.034661,0.050331,-0.014167,0.007117,-0.038695,0.034152,-0.017181,-0.013737,-0.012254,0.037761,0.021115,0.019899,0.032761,0.01148,-0.0056755,0.055893,0.05676,-0.080176,-0.012144,\r\n",
      "0.0078675,-0.01046,0.044125,-0.011423,-0.057885,-0.029846,0.16228,0.028473,-0.0030843,0.012258,-0.014839,0.078401,-0.0074587,-0.0011654,-0.017685,0.032576,-0.035189,0.0011245,0.012134,-0.0027249,0.047777,0.014928,-0.022427,0.06273,0.076769,-0.036659,-0.092461,0.082639,-0.058097,-0.01741,0.021054,0.0027404,0.0095829,-0.048548,-0.041878,-0.10357,0.020952,-0.062801,0.057903,-0.14026,-0.031283,-0.15585,0.001642,0.048984,-0.0039844,0.1206,0.0028837,0.047837,-0.0047775,0.033351,-0.1159,-0.04259,0.080721,-0.081647,-0.029027,0.038664,0.064278,-0.0082157,-0.25166,-0.058388,0.022564,0.022505,-0.074634,-0.015305,0.021445,-0.034611,0.010016,-0.06912,0.0095855,-0.072471,0.0307,-0.036321,-0.0046932,0.039441,-0.038409,0.0085663,-0.055098,0.010368,-0.01212,0.026489,0.05787,0.017192,-0.027547,-0.016161,0.067332,-0.019175,-0.060591,-0.051222,-0.04386,0.022867,-0.017401,-0.042248,-0.037506,-0.03386,-0.012252,0.25709,0.037088,0.016082,0.10152,0.1119,-0.011902,-0.067751,-0.016673,-0.013641,-0.11561,-0.015533,-0.041803,-0.12685,-0.042378,-0.039965,-0.044185,0.0043174,-0.059496,0.016495,-0.010275,-0.091613,-0.1036,0.036651,-0.053847,-0.10948,0.010409,-0.013387,-0.009361,0.0086904,0.046256,0.012409,0.011505,0.10055,-0.0017453,0.043366,-0.033296,-0.028739,-0.091074,0.025223,0.0601,0.028029,0.014437,0.028855,0.032497,-0.077841,0.0028229,0.0031191,0.012705,-0.022011,0.006936,-0.020278,-0.023154,0.01401,0.045751,0.050169,0.0020358,0.015258,-0.022612,-0.0019749,0.041518,-0.015073,-0.0039002,0.074414,0.080756,0.035053,-0.063557,0.040602,-0.058008,0.051202,-0.083053,0.043758,-0.024266,-0.013993,0.053783,-0.0085382,-0.031746,-0.057571,-0.039869,0.049246,-0.010284,0.0015377,0.052228,-0.036156,-0.084232,0.047753,-0.043639,-0.10741,-0.036769,-0.069187,-0.099962,0.029962,-0.0088997,-0.0029719,-0.038635,0.0028912,-0.0017286,-0.08164,-0.039789,0.028787,0.042213,0.034818,0.15328,-0.029149,0.016323,0.024746,-0.22015,-0.051706,-0.021755,-0.0046199,0.021826,0.0019694,-0.019642,0.025338,0.0040037,0.0034012,-0.08883,0.1065,0.081148,0.018593,-0.012849,-0.053631,-0.093025,0.0081633,-0.043187,-0.012928,0.011443,0.061574,-0.02046,-0.035307,0.11988,-0.03544,0.092248,0.063819,-0.047083,-0.014365,-0.090383,-0.030106,-0.0098374,-0.052088,-0.041245,-0.12085,-0.0063379,0.072749,-0.034163,0.005663,-0.010886,-0.0075657,0.013552,-0.034384,-0.03349,0.023369,-0.029476,0.017512,0.032348,-0.11576,-0.018774,-0.033768,0.025777,0.045533,0.087057,0.057292,0.077358,0.0014552,0.029662,0.067453,-0.080527,0.10461,-0.06401,-0.030149,0.06063,0.016375,-0.0091807,0.057551,0.084178,-0.044329,-0.037349,-0.032106,-0.0057698,0.032647,-0.022804,0.092903,-0.0047458,0.052496,-0.0070866,0.0094274,-0.038416,0.051519,0.055958,0.015232,-0.02147,-0.020385,0.05953,0.040927,0.061123,-0.061956,0.030372,0.0057053,-0.07047,0.028578,0.048747,0.096779,0.14669,-0.017468,-0.079691,-0.052455,\r\n",
      "0.01621,-0.096392,0.038664,-0.021364,-0.053339,0.00071185,0.1823,0.054143,0.20609,-0.020268,-0.038682,0.041004,-0.0059724,0.032058,-0.0089208,0.059254,-0.0067645,0.00094685,-0.097619,-0.086349,-0.21404,-0.057197,-0.0035638,-0.018927,0.050906,-0.03961,-0.0051849,0.0038358,0.0020366,0.012925,0.0088793,0.0002393,0.014217,-0.010507,0.0033921,0.1075,0.0018875,0.030196,-0.011485,-0.016772,-0.042127,-0.076708,-0.03541,-0.013026,-0.058457,0.11334,-0.092298,0.036744,-0.13578,0.10047,0.012456,0.039127,0.0055722,0.045708,0.014404,-0.0056963,0.17288,-0.045699,-0.07386,-0.01406,-0.001509,0.1089,-0.08269,0.0059852,-0.015585,0.022473,0.013354,-0.23425,0.062399,0.078783,-0.013167,-0.04471,-0.023118,0.061884,0.031642,-0.020245,0.015561,0.015925,0.07617,0.0093355,0.0073963,-0.025384,-0.11238,-0.031499,0.061873,0.0056681,-0.00088721,-0.0019877,-0.035489,-0.041171,-0.11808,-0.0061461,-0.05868,0.071403,0.00038652,0.26139,0.021035,-0.012634,-0.035308,-0.0014309,-0.028871,-0.015846,0.019692,0.058766,-0.12241,0.023219,0.017821,0.015458,0.018737,0.034364,-0.019593,0.0020085,0.019059,-0.021822,-0.042804,0.020069,-0.00084373,0.070203,-0.040688,-0.1491,-0.065133,0.018804,-0.027773,-0.028995,-0.0086957,0.041739,0.025977,0.0001204,-0.045212,-0.16336,0.011915,0.036513,-0.017538,0.045631,-0.013924,0.027864,-0.029539,-0.041486,-0.010403,0.00354,0.028218,0.00087364,-0.10356,0.011833,0.046123,-0.02668,0.0306,0.0026888,0.05933,0.030975,-0.022278,-0.082614,-0.029556,0.086853,0.032354,0.019654,0.12949,-0.048823,0.11286,-0.02927,-0.020852,0.050076,0.0045349,0.037928,-0.026953,0.014626,-0.041367,0.03887,0.011935,-0.049949,-0.021833,0.051893,0.027254,-0.0070447,0.023581,0.044053,0.032082,-0.0035958,0.023251,0.020537,-0.012631,-0.029885,0.014146,-0.058346,-0.10313,0.059862,0.014988,0.06868,-0.067815,0.01534,0.0010942,0.029745,0.0017205,-0.059265,0.025946,-0.030853,-0.036799,0.02255,-0.032688,0.025809,-0.039466,0.027635,0.033531,0.025451,0.0083235,-0.030795,0.003353,0.030145,0.077066,-0.069623,-0.066275,0.053738,0.16282,0.027133,-0.054055,-0.0079194,0.024706,0.006244,-0.076328,0.042247,0.026155,0.02078,-0.027346,-0.057352,0.14036,0.0067949,0.041163,0.025202,0.019485,-0.047022,-0.012548,-0.11234,0.052855,0.035217,0.0035374,-0.0063724,0.076619,0.00082569,0.022415,-0.0092232,-0.014497,0.017929,-0.0091862,-0.09679,0.0023314,0.076067,0.0013615,-0.034148,0.024933,0.048724,0.036906,-0.0069026,0.0062321,0.033946,-0.0019873,-0.033754,-0.011912,-0.015952,0.036257,0.047934,-0.11653,0.080749,-0.096765,-0.0033046,0.060948,-0.035766,0.046382,0.049103,-0.023732,-0.052432,-0.0011748,-0.036978,0.020369,0.030317,-0.014529,-0.018202,0.064093,0.024505,0.0076077,-0.02591,-0.028491,0.018494,0.061274,-0.11683,0.011692,-0.071519,-0.053048,0.048229,-0.014311,-0.0016328,0.034218,0.065899,-0.033777,-0.012537,-0.045009,0.11126,0.10114,-0.025652,0.11224,0.022477,\r\n",
      "-0.0069416,-0.10033,0.050066,0.0090711,-0.029019,-0.038753,0.12917,-0.010285,0.088065,0.040843,-0.043374,-0.010168,-0.021562,-0.021408,-0.019132,0.050651,-0.0091856,-0.035656,-0.057585,0.042976,-0.020572,0.035985,0.012479,0.00107,0.094642,0.052339,-0.021441,0.010897,0.023586,0.019719,-0.047052,-0.038331,0.028565,-0.027917,-0.030597,0.0041616,0.0015821,-0.061249,-0.003416,-0.090467,-0.093659,-0.053052,-0.037697,0.028578,0.0058231,0.092079,-0.0072636,-0.012281,-0.077891,0.015803,-0.011137,0.008656,0.022143,0.021334,-0.087853,-0.01996,0.04444,-0.041321,-0.11613,0.03122,0.0040653,0.039088,0.037897,-0.0057879,-0.063658,0.022633,-0.033632,-0.11443,0.085456,0.048199,0.051388,0.026205,0.043252,0.017431,0.023799,-0.054652,-0.0782,-0.060001,0.043604,0.087183,0.096862,3.7122e-07,-0.15525,-0.033275,0.0023574,0.020567,-0.041987,-0.018348,-0.032269,-0.010124,-0.15743,0.04094,-0.11733,-0.13826,0.023979,0.27454,0.045396,-0.028451,-0.032255,0.10755,-0.040254,-0.03684,-0.025914,0.0158,-0.060079,-0.081346,0.050847,0.073405,0.02245,0.070614,-0.010889,0.017187,-0.040583,-0.03165,-0.068437,-0.030769,-0.015741,-0.01072,0.037184,-0.16411,0.01368,-0.020681,0.022532,-0.023088,-0.04361,0.013394,0.070447,0.041361,0.083831,0.12685,-0.017155,0.096065,-0.034396,-0.087371,-0.005627,-0.0054975,-0.037337,0.044579,0.0071024,-0.030805,0.019992,-0.055376,-0.045013,-0.018209,-7.8516e-05,-0.010068,-0.032106,-0.0064607,0.026271,0.021745,0.067686,-0.072701,-0.034845,-0.0025729,-0.033799,-0.0057436,-0.001063,-0.027154,0.136,-0.038607,0.029172,0.0001817,-0.052281,-0.042305,-0.11177,-0.0063057,0.0063035,-0.058216,-0.020594,-0.072034,-0.008341,0.0035661,-0.073719,-0.0086186,-0.014046,0.040989,-0.023297,-0.031215,-0.0052053,-0.046685,0.048456,0.010915,-0.0075029,-0.12511,-0.10418,0.042302,-0.028594,0.14082,0.026137,0.031015,0.056673,-0.008642,-0.15687,-0.042399,0.064929,-0.026509,0.11438,0.036391,-0.045559,0.076139,-0.098433,-0.063919,-0.011011,-0.027302,-0.030343,-0.065244,-0.015761,0.039794,0.020078,-0.02253,-0.11681,0.095019,0.13763,0.019353,0.0053616,-0.037792,0.036908,-0.0061721,-0.15349,0.0048232,-0.037504,0.013942,-0.013207,-0.025377,0.16639,-0.11201,-0.022122,0.083911,-0.03386,0.020933,0.022197,-0.039227,0.064725,0.040394,-0.00088252,-0.018384,0.072309,0.035378,0.010577,-0.043681,0.043824,-0.0094693,0.045018,-0.053358,0.03775,0.045769,0.027943,0.11579,-0.035978,-0.030214,-0.0067402,-0.077602,-0.0056777,-0.035945,-0.0096579,-0.026084,0.020612,-0.04238,0.012834,0.013939,-0.011275,0.036821,-0.11646,-0.049182,0.0038214,-0.038056,0.0032219,0.0055644,-0.0089527,-0.000348,-0.079237,-0.036822,-0.068341,0.017137,0.021146,-0.0054151,-0.024231,0.04652,-0.0074985,-0.016048,0.061176,0.024562,0.032713,0.037189,-0.063862,-0.012507,0.1231,-0.042324,0.017507,0.017156,-0.0034932,0.027354,0.12599,-0.049728,0.081953,0.077353,0.0051543,-0.06542,-0.017496,0.019157,\r\n",
      "0.012935,-0.029802,0.053732,-0.0079671,0.029372,-0.018989,0.17611,0.00055311,-0.011629,-0.12715,0.014453,-0.0067484,-0.011051,0.0026805,0.010862,0.022093,0.013695,0.047587,0.017159,0.09482,-0.020535,-0.052476,-0.043273,0.00060094,0.021053,-0.0049234,-0.14911,-0.0038349,0.0033859,0.003316,0.053149,-0.0496,-0.015506,-0.0094378,-0.052637,0.022344,0.022131,-0.023076,-0.0025773,0.042413,0.072279,-0.12974,0.0084006,-0.0049413,-0.017208,0.077881,-0.054472,-0.0018564,-0.080055,0.020686,0.0093598,0.0031392,0.030446,0.023892,-0.089124,0.0032223,0.062419,0.0084396,0.029086,0.0051555,0.02255,-0.0086705,-0.087765,-0.011835,-0.043699,0.014706,0.010971,-0.18305,-0.011449,0.053865,0.024335,-0.022249,0.0030724,0.012404,-0.010898,0.01933,-0.025452,-0.03287,0.043701,0.0039513,0.02133,-0.019457,-0.082822,0.0034238,-0.0062355,-0.0089878,-0.020179,0.009816,0.074422,-0.0048128,0.04637,0.0091704,0.045933,0.12877,-0.0016291,0.29725,-0.0085487,0.027813,0.0065327,-0.04495,0.026569,-0.02443,0.0076471,-0.0061734,0.096504,0.015546,0.0086259,-0.0079273,0.16568,0.031508,-0.039281,0.0078038,-0.012056,-0.077523,-0.017711,-0.013356,-0.12199,-0.0093058,-0.057924,-0.33659,0.078701,0.0207,0.010313,-0.0046489,-0.011587,0.04272,0.037809,0.037312,-0.037432,-0.027191,-0.024243,0.018508,-0.036979,0.0039335,-0.010145,0.0077049,-0.013019,0.023158,-0.089363,0.1388,0.015793,0.010581,0.10309,-0.064886,-0.071897,0.0046646,-0.0047913,-0.010575,-0.0079484,-0.0062879,0.014245,-0.08675,-0.061169,-0.012688,0.036043,0.0085364,-0.22878,-0.13098,-0.035562,-0.011523,0.011784,0.019443,-0.038632,0.0065687,-0.038077,0.011142,-0.00027997,0.027127,-0.018683,-0.028958,0.025203,0.019856,0.012983,0.03425,0.017582,0.0025451,0.10491,0.0035167,-0.067616,-0.038274,-0.021792,0.020776,0.016347,-0.1575,-0.15421,-0.037109,-0.047357,0.042703,0.014542,0.0012115,0.019867,-0.019588,-0.027058,-0.0036544,-0.01703,-0.04309,0.11759,-0.023706,-0.0056932,0.013687,-0.061087,-0.017257,-0.011617,-0.0045364,0.027938,0.113,0.0042566,0.017431,-0.0028971,0.066935,-0.15673,-9.9245e-05,-0.051663,0.021515,0.039242,-0.012781,0.046762,0.0092358,-0.072784,0.017165,0.019304,-0.032962,-0.025706,0.0078877,0.1807,-0.031853,0.0048989,0.10994,-0.0050996,0.0087889,0.0010933,0.010064,0.00066639,0.091459,-0.0096076,0.025172,-0.032807,-0.003287,0.017408,0.0080801,-0.033912,-0.008949,-0.00043016,0.0048398,0.0080371,0.032392,0.0034107,0.043774,-0.0035453,-0.121,0.1292,-0.025011,0.002468,0.053392,-0.071649,-0.076667,0.0043516,0.024311,0.00025912,0.0085561,0.015985,-0.050608,0.043779,0.010252,0.028949,0.0026659,-0.013106,0.02434,-0.058294,-0.0024465,0.0040797,0.023711,-0.046746,0.00051855,0.006038,-0.020563,-0.073484,-0.027517,-0.036277,0.021282,-0.087218,-0.0052728,0.00049872,0.013704,-0.0020986,-0.0026724,0.0044204,0.05742,-0.012384,-0.016933,-0.023912,-0.0010798,-0.10208,0.022338,-0.010795,0.1213,-0.049068,-0.044977,-0.063863,0.0066597,\r\n",
      "-0.0077061,-0.032595,0.127,0.042621,-0.090099,-0.066069,0.16168,-0.012458,-0.035176,0.070223,-0.0053961,0.052687,0.044588,-0.046596,-0.012012,-0.034985,-0.0097014,-0.019047,0.045454,0.11656,0.0034406,0.0021038,0.03158,-0.01787,0.10865,-0.019759,-0.099669,0.036164,0.0074624,0.0088781,-0.011083,0.062294,-0.050837,-0.013119,0.050073,-0.06504,0.047303,0.0061348,0.013647,-0.010662,0.062032,-0.16971,-0.033305,-0.0076523,-0.03317,0.10467,0.021368,0.051698,0.027512,-0.021371,0.034987,-0.0039782,-0.015836,0.023821,-0.08337,-0.023241,0.091179,-0.018455,-0.24828,-0.087653,-0.0033046,-0.050492,0.10462,-0.01672,-0.070267,-0.051049,0.0030119,0.019689,-0.010179,-0.062044,0.01725,-0.046017,-0.0039057,-0.015846,-0.021987,0.0030447,0.03795,0.0055577,0.025916,0.0094309,-0.074912,0.0016879,0.029035,0.023947,-0.0087314,-0.0037966,-0.022329,-0.039711,0.065373,-0.017201,0.035234,0.042078,-0.05925,-0.074307,0.0050722,0.3494,-0.01424,-0.020785,0.05743,0.048935,0.045314,0.028177,0.08568,0.083647,-0.060446,-0.059387,0.033956,0.02052,0.04274,0.013083,0.0071644,0.015146,-0.031568,0.017302,-0.036985,-0.03139,-0.043802,0.022793,-0.03251,-0.28108,-0.00050998,0.038769,0.040966,0.013682,-0.030665,-0.0055014,0.048408,0.038278,-0.14761,-0.0063767,-0.0042199,-0.0063468,-0.041189,-0.053532,0.0078304,-0.011718,0.05291,0.00064743,0.045442,0.040308,-0.022267,0.058219,0.002285,0.056895,0.039753,0.0012506,-0.048172,-0.028569,0.041864,0.038946,0.0083725,0.009872,-0.0015923,0.013224,0.020217,-0.053538,-0.046623,0.0070929,0.096178,0.0042008,0.052261,0.10026,-0.049013,0.051372,0.0052287,0.096136,-0.0024262,0.026016,0.021628,0.031758,-0.042977,0.05684,-0.047924,0.0024624,-0.052874,0.041851,0.039257,-0.0040402,-0.047098,-0.017909,-0.01004,-0.04365,0.081771,-0.038813,-0.13105,0.024258,0.081286,0.0085425,0.021222,0.064453,-0.037749,-0.053351,-0.036143,-0.060055,0.0055911,0.050459,0.11178,0.039023,0.038117,0.065096,-0.23878,0.0098546,-0.032573,0.070949,-0.0011435,-0.028811,0.041533,-0.003008,-0.068871,0.0046713,-0.13556,0.044517,-0.021307,-0.023433,-0.03408,0.045585,0.025905,-0.022128,-0.080317,0.027351,-0.019086,-0.014736,0.0061304,-0.01842,0.12699,0.04315,-0.015929,0.10064,0.008828,-0.0062155,-0.02167,-0.063302,-0.00072096,0.077771,-0.017944,0.0050815,0.0062962,0.017889,0.0087251,0.0037128,0.053888,-0.047841,0.025912,0.049643,0.062337,0.0088278,0.081091,0.024442,0.026325,-0.053685,0.040853,-0.038609,0.090605,0.014935,-0.0040784,-0.034825,0.014125,0.010461,-0.024713,0.0041832,0.033087,0.0055383,-0.061073,-0.024405,0.077099,0.016247,-0.033009,0.063638,-0.020329,-0.016476,0.0036171,0.00089975,-0.075807,0.029869,0.046919,-0.0062263,-0.019773,-0.00020871,-0.0089094,-0.023104,0.060527,0.0014889,0.027279,-0.043541,0.021455,0.035375,-0.072385,-0.063076,-0.015745,-0.027854,-0.00057729,-0.03992,-0.075772,0.034931,0.059349,0.06437,0.032521,-0.0042395,0.038926,0.0099016,\r\n",
      "-0.015309,-0.0036045,0.10614,-0.0088543,0.0035238,-0.038517,0.11901,-0.051298,-0.058716,-0.051515,0.018712,-0.10372,-0.07306,-0.10457,0.065693,-0.0097314,0.0051508,0.034903,0.063027,0.10258,0.065383,-0.02632,0.0047051,0.078639,-0.0048662,0.011836,-0.072119,0.010351,0.033579,0.040656,-0.017022,0.011088,-0.011593,0.027005,0.11199,-0.00046338,0.072191,0.021667,0.029956,0.059923,0.014895,-0.15065,-0.013216,-0.048375,-0.00098157,0.078378,-0.030818,-0.062242,0.059558,0.018587,-0.049878,-0.0055032,0.10434,-0.023511,-0.057878,-0.088003,-0.045552,-0.079234,-0.17722,-0.10832,0.055172,-0.074056,-0.0012306,0.066304,0.028476,-0.031312,-0.13903,0.0019818,-0.025104,0.00050179,-0.034545,0.022984,-0.026911,-0.02274,0.068743,-0.0024441,0.011668,0.04917,0.0096654,-0.017468,-0.036371,-0.061939,0.027868,-0.090787,0.044326,-0.033376,-0.10474,0.00047257,0.010538,0.067889,-0.011441,0.11079,-0.02226,0.011902,0.12361,0.24352,-0.0031832,-0.011057,0.087091,0.080381,-0.013667,0.067209,-0.055375,0.0040422,-0.036238,0.020994,0.068328,0.023893,0.057964,0.02182,-0.068041,-0.069393,0.0050024,0.048367,-0.071774,-0.034456,-0.048219,0.042433,0.015517,-0.16997,-0.028237,-0.051414,-0.018593,-0.026078,0.013196,0.018092,-0.015957,0.048147,0.13559,-0.028438,-0.073317,0.010409,-0.020462,-0.001729,0.024576,-0.047816,0.016005,0.09623,0.037139,-0.00021276,0.0030525,-0.0016606,0.11743,-0.04972,-0.068252,-0.031829,-0.054235,-0.071584,-0.03299,-0.052553,-0.030446,-0.059964,-0.030826,-0.011153,-0.037737,0.038538,-0.015739,-0.01707,0.016067,0.024649,0.017107,-0.020806,-0.021622,0.0012406,0.01335,0.07738,-0.0079041,-0.065718,-0.022316,-0.031533,0.0070762,0.039719,-0.038827,-0.036618,0.06933,0.016706,0.045582,0.060407,-0.059379,0.092048,0.080336,-0.079891,-0.026813,-0.1069,-0.095732,-0.0014112,-0.05022,0.054571,0.038908,-0.043523,-0.023525,0.010711,-0.031015,-0.0098978,-0.04376,-0.036894,0.060422,-0.059504,0.053279,-0.12554,-0.12462,-0.0022775,0.028053,0.019748,0.057347,0.04123,-0.066751,-0.028952,-0.044754,-0.075141,-0.10888,0.04981,-0.025065,-0.041177,0.010861,-0.075306,-0.011882,0.093497,-0.098056,-0.039101,0.11042,-0.063646,-0.024144,0.011397,0.087971,-0.014806,0.008913,0.083439,-0.10205,0.018726,-0.042753,0.02438,-0.026823,-0.0043765,-0.051217,0.022028,0.033973,-0.076764,0.0031957,-0.067368,-0.012323,-0.027183,0.039808,0.052684,-0.071396,0.029619,0.098096,0.0038251,0.0057323,-0.018468,0.020834,-0.0064851,0.055748,-0.042932,0.017218,-0.069638,0.06629,-0.074576,0.062763,-0.0011004,-0.017701,0.039956,-0.051718,0.011188,-0.019025,0.03417,0.0095242,0.0044851,-0.0024461,-0.070692,-0.05006,-0.0097882,-0.04833,0.0055163,0.14447,0.034457,0.038899,0.0039125,0.03413,0.044831,0.033644,-0.017781,0.091978,-0.048696,0.045362,0.030358,0.048943,-0.090933,-0.134,0.023802,0.064471,-0.10685,-0.089257,-0.027291,-0.029935,0.021948,-0.0086766,0.0089125,0.016463,0.067346,\r\n",
      "0.018911,-0.014773,0.088629,-0.0024652,-0.037861,-0.077909,0.25912,0.011378,0.023513,0.026677,0.016273,0.0078798,0.012146,0.02371,-0.0063843,0.017663,0.032719,0.041117,-0.088331,0.083541,-0.045916,-0.077853,0.014271,-0.0026525,0.066405,0.0035707,0.064154,-0.0015907,-0.010407,0.04236,0.0028196,-0.08038,0.022536,-0.0062232,-0.059246,0.015202,0.040354,0.0056395,0.021526,-0.029518,-0.089525,-0.04289,-0.039245,0.032765,0.0074435,0.12067,-0.056479,0.035519,-0.037189,-0.0021013,0.040956,-0.0026522,0.075444,0.018153,-0.13775,0.016631,-0.1125,-0.023608,0.018432,0.0012815,0.043353,-0.071191,-0.025869,0.0039886,-0.0017092,-0.015954,0.014915,0.023448,0.015645,-0.0034528,-0.010426,-0.037909,0.00035118,-0.039014,0.08991,0.007174,-0.00058533,-0.010419,0.019919,0.026067,0.056641,-0.005011,-0.24455,-0.023772,0.021667,0.018145,0.013509,-0.019937,0.069691,0.024632,-0.095661,-0.035796,-0.12605,0.0034972,0.032942,0.34083,0.028337,0.0018981,-0.0071996,0.015702,-0.023618,0.013951,0.063363,-0.0044336,-0.080693,0.016745,0.059701,-0.030464,0.061916,-0.011295,-0.048193,-0.017095,-0.012101,-0.038412,-0.074968,0.017136,-0.033086,-0.011839,-0.0013488,-0.26057,-0.01964,-0.0012453,-0.016353,-0.036532,-0.0088991,-0.026318,0.044322,0.040326,-0.039385,-0.076656,-0.017029,-0.013685,0.020962,0.022597,-0.021116,-0.01744,-0.065179,-0.047208,-0.030967,0.016432,0.049533,-0.035062,-0.054606,0.066151,-0.058022,0.017134,-0.0035306,-0.037507,0.0029066,0.035277,0.0375,0.11024,0.0008705,0.024159,-0.00056244,0.00039357,-0.002042,-0.05233,0.014303,-0.041653,-0.00010457,0.035246,-0.0062308,-0.011406,-0.0069647,-0.036928,-0.017904,-0.026948,0.018449,-0.00054537,0.0093251,0.020283,-0.046168,0.012101,0.0088786,0.02971,-0.040419,0.039315,0.081631,0.037998,0.0047325,-0.00060415,0.0073591,-0.16129,-0.19006,-0.0018553,-0.0029709,-0.089124,0.027496,-0.019137,0.0039264,-0.04033,-0.038168,0.030126,0.00044941,0.032289,0.034386,0.002246,-0.016752,0.017584,-0.1556,-0.011063,0.012077,0.031344,0.012757,-0.016028,0.030701,0.0067695,-0.0055937,0.00084644,-0.11866,0.0050009,0.11462,0.031179,-0.014859,0.02108,0.019329,-0.012334,-0.052517,-0.00078252,0.017177,-0.05401,-0.05011,0.016307,0.097739,-0.066423,0.025709,0.026711,0.053324,0.020323,0.20898,-0.0045741,-0.038962,0.049454,0.010268,0.0094279,-0.023035,-0.0090088,0.044713,-0.03559,0.049371,-0.026092,-0.013022,-0.05997,0.051989,0.035559,0.027795,-0.0075594,-0.018299,0.0060616,0.23129,0.0054597,-0.0066677,-0.0064297,-0.012908,-0.061475,0.0076218,0.04161,-0.018998,-0.0086236,0.033622,-0.01326,-0.0087905,0.060186,0.041552,-0.043087,0.013834,0.0017904,-0.023879,-0.025662,-0.0059512,-0.014314,-0.042143,-0.016468,0.023344,-0.007874,-0.12791,-0.09381,-0.00093772,-0.0298,0.032853,0.052771,0.0366,-0.028306,0.0068085,0.006754,0.047507,-0.16994,-0.019715,0.0092281,-0.018769,0.021491,-0.009647,0.0026713,-0.0051643,0.10491,-0.038408,-0.0050942,0.01476,0.0076273,\r\n"
     ]
    }
   ],
   "source": [
    "!head Embeddings.csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Just what we wanted! Now we have a matrix with every word in the document with its corresponding Embedding. We can now import this file into Python, and use it to train our model.\n",
    "\n",
    "# Train a Neural Network with an Embedding Layer\n",
    "\n",
    "The next step is to actually train a neural network with an Embedding Layer. For this, Keras has the aptly named \"Embedding\" layer, which will take care of our structures. The following code creates a very simple network that does the following:\n",
    "\n",
    "1. Read the embeddings.\n",
    "2. Calculate the One-Hot inputs (by using an \"index\") which will index which words are in which text.\n",
    "3. Create a layer that associates the indexes with the embeddings.\n",
    "4. Create the rest of the architecture.\n",
    "5. Train the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>D1</th>\n",
       "      <th>D2</th>\n",
       "      <th>D3</th>\n",
       "      <th>D4</th>\n",
       "      <th>D5</th>\n",
       "      <th>D6</th>\n",
       "      <th>D7</th>\n",
       "      <th>D8</th>\n",
       "      <th>D9</th>\n",
       "      <th>D10</th>\n",
       "      <th>...</th>\n",
       "      <th>D291</th>\n",
       "      <th>D292</th>\n",
       "      <th>D293</th>\n",
       "      <th>D294</th>\n",
       "      <th>D295</th>\n",
       "      <th>D296</th>\n",
       "      <th>D297</th>\n",
       "      <th>D298</th>\n",
       "      <th>D299</th>\n",
       "      <th>D300</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>71070.000000</td>\n",
       "      <td>71070.000000</td>\n",
       "      <td>71070.000000</td>\n",
       "      <td>71070.000000</td>\n",
       "      <td>71070.000000</td>\n",
       "      <td>71070.000000</td>\n",
       "      <td>71070.000000</td>\n",
       "      <td>71070.000000</td>\n",
       "      <td>71070.000000</td>\n",
       "      <td>71070.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>71070.000000</td>\n",
       "      <td>71070.000000</td>\n",
       "      <td>71070.000000</td>\n",
       "      <td>71070.000000</td>\n",
       "      <td>71070.000000</td>\n",
       "      <td>71070.000000</td>\n",
       "      <td>71070.000000</td>\n",
       "      <td>71070.000000</td>\n",
       "      <td>71070.000000</td>\n",
       "      <td>71070.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>-0.020765</td>\n",
       "      <td>-0.021509</td>\n",
       "      <td>0.064025</td>\n",
       "      <td>0.008357</td>\n",
       "      <td>-0.006714</td>\n",
       "      <td>-0.076450</td>\n",
       "      <td>0.073332</td>\n",
       "      <td>0.001765</td>\n",
       "      <td>0.023798</td>\n",
       "      <td>-0.055219</td>\n",
       "      <td>...</td>\n",
       "      <td>0.025253</td>\n",
       "      <td>0.015675</td>\n",
       "      <td>-0.070396</td>\n",
       "      <td>-0.021143</td>\n",
       "      <td>0.022696</td>\n",
       "      <td>0.048191</td>\n",
       "      <td>0.060189</td>\n",
       "      <td>0.002826</td>\n",
       "      <td>-0.024859</td>\n",
       "      <td>0.000900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.037031</td>\n",
       "      <td>0.072060</td>\n",
       "      <td>0.062862</td>\n",
       "      <td>0.047558</td>\n",
       "      <td>0.046676</td>\n",
       "      <td>0.059601</td>\n",
       "      <td>0.066815</td>\n",
       "      <td>0.040618</td>\n",
       "      <td>0.056161</td>\n",
       "      <td>0.073658</td>\n",
       "      <td>...</td>\n",
       "      <td>0.049046</td>\n",
       "      <td>0.043448</td>\n",
       "      <td>0.071374</td>\n",
       "      <td>0.044523</td>\n",
       "      <td>0.044374</td>\n",
       "      <td>0.071540</td>\n",
       "      <td>0.062852</td>\n",
       "      <td>0.041710</td>\n",
       "      <td>0.054193</td>\n",
       "      <td>0.042372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-0.246550</td>\n",
       "      <td>-0.454080</td>\n",
       "      <td>-0.244150</td>\n",
       "      <td>-0.222680</td>\n",
       "      <td>-0.220070</td>\n",
       "      <td>-0.341310</td>\n",
       "      <td>-0.202280</td>\n",
       "      <td>-0.212250</td>\n",
       "      <td>-0.259120</td>\n",
       "      <td>-0.416900</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.206530</td>\n",
       "      <td>-0.204440</td>\n",
       "      <td>-0.347360</td>\n",
       "      <td>-0.239820</td>\n",
       "      <td>-0.181500</td>\n",
       "      <td>-0.335450</td>\n",
       "      <td>-0.318320</td>\n",
       "      <td>-0.187240</td>\n",
       "      <td>-0.266720</td>\n",
       "      <td>-0.187090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-0.042155</td>\n",
       "      <td>-0.062586</td>\n",
       "      <td>0.022293</td>\n",
       "      <td>-0.021759</td>\n",
       "      <td>-0.037360</td>\n",
       "      <td>-0.111830</td>\n",
       "      <td>0.028951</td>\n",
       "      <td>-0.022649</td>\n",
       "      <td>-0.009873</td>\n",
       "      <td>-0.103940</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.006148</td>\n",
       "      <td>-0.010834</td>\n",
       "      <td>-0.119180</td>\n",
       "      <td>-0.050061</td>\n",
       "      <td>-0.004862</td>\n",
       "      <td>0.000440</td>\n",
       "      <td>0.021516</td>\n",
       "      <td>-0.023480</td>\n",
       "      <td>-0.062090</td>\n",
       "      <td>-0.026065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>-0.018242</td>\n",
       "      <td>-0.014133</td>\n",
       "      <td>0.063571</td>\n",
       "      <td>0.010621</td>\n",
       "      <td>-0.006979</td>\n",
       "      <td>-0.068640</td>\n",
       "      <td>0.068463</td>\n",
       "      <td>0.000327</td>\n",
       "      <td>0.023335</td>\n",
       "      <td>-0.054774</td>\n",
       "      <td>...</td>\n",
       "      <td>0.026466</td>\n",
       "      <td>0.017718</td>\n",
       "      <td>-0.074953</td>\n",
       "      <td>-0.022099</td>\n",
       "      <td>0.024187</td>\n",
       "      <td>0.044271</td>\n",
       "      <td>0.056564</td>\n",
       "      <td>-0.000448</td>\n",
       "      <td>-0.026327</td>\n",
       "      <td>-0.002639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.002567</td>\n",
       "      <td>0.025079</td>\n",
       "      <td>0.105627</td>\n",
       "      <td>0.040438</td>\n",
       "      <td>0.023749</td>\n",
       "      <td>-0.036121</td>\n",
       "      <td>0.113450</td>\n",
       "      <td>0.024932</td>\n",
       "      <td>0.057896</td>\n",
       "      <td>-0.006330</td>\n",
       "      <td>...</td>\n",
       "      <td>0.057845</td>\n",
       "      <td>0.044139</td>\n",
       "      <td>-0.024730</td>\n",
       "      <td>0.006519</td>\n",
       "      <td>0.051752</td>\n",
       "      <td>0.092894</td>\n",
       "      <td>0.096816</td>\n",
       "      <td>0.026957</td>\n",
       "      <td>0.011495</td>\n",
       "      <td>0.025675</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>0.203890</td>\n",
       "      <td>0.339740</td>\n",
       "      <td>0.346000</td>\n",
       "      <td>0.227040</td>\n",
       "      <td>0.211800</td>\n",
       "      <td>0.216830</td>\n",
       "      <td>0.381950</td>\n",
       "      <td>0.213150</td>\n",
       "      <td>0.326950</td>\n",
       "      <td>0.312750</td>\n",
       "      <td>...</td>\n",
       "      <td>0.232840</td>\n",
       "      <td>0.237050</td>\n",
       "      <td>0.241170</td>\n",
       "      <td>0.204770</td>\n",
       "      <td>0.226270</td>\n",
       "      <td>0.410090</td>\n",
       "      <td>0.514970</td>\n",
       "      <td>0.229800</td>\n",
       "      <td>0.231850</td>\n",
       "      <td>0.229810</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 300 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 D1            D2            D3            D4            D5  \\\n",
       "count  71070.000000  71070.000000  71070.000000  71070.000000  71070.000000   \n",
       "mean  -0.020765     -0.021509      0.064025      0.008357     -0.006714       \n",
       "std    0.037031      0.072060      0.062862      0.047558      0.046676       \n",
       "min   -0.246550     -0.454080     -0.244150     -0.222680     -0.220070       \n",
       "25%   -0.042155     -0.062586      0.022293     -0.021759     -0.037360       \n",
       "50%   -0.018242     -0.014133      0.063571      0.010621     -0.006979       \n",
       "75%    0.002567      0.025079      0.105627      0.040438      0.023749       \n",
       "max    0.203890      0.339740      0.346000      0.227040      0.211800       \n",
       "\n",
       "                 D6            D7            D8            D9           D10  \\\n",
       "count  71070.000000  71070.000000  71070.000000  71070.000000  71070.000000   \n",
       "mean  -0.076450      0.073332      0.001765      0.023798     -0.055219       \n",
       "std    0.059601      0.066815      0.040618      0.056161      0.073658       \n",
       "min   -0.341310     -0.202280     -0.212250     -0.259120     -0.416900       \n",
       "25%   -0.111830      0.028951     -0.022649     -0.009873     -0.103940       \n",
       "50%   -0.068640      0.068463      0.000327      0.023335     -0.054774       \n",
       "75%   -0.036121      0.113450      0.024932      0.057896     -0.006330       \n",
       "max    0.216830      0.381950      0.213150      0.326950      0.312750       \n",
       "\n",
       "       ...          D291          D292          D293          D294  \\\n",
       "count  ...  71070.000000  71070.000000  71070.000000  71070.000000   \n",
       "mean   ...  0.025253      0.015675     -0.070396     -0.021143       \n",
       "std    ...  0.049046      0.043448      0.071374      0.044523       \n",
       "min    ... -0.206530     -0.204440     -0.347360     -0.239820       \n",
       "25%    ... -0.006148     -0.010834     -0.119180     -0.050061       \n",
       "50%    ...  0.026466      0.017718     -0.074953     -0.022099       \n",
       "75%    ...  0.057845      0.044139     -0.024730      0.006519       \n",
       "max    ...  0.232840      0.237050      0.241170      0.204770       \n",
       "\n",
       "               D295          D296          D297          D298          D299  \\\n",
       "count  71070.000000  71070.000000  71070.000000  71070.000000  71070.000000   \n",
       "mean   0.022696      0.048191      0.060189      0.002826     -0.024859       \n",
       "std    0.044374      0.071540      0.062852      0.041710      0.054193       \n",
       "min   -0.181500     -0.335450     -0.318320     -0.187240     -0.266720       \n",
       "25%   -0.004862      0.000440      0.021516     -0.023480     -0.062090       \n",
       "50%    0.024187      0.044271      0.056564     -0.000448     -0.026327       \n",
       "75%    0.051752      0.092894      0.096816      0.026957      0.011495       \n",
       "max    0.226270      0.410090      0.514970      0.229800      0.231850       \n",
       "\n",
       "               D300  \n",
       "count  71070.000000  \n",
       "mean   0.000900      \n",
       "std    0.042372      \n",
       "min   -0.187090      \n",
       "25%   -0.026065      \n",
       "50%   -0.002639      \n",
       "75%    0.025675      \n",
       "max    0.229810      \n",
       "\n",
       "[8 rows x 300 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Read word embeddings\n",
    "Embeddings = pd.read_csv('Embeddings.csv', sep=',', decimal = '.', \n",
    "                         low_memory = True, index_col = False)\n",
    "Embeddings.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Now create a dictionary for embedding.\n",
    "# Create embedding dictionary\n",
    "\n",
    "EmbeddingsDict = dict(zip(Vals, Embeddings.values))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After the embedding dictionary is created, we can study the texts to create the optimal embedding layer.\n",
    "One of the decisions we need to make is what is going to be the maximum size of our documents. Too large, and we will need to add a lot of padding thus will make it inefficient; too small, and we will be losing a lot of information. There is no clear rule here, I usually try to cover 90% of all elements, but you can argue anything that makes sense to you."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         try wait patient lol                                                                                                                         \n",
       "1         good morning fotopro team notice comment update shipment detail june june update expect order                                                \n",
       "2         still track ahead behind                                                                                                                     \n",
       "3         update delivery                                                                                                                              \n",
       "4         product nice get twice                                                                                                                       \n",
       "                   ...                                                                                                                                 \n",
       "204053    curious look work particle photon processor module p module add cost directly via high power need wifi enable make awesome starter iot device\n",
       "204054    look forward another awesome campaign kevin good job plum geek crew                                                                          \n",
       "204055    nice thanks answer cheer                                                                                                                     \n",
       "204056    wink still amaze less enthusiast plumduino way run wink project make plum geek makerfan back one continue learn enjoin way make thing        \n",
       "204057    good luck bring us project                                                                                                                   \n",
       "Name: Clean_text, Length: 204058, dtype: object"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.iloc[:,7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Avg. no of words: 15.12\n",
      "Std. deviation: 13.92\n",
      "Max words: 629\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import numpy as np\n",
    "%matplotlib inline\n",
    "\n",
    "# Count maximum number of words per file.\n",
    "wordDist = [len(w.split()) for w in df.iloc[:,7]]\n",
    "print('Avg. no of words: ' + str(np.round(np.mean(wordDist), 2)))\n",
    "print('Std. deviation: ' + str(np.round(np.std(wordDist), 2)))\n",
    "print('Max words: ' + str(np.max(wordDist)))\n",
    "\n",
    "# Generate the plot\n",
    "distData = sns.distplot(wordDist)\n",
    "\n",
    "# I'm saving the image to a PDF, as it makes it easier later to download.\n",
    "distData.figure.savefig(\"wordDist.pdf\", format = \"pdf\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Arbitrarily, we will use 170/70 words maximum. Try different values!\n",
    "\n",
    "Now we create the input layer. The first layer will have the index of each word per-text, which then we will use to efficiently associate with the embedding. For this, we use Keras' \"pad_sequence\". This will either add padding to texts that are smaller than 170, or trim the ones that are longer. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 71070 unique tokens.\n",
      "Shape of data tensor: (204058, 70)\n",
      "Shape of label tensor: (204058,)\n"
     ]
    }
   ],
   "source": [
    "# Create word index from input\n",
    "sequences = tokenizer.texts_to_sequences(df.iloc[:,7]) # Create the sequences.\n",
    "\n",
    "# Creates the indexes. Word index is a dictionary with words in it.\n",
    "word_index = tokenizer.word_index\n",
    "print('Found %s unique tokens.' % len(word_index))\n",
    "\n",
    "# Creates the training dataset, adding padding when necessary.\n",
    "data = pad_sequences(sequences, maxlen=70, \n",
    "                     padding = 'post') # add padding at the end. No difference in practice.\n",
    "\n",
    "# Creates the objective function\n",
    "labels = df.iloc[:,1]\n",
    "print('Shape of data tensor:', data.shape)\n",
    "print('Shape of label tensor:', labels.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mkdir: Data_Preprocessed: File exists\r\n"
     ]
    }
   ],
   "source": [
    "# Let's save the outputs, so we don't run all of the above 20 times.\n",
    "# Be efficient! Save always save intermediate outputs\n",
    "\n",
    "# Create saving directory\n",
    "!mkdir Data_Preprocessed\n",
    "\n",
    "# Save outputs\n",
    "np.savetxt(\"Data_Preprocessed/Data_Padded.txt\", data)\n",
    "np.savetxt(\"Data_Preprocessed/Data_Labels.txt\", labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 61,  28, 765, 757,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0], dtype=int32)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see above, our data now is a matrix corresponding to where on the embedding matrix is the vector we are looking for. This is an extremely efficient way of storing embeddings, but uses more CPU. That's ok though!\n",
    "\n",
    "Now we are almost ready! Now we need to construct the Embedding matrix. This matrix will have the weights associated with each index. Keras will automatically construct the correct embedding of length 170 (see below)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.0000e+00,  0.0000e+00,  0.0000e+00, ...,  0.0000e+00,\n",
       "         0.0000e+00,  0.0000e+00],\n",
       "       [-7.1810e-03, -8.9073e-02,  1.9473e-01, ..., -4.2866e-02,\n",
       "        -2.9140e-02,  1.2571e-04],\n",
       "       [ 1.4856e-02, -1.6472e-01,  1.4477e-01, ...,  5.6760e-02,\n",
       "        -8.0176e-02, -1.2144e-02],\n",
       "       ...,\n",
       "       [-8.6826e-02,  3.4233e-02,  3.8068e-02, ...,  9.1966e-03,\n",
       "         1.9971e-02,  4.4599e-02],\n",
       "       [ 1.3113e-02, -1.2469e-01,  3.6819e-02, ...,  7.3507e-03,\n",
       "        -7.8115e-04, -3.0591e-02],\n",
       "       [ 2.0908e-03, -2.4629e-01,  9.9815e-02, ...,  8.3639e-03,\n",
       "         1.3606e-02, -3.0303e-02]])"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create first matrix full with 0's\n",
    "embedding_matrix = np.zeros((len(word_index) + 1, 300))\n",
    "\n",
    "# Generate embeddings matrix\n",
    "for word, i in word_index.items():\n",
    "    embedding_vector = EmbeddingsDict.get(word)\n",
    "    if embedding_vector is not None:\n",
    "        # words not found in embedding index will be all-zeros.\n",
    "        embedding_matrix[i] = embedding_vector\n",
    "\n",
    "# Print what came out\n",
    "embedding_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Again, we save the intermediate result. If done right you only need this matrix!\n",
    "# No need to run everything all over again.\n",
    "np.savetxt(\"Data_EmbeddingMatrix.txt\", embedding_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We will also save the word dictionary\n",
    "# A pickle file is a Python native file\n",
    "import pickle\n",
    "f = open(\"WordDictionary.pkl\",\"wb\")\n",
    "pickle.dump(word_index, f)\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "updating: Data_Preprocessed/ (stored 0%)\n",
      "updating: Data_Preprocessed/Data_Padded.txt (deflated 97%)\n",
      "updating: Data_Preprocessed/Data_Labels.txt (deflated 99%)\n"
     ]
    }
   ],
   "source": [
    "# Zip all files for download.\n",
    "!zip -r Data_Preprocessed.zip Data_Preprocessed "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Download files"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploratory Analysis\n",
    "To get a insight before we perform analysis of neural network, it is necessary to do an exploratory analysis of the distribution of the dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Basic Statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 204058 samples in total.\n",
      "\n",
      "Counts on sentiment distribution:\n",
      "1    144671\n",
      "0    59387 \n",
      "Name: sentiment, dtype: int64\n",
      "\n",
      "Basic Statistic on Intensity:\n",
      "count    204058.000000\n",
      "mean     0.902525     \n",
      "std      0.893052     \n",
      "min      0.000000     \n",
      "25%      0.300000     \n",
      "50%      0.700000     \n",
      "75%      1.300000     \n",
      "max      22.299999    \n",
      "Name: confidence, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(\"There are\",df.shape[0],'samples in total.')\n",
    "print(\"\\nCounts on sentiment distribution:\")\n",
    "print(df.sentiment.value_counts())\n",
    "print('\\nBasic Statistic on Confidence:')\n",
    "print(df.confidence.describe())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Most Frequent Word"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAu8AAAKKCAYAAACNurW4AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+17YcXAAAgAElEQVR4nOzde3RNd/7/8dchIpJIIiJxiZSpJIgRREm/RadKL6p06HSqV5fSalFrpjfS1rjUpcoY14WGdjqt27QaE36dCr1ph3GpBiGHVpup+yWhcQvy+f2h9nFIOEjCp30+1spazt6f/dnv/U6s9crO5+zjMsYYAQAAALjulbvWBQAAAADwDeEdAAAAsAThHQAAALAE4R0AAACwBOEdAAAAsAThHQAAALAE4R0ArmMnT55U9+7dFR4eLpfLpRUrVvh87Msvv6z69euXYnXApUVHR2v06NHXugzgF4PwDuCKde/eXS6X64KvuXPnXuvSfjHmz5+vefPmacmSJdq1a5datmx5wZjvv//+soO9rbp376527dpd6zIA4Jrxu9YFALBb69atNX/+fK9tYWFhRY49efKkKlSoUBZl/WJs3bpVMTExSk5OvtalAMUqKCiQv7//tS4D+FXgzjuAq+Lv76/q1at7fQUEBEiSHnnkEd11112aMGGCbrjhBlWsWFHHjx+XMUZ/+9vfFB8fr4CAAMXFxWnUqFE6deqUM++BAwf0hz/8QUFBQYqKitKQIUOc+c5q1aqVnnrqKa96/vKXv6hevXpe2959910lJiYqICBAdevW1XPPPaejR496zfPkk09q6NChioqKUtWqVdWrVy+vMZI0Z84cNWvWTAEBAapatao6dOigw4cPa+bMmapataqOHz/uNf6VV15RbGysivsga2OMxowZo7p168rf31833nijJk2a5FXX0KFD5Xa75XK5LrguSTp16pTq1q0r6cwvUkWN++CDDxQfH6/g4GC1bdtW27dv99q/evVqtW/fXsHBwYqMjNT999+v//3vf0XWfFZ0dLT+8pe/6Mknn1RoaKiioqI0bdo0nThxQs8884zCwsIUHR2tadOmeR23Y8cOPfDAAwoLC1OlSpV022236euvv3b2FxQUaODAgapVq5YqVqyoGjVq6OGHH5Z0ZhnQ22+/rWXLljl/5fnHP/5RbI2rV6/WnXfeqZCQEFWuXFktW7bUmjVrnP2zZ89W/fr15e/vr9q1a+vVV1/V6dOnvfr/5JNPavDgwapWrZrCwsL06quvqrCwUEOGDFFUVJQiIyP16quvlklvMjIy5HK5tGzZMrVq1UqVKlVSo0aNlJGRUWwP8vPzVaFCBX366afOtltuuUUBAQHOz+vRo0fl7++vjz/+2PkevPDCC6pZs6b8/f3VqFEjzZs3zzn+1KlTcrlcmjx5sh588EGFhITosccekyR9/fXXSk5OVkBAgOLj4/X+++9fUNP06dNVv3595//R7373O+3cubPYawBwHgMAV+jxxx83t99+e7H7H374YVO5cmXTtWtXs379epOZmWlOnz5tUlJSTJ06dcyHH35ovvvuO5Oenm5q1apl/vKXvzjHduzY0cTGxprly5ebDRs2mAcffNBUrlzZ3Hnnnc6YW265xTz55JNe5xwyZIi58cYbndczZ8404eHh5p133jHffvut+fTTT01CQoLp3r271zyhoaHmz3/+s9myZYtZsmSJqVy5shk2bJgzZsaMGcbPz8+MGDHCZGVlmW+++caMHz/eHDhwwOTn55uQkBDzj3/8wxl/6tQpEx0dbUaPHl1sfyZMmGAqVapkZs6cadxut5kyZYrx9/c3b731ljHGmAMHDpiBAweaevXqmV27dpl9+/YVOc9///tfI8mkpaV5jUtJSTFBQUHmrrvuMmvXrjXr1q0zjRs3Nm3btnWOzczMNIGBgWbo0KFm8+bN5ptvvjFdunQx8fHx5sSJE8XWXqtWLRMWFmYmTJhgtm7daoYMGWJcLpe5++67zV//+lfjdrvNsGHDTLly5cyWLVuMMcYUFhaapKQk07RpU/Pll1+ab775xnTt2tWEh4ebAwcOGGOMGTNmjKldu7b59NNPzQ8//GBWrVplJkyYYIwx5qeffjIPPPCAad26tdm1a5fZtWuXOXbsWJH1ffPNN6ZSpUrmoYceMqtXrzZut9u8++67ZuXKlcYYYz788ENTrlw5M2bMGJOdnW3ee+89Exoa6vUzeMstt5iQkBAzaNAgk52dbWbMmGEkmbvvvtu89NJLJjs726SmphpJ5uOPPy713ixdutRIMk2aNDH//ve/TXZ2tnnooYdMlSpVzKFDh4r9Xt18883m5ZdfdnpYoUIFExERYTIyMowxxnz00UfG39/fHDlyxBhjzMCBA03VqlXNggULTHZ2thk2bJhxuVzmk08+McYYc/LkSSPJVK1a1UyePNls27bNuN1uk5+fb6KiokzHjh3NN998Y1asWGGSkpJMQECAGTVqlDHGmJUrVxo/Pz/zj3/8w3z//fcmMzPTTJ8+3ezYsaPY+gF4I7wDuGKPP/64KV++vAkKCnK+fvOb3zj7H374YVOlShUnFBhzJjwEBASYpUuXes2VmppqqlataowxZvPmzUaSWb58ubP/2LFjJioq6rLDe61atczMmTO9xixbtsy4XC5z+PBhZ56mTZt6jenVq5dp1aqVMeZMsKpRo4Z59tlni+1F3759za233uq8Tk9PNxUqVDC7d+8u9pjq1aubQYMGeW3r16+fiY2NdV6npKSY+Pj4Yucwxpjt27cbSeaLL77w2p6SkmL8/PzM/v37nW3vvPOOKVeunCkoKDDGnPkePfzww17HHT161Pj7+5t//etfxZ6zVq1apmvXrs7rU6dOmcDAQHPfffc5206fPm0qV65spk2bZow5ExIlOYH17LkiIyPNa6+9Zowx5umnnzbt2rUzhYWFRZ73Ur8wnvXggw+apk2bFjtPcnKy6datm9e2N954wwQGBpqTJ08aY878XCQlJXmNiYuLM02aNPHa1rBhQ/Piiy86r0urN2fDe1pamjPmf//7n5HkBPGipKSkmJtvvtkYY8ySJUtMXFyc6d27t/Oz98ILL5jWrVsbY4w5fPiwqVChgpk+fbrXHB07djTt27c3xnjCe58+fbzGTJs2zVSuXNnk5eU5277++msjyQnv8+fPN2FhYc7/PQCXj2UzAK5Ky5YttX79eudr2bJlXvsTEhIUGBjovN6wYYOOHz+uzp07Kzg42Pl65plndODAAeXm5iorK0sul0s333yzc1xAQICaN29+WbXt2rVLO3bs0IABA7zOde+998oYo23btjljmzRp4nVsrVq1tGfPHmeeXbt26Y477ij2XE899ZQ+++wzud1uSdLMmTPVqVMnRUVFFTk+NzdXu3fvVps2bby233rrrfr222914sSJy7rW4tSuXVtVq1Z1XteqVUuFhYXat2+fpDNLSxYsWODVn2rVqunkyZPaunXrRedOTEx0/l2+fHlFRESocePGzrZy5cqpWrVq2rt3ryRp06ZNioqKUnx8vDOmUqVKuummm7Rp0yZJUs+ePfX1118rNjZWffv21QcffKCCgoLLvu61a9eqXbt2crlcRe7PysoqsvdHjx71WlZ07jVKUvXq1b2u8ey2s9dY1HEl1Zuzzv1ZrVWrliQ5P6tFadu2rVavXq2ffvpJy5cv1+23367bbrtNy5cvlyQtX75cbdu2lXTmPRYnT54ssjfn19GiRQuv11lZWUpISFBoaKhXrcHBwc7rO++8UzExMapbt666deummTNn6sCBA8XWDuBCvGEVwFWpVKlSkWuxzwoKCvJ6XVhYKElauHChfvOb31wwPiQkpNg14ucrV67cBWNPnjx5wbkmT558QRiRzgTbs85/s53L5XKOP3dbcRo3bqzk5GS9+eab+tOf/qTFixdr8eLFxY4/W/f5c/p67b4q6rokT28KCwvVvXt3Pf/88xccGxERcdG5z3/zscvlKnLbuX0sqofGGGd7UlKStm/frqVLl+qTTz5R//79NWTIEP3nP//xCoG+uNj3q6j9RX1PruQar/S4S/XmrHO/p+d/P4vyf//3f/Lz89Pnn3+u5cuXa9CgQWrdurUee+wx5eTk6Ouvv9a4ceMuqO1SdZz/f7uoMecLCQnR2rVrtWLFCi1btkxTpkzRCy+8oE8++eSCX6ABFI077wDK1G9/+1tVrFhR3333nerVq3fBV/ny5ZWQkCBjjP7zn/84x504cUJr1671misyMvKCN7qtW7fO+XfNmjVVo0YNud3uIs9VsWJFn2quUaOGatSooX//+98XHffkk0/q7bff1owZMxQdHa327dsXOzY8PFzVq1fXZ5995rX9888/v6zaJE+YO/fNlr5q3ry5MjMzdeONN17Qn+KeGnSlEhIStHv3bmVnZzvbjh07pjVr1ighIcHZVrlyZXXp0kWTJk3SqlWrtHHjRn3xxReSzlyrL9eZlJSkpUuXFvvLUMOGDYvsfWBgoOrUqXMFV3d1fO3NlQgICNDNN9+s999/X5mZmbrtttsUFRWluLg4DRs2TBUrVnSeZhQbG6sKFSoU2ZtL1ZGQkKCNGzfq8OHDzrZvvvlG+fn5XuP8/Pz0u9/9TsOHD9fXX3+tatWqac6cOVd1jcCvCeEdQJkKCQnRiy++qBdffFFTp05Vdna2Nm3apPfee0+DBg2SJNWvX18dOnRQ37599dlnn2nTpk3q2bOnjhw54jVXu3bt9PHHH+uf//yntm7dqpEjR3oFfpfLpddee01//etfNXLkSG3atEnZ2dlauHCh+vbt63PNLpdLr776qqZMmaKRI0dq8+bN2rRpkyZOnKiDBw864/74xz+qoKBAr732mp544olL3oUcNGiQJkyYoNTUVG3dulXTpk3TjBkzNHjwYJ9rk6SoqCgFBgbq448/1p49e5Sbm+vzsSkpKdqwYYMef/xxrV69Wtu3b9fy5cvVv39//fDDD5dVx6XccccdSkpKUrdu3fTVV19pw4YNevTRR3Xq1Ck9+eSTkqQxY8bovffeU1ZWlr777jvNmjVLfn5+io2NlSTVrVtXWVlZysrK0v79+4tdXvTiiy8qKytLjz76qNauXatt27Zp3rx5WrVqlaQzvZ83b55ef/11bd26VXPnztXw4cP1wgsvyM+v7P8o7Utvrkbbtm31zjvvqFGjRs4yqrZt2+rtt9/WLbfc4vwCWLlyZfXr10+DBw/W+++/L7fbrREjRmjx4sWX/Ll85JFHVKlSJT366KPasGGDvvrqK/Xu3dt5+pR05slHf/vb37Ru3Trl5OTogw8+0I4dO9SwYcOrvkbg14LwDqDMDR06VGPHjtX06dPVuHFjtWrVShMnTvS64/n2228rISFBd999t2677TbVrVtX9957r9c8vXr1Up8+ffT000+rRYsW2r17t5555hmvMT169NCcOXO0aNEiNW/eXDfddJOGDRvmrBX21VNPPaXU1FTNnTtXTZo00a233qqPP/7YK+hVqlRJjzzyiAoLC9WzZ89Lznl2SciIESPUsGFDvfHGGxo7dqwef/zxy6qtfPnymjx5st59913VqlVLN910k8/HNmrUSF9++aXy8vLUvn17NWzYUH369FFBQYHX2uWS4HK5lJaWpnr16unuu+9WixYtdODAAS1dulTh4eGSzoTHN954Qy1btlRiYqLS09O1cOFCZ2lW79691axZMyUnJ6tatWpasGBBkedq0qSJPv30U+3atUtt2rRR06ZNNWHCBOf71alTJ82cOVOzZs1SQkKCnnvuOQ0YMEAvv/xyiV6zr3zpzdW4/fbbderUKWdtu3QmvJ+/TZJGjx6tnj17qn///mrUqJHmzJmj9957T7feeutFzxEcHKwlS5Zo9+7dat68uR577DE9//zzXu+5CA8P14cffqg77rhDcXFxGjRokIYMGXLZP/PAr5nLlPQCSwAoJY888oj279+v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pV0fAAAAgJ/5dOd90aJFevnll1WnTh1n2//93/9p3LhxateuXWnVBvxqnO7d6aqO31MCNZSfuagEZgEAAKXJpzvvP/30k6Kjo7221axZU/n5+aVSFAAAAIAL+RTe69evr7///e86ceKEJOn48eN65513FBcXV6rFAQAAAPDwadlM7969NWHCBHXv3l3BwcHKz89XXFycnn322dKuDwAAAMDPfArvVapU0dChQ7V//37l5eWpSpUqqlq1amnXBgAAAOAcPoX3JUuWKCEhQTfccIMiIiJKuyYAAAAARfApvH/77bdKT0/XsWPH1KBBAzVs2FANGzZUnTp1VK6cT8vmAQAAAFwln8J7//79JUl79+5VVlaWsrKy9M9//lOS9NZbb5VacQAAAAA8fP6E1Z07dyorK0ubNm1Sdna2atSooYYNG5ZmbQAAAADO4fPTZgICApScnKxbb71Vffr0UaVKlUq7NgAAAADn8Cm8JyUlacuWLVq9erWOHDmi/Px8NWjQgCfOAAAAAGXIp/D+1FNPSZLy8vK0efNmZWVl6c0331TlypU1adKkUi0QAAAAwBk+r3nfvn27s+Z98+bNqlixourVq1eatQEAAAA4h0/hvUePHgoMDFSDBg3UvHlzPfbYY6pevXpp1wYAAADgHD6F9zFjxigyMrK0awEAAABwET59whLBHQAAALj2+HhUAAAAwBKEdwAAAMASxYb3d955x/n3xo0by6QYAAAAAMUrNrxnZGQ4/x47dmyZFAMAAACgeMU+baZOnToaN26coqOjdfLkSc2bN6/IcX/84x9LrTgAAAAAHsWG9z/96U/KyMjQvn37ZIzRgQMHyrIuAAAAAOcpNryHhoaqa9eukqTCwkI9/fTTZVYUAAAAgAv59CFNTz/9tPLz87V27VodPHhQ4eHhSkpKUnBwcGnXBwAAAOBnPj0q0u12q3///lq6dKl++OEHZWRkqH///nK73aVdHwAAAICf+XTn/a233tITTzyhW265xdn21Vdfafbs2Ro1alSpFQcAAADAw6c777t27dLNN9/stS05OVm7d+8ulaIAAAAAXMin8F69enV99dVXXtv+85//KCoqqlSKAgAAAHAhn5bNdO/eXaNHj9b/+3//TxEREdq3b5927dqll156qbTrAwAAAPAzn8J7fHy8Jk2apHXr1ik3N1dJSUlq1qwZT5sBAAAAypBP4V2SgoOD1aZNm9KsBQAAAMBF+BzeAaAsnO7d6aqO31MCNZSfuagEZgEAoOT59IZVAAAAANce4R0AAACwhE/hfcmSJTp8+HBp1wIAAADgInxa875hwwbNmTNHCQkJatOmjW666SZVqFChtGsDAAAAcA6fwvuLL76on376SV9++aUWL16smTNnqmXLlmrTpo0aNmxY2jUCAAAA0GU8baZy5cq66667dNddd+mHH37Q5MmT9cknnygiIkK33367OnTooICAgNKsFQAAAPhVu6xHRW7YsEFffPGFVq9erRtvvFH9+vVTRESElixZopEjR2rYsGGlVScAAADwq+dTeP/73/+ur776SoGBgWrTpo3GjRun8PBwZ39sbKx69OhRakUCAAAA8DG8nzx5Us8995zq1atX9CR+fho9enSJFgYAAADAm0/h/fe//738/f29tuXn56ugoMC5A1+rVq2Srw4AAACAw6fnvI8dO1YHDx702nbw4EG98cYbpVIUAAAAgAv5FN537typmJgYr20xMTHasWNHqRQFAAAA4EI+hfeQkBDt3r3ba9vu3btVuXLlUikKAAAAwIV8WvN+2223ady4cXrwwQcVFRWl3bt3a968eWrbtm1p1wcAAADgZz6F9/vuu09+fn565513dODAAVWtWlVt27ZVx44dS7s+AAAAAD/zKbyXK1dOnTp1UqdOnUq7HgAAAADF8PkTVnfu3Knvv/9ex48f99rO0hkAAACgbPgU3j/44AO9//77uuGGG1SxYkWvfYR3AAAAoGz4FN6XLFmikSNH6oYbbijtegAAAAAUw6dHRfr7+/MJqgAAAMA15lN4/+Mf/6hZs2YpNzdXhYWFXl8AAAAAyoZPy2amTp0qSVq2bNkF++bNm1eyFQEAAAAokk/hffLkyaVdBwAAAIBL8Cm8V6tWTZJUWFioQ4cOqUqVKqVaFAAAAIAL+RTejxw5ojfffFMrV650Pml1zZo12rZtmx588MHSrhEAAACAfHzD6syZMxUYGKipU6fKz+9M3o+Li9NXX31VqsUBAAAA8PDpzvuGDRs0ffp0J7hLUkhIiA4dOlRqhQEAAADw5tOd98DAQP30009e2/bv38/adwAAAKAM+RTeb7/9do0bN04bN26UMUZut1tTpkxR+/btS7s+AAAAAD/zadlM586dVaFCBaWmpur06dOa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EZFEsLwTEREREUkEyzsRERERkUSwvBMRERERSQTLOxERERGRRLC8ExERERFJBMs7EREREZFEsLwTEREREUkEyzsRERERkUSwvBMRERERSQTLOxERERGRRLC8ExERERFJBMs7EREREZFEsLwTEREREUkEyzsRERERkUSwvBMRERERSQTLOxERERGRRLC8ExERERFJBMs7EREREZFEsLwTEREREUkEyzsRERERkUSwvBMRERERSQTLOxERERGRRLC8ExERERFJBMs7EREREZFEsLwTEREREUkEyzsRERERkUSwvBMRERERSQTLOxERERGRRLC8ExERERFJBMs7EREREZFEsLwTEREREUkEyzsRERERkUSwvBMRERERSQTLOxERERGRRLC8ExERERFJBMs7EREREZFEsLwTEREREUkEyzsRERERkUSwvBMRERERSQTLOxERERGRRLC8ExERERFJBMs7EREREZFEsLwTEREREUkEyzsRERERkUSwvBMRERERSQTLOxERERGRRLC8ExERERFJBMs7EREREZFEsLwTEREREUmEUnQAUWJjYxETEwOVSgUnJyfMmDEDHh4eomMRERERET2WLO+8nz17Fnv37sXf/vY3hIaGws3NDR999BGKi4tFRyMiIiIieixZlvdjx47Bx8cHvr6+cHJywsyZM2FtbY24uDjR0YiIiIiIHkt25f3BgwfIysrCiy++qDPevXt3XL16VVAqIiIiIqKnk92c97KyMqjVajz33HM641ZWVkhNTdV7fHx8POLj4wEAISEhaNeu3f8W4PiF/+3rmxJei0d4LR7htXiE1+IRXotHeC0e4bWox+vwiAyuhezuvD+kUCh0PtZoNHpjAODr64uQkBCEhIQYKtpTffDBB6IjGA1ei3q8Do/wWjzCa/EIr8UjvBaP8Fo8wmvxiLFfC9mVd0tLS5iYmEClUumMl5aW6t2NJyIiIiIyJrIr70qlEi4uLrh8+bLOeGpqKtzc3ASlIiIiIiJ6OtOVK1euFB3C0Fq0aIHo6GhYW1vD3NwcX3/9NdLT0/H222+jVatWouP9KS4uLqIjGA1ei3q8Do/wWjzCa/EIr8UjvBaP8Fo8wmvxiDFfC4VGo9GIDiHCw0Oa7t27h/bt22P69Onw9PQUHYuIiIiI6LFkW96JiIiIiKRGdnPeiYiIiIikiuWdiIiIiEgi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\n",
      "text/plain": [
       "<Figure size 864x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Counter(\" \".join(df[\"Clean_text\"]).split()).most_common(10)\n",
    "fig = plt.figure(figsize=(16, 9))   \n",
    "ax = r['Frequency'].plot(kind='bar', fontsize=14, figsize=(12,10))\n",
    "ax.set_title('Frequency of the most common words')\n",
    "ax.set_ylabel('Frequency of word')\n",
    "ax.set_xlabel('Word')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {},
   "outputs": [],
   "source": [
    "def split(x):\n",
    "    text = x\n",
    "    # split into list of words\n",
    "    text = text.split()\n",
    "    return text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"split\"] = df['Clean_text'].apply(split)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {},
   "outputs": [],
   "source": [
    "# helper function to count freqency of words\n",
    "def count_freq(series):\n",
    "    cnt = Counter()\n",
    "    for doc in series:\n",
    "        for word in doc:\n",
    "            cnt[word]+=1\n",
    "    return cnt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Positive Word</th>\n",
       "      <th>P_Count</th>\n",
       "      <th>Negative Word</th>\n",
       "      <th>N_Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>get</td>\n",
       "      <td>29423</td>\n",
       "      <td>get</td>\n",
       "      <td>14994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>thanks</td>\n",
       "      <td>22332</td>\n",
       "      <td>receive</td>\n",
       "      <td>13366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>update</td>\n",
       "      <td>18167</td>\n",
       "      <td>update</td>\n",
       "      <td>8554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>receive</td>\n",
       "      <td>15197</td>\n",
       "      <td>still</td>\n",
       "      <td>8309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thank</td>\n",
       "      <td>13929</td>\n",
       "      <td>please</td>\n",
       "      <td>7666</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>hi</td>\n",
       "      <td>13771</td>\n",
       "      <td>email</td>\n",
       "      <td>6844</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>one</td>\n",
       "      <td>13658</td>\n",
       "      <td>send</td>\n",
       "      <td>6726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>ship</td>\n",
       "      <td>13336</td>\n",
       "      <td>refund</td>\n",
       "      <td>6631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>please</td>\n",
       "      <td>13238</td>\n",
       "      <td>one</td>\n",
       "      <td>6504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>work</td>\n",
       "      <td>13193</td>\n",
       "      <td>order</td>\n",
       "      <td>6337</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>like</td>\n",
       "      <td>12983</td>\n",
       "      <td>go</td>\n",
       "      <td>6206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>look</td>\n",
       "      <td>12840</td>\n",
       "      <td>back</td>\n",
       "      <td>5966</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>make</td>\n",
       "      <td>12384</td>\n",
       "      <td>work</td>\n",
       "      <td>5679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>great</td>\n",
       "      <td>12380</td>\n",
       "      <td>product</td>\n",
       "      <td>5664</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>use</td>\n",
       "      <td>12338</td>\n",
       "      <td>ship</td>\n",
       "      <td>5497</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Positive Word  P_Count Negative Word  N_Count\n",
       "0   get           29423    get           14994  \n",
       "1   thanks        22332    receive       13366  \n",
       "2   update        18167    update        8554   \n",
       "3   receive       15197    still         8309   \n",
       "4   thank         13929    please        7666   \n",
       "5   hi            13771    email         6844   \n",
       "6   one           13658    send          6726   \n",
       "7   ship          13336    refund        6631   \n",
       "8   please        13238    one           6504   \n",
       "9   work          13193    order         6337   \n",
       "10  like          12983    go            6206   \n",
       "11  look          12840    back          5966   \n",
       "12  make          12384    work          5679   \n",
       "13  great         12380    product       5664   \n",
       "14  use           12338    ship          5497   "
      ]
     },
     "execution_count": 318,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get top 10 frequent words for each lebels\n",
    "a = count_freq(df[pos_sen_index].split).most_common(15)\n",
    "b = count_freq(df[neg_sen_index].split).most_common(15)\n",
    "pos_freq = [[i for i,j in a],[j for i,j in a]]\n",
    "neg_freq = [[i for i,j in b],[j for i,j in b]]\n",
    "df_freq_pos = pd.DataFrame({'Positive Word':pos_freq[0],'P_Count':pos_freq[1],'Negative Word':neg_freq[0],'N_Count':neg_freq[1]})\n",
    "df_freq_pos.head(15)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Word Count Distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize = (12,6))\n",
    "sns.distplot(df[neg_sen_index].word_count,ax = ax,label = 'Negative')\n",
    "sns.distplot(df[pos_sen_index].word_count,ax = ax,label= 'Positive')\n",
    "plt.title(\"Distribution of word_count for Positive and Negative sentiment\")\n",
    "ax.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The distributin is not very different."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phrase Length Distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [],
   "source": [
    "from plotly.offline import init_notebook_mode, iplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "        <script type=\"text/javascript\">\n",
       "        window.PlotlyConfig = {MathJaxConfig: 'local'};\n",
       "        if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n",
       "        if (typeof require !== 'undefined') {\n",
       "        require.undef(\"plotly\");\n",
       "        requirejs.config({\n",
       "            paths: {\n",
       "                'plotly': ['https://cdn.plot.ly/plotly-latest.min']\n",
       "            }\n",
       "        });\n",
       "        require(['plotly'], function(Plotly) {\n",
       "            window._Plotly = Plotly;\n",
       "        });\n",
       "        }\n",
       "        </script>\n",
       "        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import cufflinks as cf\n",
    "cf.go_offline()\n",
    "cf.set_config_file(offline=False, world_readable=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Proportion of Target Variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.factorplot(x=\"sentiment\", data=df, kind=\"count\", size=6, aspect=1.5, palette=\"PuBuGn_d\")\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It can be shown in the chart that the class labels were unbalanced, there were more positive comments than negative comments."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " ## Average Word Account of Each Class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Clean_text</th>\n",
       "      <th>word_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>try wait patient lol</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>good morning fotopro team notice comment update shipment detail june june update expect order</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>still track ahead behind</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>update delivery</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>product nice get twice</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204053</th>\n",
       "      <td>curious look work particle photon processor module p module add cost directly via high power need wifi enable make awesome starter iot device</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204054</th>\n",
       "      <td>look forward another awesome campaign kevin good job plum geek crew</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204055</th>\n",
       "      <td>nice thanks answer cheer</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204056</th>\n",
       "      <td>wink still amaze less enthusiast plumduino way run wink project make plum geek makerfan back one continue learn enjoin way make thing</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204057</th>\n",
       "      <td>good luck bring us project</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>204058 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                                                                                           Clean_text  word_count\n",
       "0       try wait patient lol                                                                                                                           4         \n",
       "1       good morning fotopro team notice comment update shipment detail june june update expect order                                                  14        \n",
       "2       still track ahead behind                                                                                                                       4         \n",
       "3       update delivery                                                                                                                                2         \n",
       "4       product nice get twice                                                                                                                         4         \n",
       "...                        ...                                                                                                                        ..         \n",
       "204053  curious look work particle photon processor module p module add cost directly via high power need wifi enable make awesome starter iot device  23        \n",
       "204054  look forward another awesome campaign kevin good job plum geek crew                                                                            11        \n",
       "204055  nice thanks answer cheer                                                                                                                       4         \n",
       "204056  wink still amaze less enthusiast plumduino way run wink project make plum geek makerfan back one continue learn enjoin way make thing          22        \n",
       "204057  good luck bring us project                                                                                                                     5         \n",
       "\n",
       "[204058 rows x 2 columns]"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['word_count'] = df['Clean_text'].apply(lambda x: len(str(x).split(\" \")))\n",
    "df[['Clean_text','word_count']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sentiment</th>\n",
       "      <th>Average Word Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Positive</td>\n",
       "      <td>14.634834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Negative</td>\n",
       "      <td>16.303669</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Sentiment  Average Word Count\n",
       "0  Positive  14.634834         \n",
       "1  Negative  16.303669         "
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neg_sen_index = df.sentiment == 0\n",
    "pos_sen_index = df.sentiment == 1\n",
    "neg_avg = df[neg_sen_index].word_count.mean()\n",
    "pos_avg = df[pos_sen_index].word_count.mean()\n",
    "avg_df = pd.DataFrame({'Sentiment':['Positive','Negative'],'Average Word Count':[pos_avg,neg_avg]})\n",
    "avg_df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a66c59cf8>"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot('Sentiment','Average Word Count',data = avg_df,palette='PRGn')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The negative comment have more words on average, but the difference is not that big."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Average Confidence Score for Sentiments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a62b78198>"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x='sentiment', y='confidence' , data=df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The confidence score is higher for negative sentence than positive comments."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modelling using an embedding layer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will also generate a train and test set to make a fair comparison between our models. From here onwards we will use the train_test_split function from scikit-learn. This works for any general dataset, not only scorecards."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Split the data into train and test.  \n",
    "#Hold out 40% of observations as the test set. \n",
    "#Pass `random_state=0` to `train_test_split` to ensure you get the same train and tests sets as the solution.\n",
    "X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.3, \n",
    "                                                    random_state=20190327, \n",
    "                                                    stratify = labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Two architectures:\n",
    "    1. A simple convnet using a sequence of layers\n",
    "    2. More complex model\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have this ready, we need to create our model and add an [Embedding Layer](https://keras.io/layers/embeddings/). We'll create a very simple model using Convolutional Layers as hidden layers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Final model.\n",
    "model = Sequential()\n",
    "embedding_layer = Embedding(len(embedding_matrix),           # Words in the embedding.\n",
    "                            300,                           # Embedding dimension\n",
    "                            weights=[embedding_matrix],    # The weights we just calculated\n",
    "                            input_length=70,              # The maximum number of words.\n",
    "                            trainable=False)               # To NOT recalculate weights!\n",
    "\n",
    "model.add(embedding_layer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sequential ConvNet\n",
    "I started with a simple architecture first:\n",
    "\n",
    "\n",
    "1. A 1D convolution of size 3 (so three word sequences)\n",
    "2. A second 1D convolution of size 3 (so more complex word sequences)\n",
    "3. Dropout to avoid overfitting\n",
    "4. Max pooling to get the most important sequences.\n",
    "5. A flattening layer.\n",
    "6. A dense layer of 128 neurons.\n",
    "7. Dropout with p = 0.5\n",
    "8. A softmax output."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Very important: If you are letting your embedding to adapt to your own model, you need to set \"trainable=True\", if not, leave to False.\n",
    "\n",
    "Done! We have a model that uses an embedding layer as input. Let's try it in a (very bad) model.Our network will take the embedding as input and will estimate the probability of being of class 1 or 0 (positive or negative). A potential architecture is as follows:\n",
    "\n",
    "- A [1D-Convolutional Layer](https://keras.io/layers/convolutional/): See the next lecture for details :). I will add 64 filters and a kernel size of 3, which means \"look for 64 different combinations of 3 words that are useful\". We use ReLU activation for it.\n",
    "\n",
    "- A [Flatten](https://keras.io/layers/core/#flatten) layer: The embedding matrix comes as a, well, a matrix, the output of the first layer will be as well. We need to change this to a shallow 1D tensor. The Flatten layer takes matrices (or N-Dimensional tensors) and turns them into 1D tensors.\n",
    "\n",
    "- A Dense layer with 64 neurons and ReLU activation.\n",
    "\n",
    "- A [Dropout](https://keras.io/layers/core/#dropout) layer: Big models can have many millions of parameters. These models are prone to be overfitted. [Srivastava et al. (2014)](http://jmlr.org/papers/volume15/srivastava14a.old/srivastava14a.pdf) realized that a simple way to avoid overadjustment was to simply randomly set a large number of parameters to 0. This is called \"Dropout\". We will randomly set 40% of all weights to 0. This is a tunable parameter, you should experiment with parameters that make sense to you.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Final model.\n",
    "model = Sequential()\n",
    "embedding_layer = Embedding(len(embedding_matrix),           # Words in the embedding.\n",
    "                            300,                           # Embedding dimension\n",
    "                            weights=[embedding_matrix],    # The weights we just calculated\n",
    "                            input_length=70,              # The maximum number of words.\n",
    "                            trainable=False)               # To NOT recalculate weights!\n",
    "\n",
    "model.add(embedding_layer)\n",
    "\n",
    "# Check for 64 sequences of length 3.\n",
    "#Add first convolution, the operation is to add a Convolution1D layer, called Conv1D.\n",
    "model.add(Conv1D(filters=32,           # How many filters to calculate.\n",
    "                 kernel_size=3,         # How many words to calculate per filter.\n",
    "                 padding='valid',       # Add padding?\n",
    "                 activation='relu',     # What activation to use?\n",
    "                 strides=1)             # What stride to use?\n",
    "         )\n",
    "#Add second convolutional layer\n",
    "model.add(Conv1D(filters=64,           # How many filters to calculate.\n",
    "                 kernel_size=3,         # How many words to calculate per filter.\n",
    "                 padding='valid',       # Add padding?\n",
    "                 activation='relu',     # What activation to use?\n",
    "                 strides=1)             # What stride to use?\n",
    "         )\n",
    "\n",
    "\n",
    "#And now we add max pooling. We will reduce filters by a factor of 3, to keep with the number. \n",
    "#Basically, we will only choose one out of every three sequences that we are studying, the most intense one.\n",
    "model.add(MaxPooling1D(pool_size = 3))\n",
    "\n",
    "#Almost done, First we flatten, and then add a dense layer. Dropout and an output layer finalize the problem.\n",
    "# Flatten\n",
    "# Turn output matrices into 1D tensor for shallow network.\n",
    "model.add(Flatten())\n",
    "\n",
    "# Dense Layer of size 128 with Dropout:  Add 128 neurons with ReLU activation.\n",
    "model.add(Dense(64, activation = 'relu'))\n",
    "#Add droout\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "\n",
    "#Add an output layer with a sigmoid.\n",
    "# Output layer of size 1\n",
    "model.add(Dense(1, activation = 'sigmoid'))\n",
    "\n",
    "#we need a binary_crossentropy error function. I will use Adam for training.\n",
    "# Use Adam as optimizer, with a binary_crossentropy error.\n",
    "model.compile(loss='binary_crossentropy',\n",
    "              optimizer='adam',\n",
    "              metrics=['acc'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_35\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "embedding_32 (Embedding)     (None, 70, 300)           21321300  \n",
      "_________________________________________________________________\n",
      "conv1d_71 (Conv1D)           (None, 68, 32)            28832     \n",
      "_________________________________________________________________\n",
      "conv1d_72 (Conv1D)           (None, 66, 64)            6208      \n",
      "_________________________________________________________________\n",
      "max_pooling1d_33 (MaxPooling (None, 22, 64)            0         \n",
      "_________________________________________________________________\n",
      "flatten_35 (Flatten)         (None, 1408)              0         \n",
      "_________________________________________________________________\n",
      "dense_56 (Dense)             (None, 64)                90176     \n",
      "_________________________________________________________________\n",
      "dropout_28 (Dropout)         (None, 64)                0         \n",
      "_________________________________________________________________\n",
      "dense_57 (Dense)             (None, 1)                 65        \n",
      "=================================================================\n",
      "Total params: 21,446,581\n",
      "Trainable params: 125,281\n",
      "Non-trainable params: 21,321,300\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "#check the summary of the network\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 99988 samples, validate on 42852 samples\n",
      "Epoch 1/20\n",
      "99988/99988 [==============================] - 65s 650us/sample - loss: 0.4012 - acc: 0.8110 - val_loss: 0.3707 - val_acc: 0.8306\n",
      "Epoch 2/20\n",
      "99988/99988 [==============================] - 61s 611us/sample - loss: 0.3609 - acc: 0.8337 - val_loss: 0.3647 - val_acc: 0.8338\n",
      "Epoch 3/20\n",
      "99988/99988 [==============================] - 61s 606us/sample - loss: 0.3437 - acc: 0.8429 - val_loss: 0.3664 - val_acc: 0.8342\n",
      "Epoch 4/20\n",
      "99988/99988 [==============================] - 61s 611us/sample - loss: 0.3286 - acc: 0.8510 - val_loss: 0.3641 - val_acc: 0.8354\n",
      "Epoch 5/20\n",
      "99988/99988 [==============================] - 80s 796us/sample - loss: 0.3127 - acc: 0.8592 - val_loss: 0.3854 - val_acc: 0.8223\n",
      "Epoch 6/20\n",
      "99988/99988 [==============================] - 61s 610us/sample - loss: 0.2973 - acc: 0.8653 - val_loss: 0.3813 - val_acc: 0.8256\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Now we train. We will use 33% of the data as a test set, and train for 10 epochs.\n",
    "#We will calculate the model over the training set, \n",
    "#and then estimate the AUC of the model over both the training and testing set.\n",
    "# Fit the model\n",
    "callbacks_list=[keras.callbacks.EarlyStopping(monitor='val_loss',patience=2),keras.callbacks.ModelCheckpoint(filepath='fasttext_seq_model.h5',monitor='val_loss',save_best_only=True)]\n",
    "history = model.fit(X_train, y_train, validation_split=0.3, epochs=20, batch_size=20,callbacks=callbacks_list)\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "epochs = range(1, len(loss) + 1)\n",
    "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
    "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#It stops at Epoch 4, but we set a checkpoint at Epoch 2 that has the lowest validation loss.\n",
    "#Because our patience is set to 2, so if it's greater than the smallest validation loss two times, \n",
    "#then it will stop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#The model reaches high predictive capability very quickly in the train set\n",
    "#but the validation set overfit quite quickly too! (around 2 epochs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We should have probably stopped training at around 2 epochs or so. It's possible to do this automatically, I added a [callback](https://machinelearningmastery.com/how-to-stop-training-deep-neural-networks-at-the-right-time-using-early-stopping/). You must either do it manually or automatically, but you **must** do it.\n",
    "\n",
    "We can now calculate the ROC curve of the model with the following code."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Measure the Performance\n",
    "- Calculate Accuracy\n",
    "- AUROC\n",
    "- Confusion Matrix over thet test set for each of models\n",
    "- Generate a plot with all the ROC curve"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Not a bad model at all! This model can actually be improved much further, by carefully designing an architecture that exploits the structure of the words and the complexity of the dataset.\n",
    "\n",
    "Let's finally plot the ROC curve over the test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61218/61218 [==============================] - 13s 206us/sample\n",
      "142840/142840 [==============================] - 27s 192us/sample\n",
      "\n",
      "AUC train:  0.9090099340768073\n",
      "AUC test:  0.8970981607408457\n"
     ]
    }
   ],
   "source": [
    "# Calculate outputs in test set\n",
    "model.load_weights(\"fasttext_seq_model.h5\")\n",
    "prob_test = model.predict(X_test, verbose = 1)\n",
    "prob_train = model.predict(X_train, verbose = 1)\n",
    "\n",
    "# Compute ROC curve and ROC area\n",
    "fpr, tpr, _ = roc_curve(y_train, prob_train)\n",
    "roc_auc = auc(fpr, tpr)\n",
    "print('\\nAUC train: ', roc_auc)\n",
    "\n",
    "# Compute ROC curve and ROC area\n",
    "fpr, tpr, _ = roc_curve(y_test, prob_test)\n",
    "roc_auc = auc(fpr, tpr)\n",
    "print('AUC test: ', roc_auc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Confusion matrix\n",
    "def plot_confusion_matrix(y_true, y_pred, classes,\n",
    "                          normalize=False,\n",
    "                          title=None,\n",
    "                          cmap=plt.cm.Blues):\n",
    "    \"\"\"\n",
    "    This function prints and plots the confusion matrix.\n",
    "    Normalization can be applied by setting `normalize=True`.\n",
    "    \"\"\"\n",
    "    if not title:\n",
    "        if normalize:\n",
    "            title = 'Normalized confusion matrix'\n",
    "        else:\n",
    "            title = 'Confusion matrix, without normalization'\n",
    "\n",
    "    # Compute confusion matrix\n",
    "    cm = confusion_matrix(y_true, y_pred)\n",
    "    # Only use the labels that appear in the data\n",
    "    classes = classes[unique_labels(y_true, y_pred)]\n",
    "    if normalize:\n",
    "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
    "        print(\"Normalized confusion matrix\")\n",
    "    else:\n",
    "        print('Confusion matrix, without normalization')\n",
    "\n",
    "    fig, ax = plt.subplots()\n",
    "    ax.axis('equal')\n",
    "    im = ax.imshow(cm, interpolation='nearest', cmap=cmap)\n",
    "    ax.figure.colorbar(im, ax=ax)\n",
    "    # We want to show all ticks...\n",
    "    ax.set(xticks=np.arange(cm.shape[1]),\n",
    "           yticks=np.arange(cm.shape[0]),\n",
    "           # ... and label them with the respective list entries\n",
    "           xticklabels=classes, yticklabels=classes,\n",
    "           title=title,\n",
    "           ylabel='True label',\n",
    "           xlabel='Predicted label')\n",
    "\n",
    "    # Rotate the tick labels and set their alignment.\n",
    "    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n",
    "             rotation_mode=\"anchor\")\n",
    "\n",
    "    # Loop over data dimensions and create text annotations.\n",
    "    fmt = '.2f' if normalize else 'd'\n",
    "    thresh = cm.max() / 2.\n",
    "    for i in range(cm.shape[0]):\n",
    "        for j in range(cm.shape[1]):\n",
    "            ax.text(j, i, format(cm[i, j], fmt),\n",
    "                    ha=\"center\", va=\"center\",\n",
    "                    color=\"white\" if cm[i, j] > thresh else \"black\")\n",
    "    fig.tight_layout();\n",
    "    return ax"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "Model Acuracy is 0.83\n",
      "Model Recall is 0.89\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ypreds = model.predict_classes(X_test)\n",
    "\n",
    "\n",
    "plot_confusion_matrix(y_test, ypreds, classes = np.array([0.0,1.0]));\n",
    "cm = confusion_matrix(y_test, ypreds)\n",
    "\n",
    "# Sum of diagonal entries divided by total sum\n",
    "model_accuracy = np.diag(cm).sum()/cm.sum()\n",
    "\n",
    "# Bottom right divided by sum of second column\n",
    "model_precision = cm[1,1]/np.sum(cm[:,1])\n",
    "\n",
    "# Bottom right divided by sum of second row\n",
    "model_recall = cm[1,1]/np.sum(cm[1,:])\n",
    "\n",
    "print(f\"Model Acuracy is {model_accuracy:.2f}\")\n",
    "print(f\"Model Recall is {model_recall:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fasttext embedding with 2nd architecture\n",
    "## Parallel layers\n",
    "1. An embedding layer as beofre\n",
    "2. A paralle model of four layers each consisting of:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"graphModel\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input_2 (InputLayer)            [(None, 70, 300)]    0                                            \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_23 (Conv1D)              (None, 69, 128)      76928       input_2[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_24 (Conv1D)              (None, 68, 128)      115328      input_2[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_25 (Conv1D)              (None, 66, 128)      192128      input_2[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_26 (Conv1D)              (None, 63, 128)      307328      input_2[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "max_pooling1d_9 (MaxPooling1D)  (None, 1, 128)       0           conv1d_23[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "max_pooling1d_10 (MaxPooling1D) (None, 1, 128)       0           conv1d_24[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "max_pooling1d_11 (MaxPooling1D) (None, 1, 128)       0           conv1d_25[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "max_pooling1d_12 (MaxPooling1D) (None, 1, 128)       0           conv1d_26[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "flatten_10 (Flatten)            (None, 128)          0           max_pooling1d_9[0][0]            \n",
      "__________________________________________________________________________________________________\n",
      "flatten_11 (Flatten)            (None, 128)          0           max_pooling1d_10[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "flatten_12 (Flatten)            (None, 128)          0           max_pooling1d_11[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "flatten_13 (Flatten)            (None, 128)          0           max_pooling1d_12[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "concatenate_1 (Concatenate)     (None, 512)          0           flatten_10[0][0]                 \n",
      "                                                                 flatten_11[0][0]                 \n",
      "                                                                 flatten_12[0][0]                 \n",
      "                                                                 flatten_13[0][0]                 \n",
      "==================================================================================================\n",
      "Total params: 691,712\n",
      "Trainable params: 691,712\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# Parallel model\n",
    "# Filter sizes to use.\n",
    "filter_sizes = (2,3,5,8)\n",
    "\n",
    "# Initialize. We need to give it the input dimension (from the Embedding!)\n",
    "graph_in = Input(shape=(70, 300)) #70 and 300 dimensions\n",
    "convs = []\n",
    "avgs = []\n",
    "\n",
    "# This for stacks the layers. Inside each for, we build the sequence of layer. The command \"append\" adds\n",
    "# that to the \"conv\" variable, which is simply a stack of convolutions.\n",
    "for fsz in filter_sizes:\n",
    "    conv = Conv1D(filters=128,\n",
    "                  kernel_size=fsz,\n",
    "                         padding='valid',\n",
    "                         activation='relu',\n",
    "                         strides=1)(graph_in) # Note the (graph_in). This means \"put this layer AFTER the graph_in layer.\n",
    "    pool = MaxPooling1D(pool_size=70 - fsz + 1)(conv) # Put this layer AFTER the convolution just created.\n",
    "    flattenMax = Flatten()(pool) # Flatten the pooling layer.\n",
    "    convs.append(flattenMax) # Append this to the convs object that saves the stack.\n",
    "    \n",
    "# Concatenate layers.\n",
    "if len(filter_sizes)>1:\n",
    "    out = Concatenate()(convs)\n",
    "else:\n",
    "    out = convs[0]\n",
    "\n",
    "graph = Model(inputs=graph_in, outputs=out, name=\"graphModel\")\n",
    "\n",
    "graph.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Failed to import pydot. You must install pydot and graphviz for `pydotprint` to work.\n"
     ]
    },
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'GraphModel.png'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-104-e22f558befb4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mplot_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgraph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshow_shapes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshow_layer_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mto_file\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'GraphModel.png'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mImage\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretina\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'GraphModel.png'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m//anaconda3/lib/python3.7/site-packages/IPython/core/display.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata)\u001b[0m\n\u001b[1;32m   1195\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munconfined\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0munconfined\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1196\u001b[0m         super(Image, self).__init__(data=data, url=url, filename=filename, \n\u001b[0;32m-> 1197\u001b[0;31m                 metadata=metadata)\n\u001b[0m\u001b[1;32m   1198\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1199\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwidth\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetadata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'width'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/site-packages/IPython/core/display.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, url, filename, metadata)\u001b[0m\n\u001b[1;32m    618\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetadata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/site-packages/IPython/core/display.py\u001b[0m in \u001b[0;36mreload\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1226\u001b[0m         \u001b[0;34m\"\"\"Reload the raw data from file or URL.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1227\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0membed\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1228\u001b[0;31m             \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mImage\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1229\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretina\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1230\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retina_shape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/site-packages/IPython/core/display.py\u001b[0m in \u001b[0;36mreload\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    643\u001b[0m         \u001b[0;34m\"\"\"Reload the raw data from file or URL.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    644\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilename\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 645\u001b[0;31m             \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_flags\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    646\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    647\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0murl\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'GraphModel.png'"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from tensorflow.keras.utils import plot_model\n",
    "from IPython.display import Image\n",
    "%matplotlib inline\n",
    "\n",
    "plot_model(graph, show_shapes=True, show_layer_names=True, to_file='GraphModel.png')\n",
    "Image(retina=True, filename='GraphModel.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that we named the model \"graphModel\", and that it follows the architecture we discussed. This is just the \"middle\" part of the network, so we need to add an input layer, and an output layer.\n",
    "\n",
    "We can do this with a traditional sequential model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_8\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "embedding_8 (Embedding)      (None, 70, 300)           21321300  \n",
      "_________________________________________________________________\n",
      "graphModel (Model)           (None, 512)               691712    \n",
      "_________________________________________________________________\n",
      "dense_12 (Dense)             (None, 128)               65664     \n",
      "_________________________________________________________________\n",
      "dropout_6 (Dropout)          (None, 128)               0         \n",
      "_________________________________________________________________\n",
      "dense_13 (Dense)             (None, 1)                 129       \n",
      "=================================================================\n",
      "Total params: 22,078,805\n",
      "Trainable params: 757,505\n",
      "Non-trainable params: 21,321,300\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# Final model\n",
    "model2 = Sequential()\n",
    "embedding_layer = Embedding(len(embedding_matrix),           # Words in the embedding.\n",
    "                            300,                           # Embedding dimension\n",
    "                            weights=[embedding_matrix],    # The weights we just calculated\n",
    "                            input_length=70,              # The maximum number of words.\n",
    "                            trainable=False)               # To NOT recalculate weights!\n",
    "\n",
    "model2.add(embedding_layer)\n",
    "\n",
    "# Now we add our graph model\n",
    "model2.add(graph)\n",
    "\n",
    "# Add a few layers\n",
    "model2.add(Dense(128, activation='relu'))\n",
    "model2.add(Dropout(0.5))\n",
    "model2.add(Dense(1, activation='sigmoid'))\n",
    "\n",
    "# adam = Adam(clipnorm=.1)\n",
    "model2.compile(loss='binary_crossentropy',\n",
    "              optimizer='adam',\n",
    "              metrics=['acc'])\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Failed to import pydot. You must install pydot and graphviz for `pydotprint` to work.\n"
     ]
    },
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'model.png'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-110-e55b25f76331>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mplot_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshow_shapes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshow_layer_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mto_file\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'model.png'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mImage\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretina\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'model.png'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m//anaconda3/lib/python3.7/site-packages/IPython/core/display.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, url, filename, format, embed, width, height, retina, unconfined, metadata)\u001b[0m\n\u001b[1;32m   1195\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munconfined\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0munconfined\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1196\u001b[0m         super(Image, self).__init__(data=data, url=url, filename=filename, \n\u001b[0;32m-> 1197\u001b[0;31m                 metadata=metadata)\n\u001b[0m\u001b[1;32m   1198\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1199\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwidth\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetadata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'width'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/site-packages/IPython/core/display.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, url, filename, metadata)\u001b[0m\n\u001b[1;32m    618\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetadata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/site-packages/IPython/core/display.py\u001b[0m in \u001b[0;36mreload\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1226\u001b[0m         \u001b[0;34m\"\"\"Reload the raw data from file or URL.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1227\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0membed\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1228\u001b[0;31m             \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mImage\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1229\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretina\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1230\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_retina_shape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m//anaconda3/lib/python3.7/site-packages/IPython/core/display.py\u001b[0m in \u001b[0;36mreload\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    643\u001b[0m         \u001b[0;34m\"\"\"Reload the raw data from file or URL.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    644\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilename\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 645\u001b[0;31m             \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_flags\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    646\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    647\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0murl\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'model.png'"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from tensorflow.keras.utils import plot_model\n",
    "from IPython.display import Image\n",
    "%matplotlib inline\n",
    "\n",
    "plot_model(model2, show_shapes=True, show_layer_names=True, to_file='model.png')\n",
    "Image(retina=True, filename='model.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 91601 samples, validate on 45117 samples\n",
      "Epoch 1/20\n",
      "91601/91601 [==============================] - 404s 4ms/sample - loss: 0.3895 - acc: 0.8196 - val_loss: 0.3587 - val_acc: 0.8349\n",
      "Epoch 2/20\n",
      "91601/91601 [==============================] - 374s 4ms/sample - loss: 0.3395 - acc: 0.8463 - val_loss: 0.3571 - val_acc: 0.8368\n",
      "Epoch 3/20\n",
      "91601/91601 [==============================] - 333s 4ms/sample - loss: 0.2904 - acc: 0.8704 - val_loss: 0.3825 - val_acc: 0.8219\n",
      "Epoch 4/20\n",
      "91601/91601 [==============================] - 319s 3ms/sample - loss: 0.2198 - acc: 0.9068 - val_loss: 0.4525 - val_acc: 0.8178\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Train model\n",
    "#We will use 33% of the data as a test set, and train for 10 epochs.\n",
    "#We will calculate the model over the training set, \n",
    "#and then estimate the AUC of the model over both the training and testing set.\n",
    "# Fit the model\n",
    "callbacks_list=[keras.callbacks.EarlyStopping(monitor='val_loss',patience=2),keras.callbacks.ModelCheckpoint(filepath='fasttext_model2.h5',monitor='val_loss',save_best_only=True)]\n",
    "history = model2.fit(X_train, y_train, validation_split=0.33, epochs=20, batch_size=20,callbacks=callbacks_list)\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "epochs = range(1, len(loss) + 1)\n",
    "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
    "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67340/67340 [==============================] - 61s 907us/sample\n",
      "136718/136718 [==============================] - 144s 1ms/sample\n",
      "\n",
      "AUC train:  0.9301936891965065\n",
      "AUC test:  0.9030750586473937\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate outputs in test set\n",
    "model2.load_weights(\"fasttext_model2.h5\")\n",
    "prob_test = model2.predict(X_test, verbose = 1)\n",
    "prob_train = model2.predict(X_train, verbose = 1)\n",
    "\n",
    "# Compute ROC curve and ROC area\n",
    "fpr, tpr, _ = roc_curve(y_train, prob_train)\n",
    "roc_auc = auc(fpr, tpr)\n",
    "print('\\nAUC train: ', roc_auc)\n",
    "\n",
    "# Compute ROC curve and ROC area\n",
    "fpr, tpr, _ = roc_curve(y_test, prob_test)\n",
    "roc_auc = auc(fpr, tpr)\n",
    "print('AUC test: ', roc_auc)\n",
    "\n",
    "sns.set('talk', 'darkgrid', 'dark', font_scale=1, \\\n",
    "        rc={\"lines.linewidth\": 2, 'grid.linestyle': '--'})\n",
    "\n",
    "lw = 2\n",
    "plt.figure()\n",
    "plt.plot(fpr, tpr, color='darkorange',\n",
    "         lw=lw, label='ROC curve (AUC = %0.2f)' % roc_auc)\n",
    "plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('Receiver Operating Characteristic curve')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.savefig('roc_auc.pdf', format = \"pdf\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "Model2 Acuracy is 0.84\n",
      "Model2 Recall is 0.91\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Confusion matrix\n",
    "ypreds = model2.predict_classes(X_test)\n",
    "\n",
    "plot_confusion_matrix(y_test, ypreds, classes = np.array([0.0,1.0]));\n",
    "cm = confusion_matrix(y_test, ypreds)\n",
    "\n",
    "# Sum of diagonal entries divided by total sum\n",
    "model2_accuracy = np.diag(cm).sum()/cm.sum()\n",
    "\n",
    "# Bottom right divided by sum of second column\n",
    "model2_precision = cm[1,1]/np.sum(cm[:,1])\n",
    "\n",
    "# Bottom right divided by sum of second row\n",
    "model2_recall = cm[1,1]/np.sum(cm[1,:])\n",
    "\n",
    "print(f\"Model2 Acuracy is {model2_accuracy:.2f}\")\n",
    "print(f\"Model2 Recall is {model2_recall:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Embedding Using Glove\n",
    "Now, I will use GloVe as embeddings,. It's a popular embedding technique based on factorizing a matrix of word co-occurence statistics.\n",
    "We will use a dimensional of 100 GloVe embeddings of 400K words computed from English Wikipedia.\n",
    "\n",
    "## Approach\n",
    "1. Convert all text into sequence of word indices, which stands for an integer ID for the word. Only the most commonly occuring words would be considered in the dataset, and their will be truncated to a maximum of 1000 words.\n",
    "2. A embedding matrix that stores the ebedding vector for each word at index i.\n",
    "3. Then this embedding matrix can be loaded into a Keras embedding layer, its weights, the embedding vecotrs will not be updatd while training.\n",
    "4. Build on top of it a 1D convolutional neural network, end in a softmax outpuv over categories. \n",
    "\n",
    "## Create an embedding layer from GloVe\n",
    "Computer an index mapping words to known embeding, by parsing the data dump of pre-trained embeddings.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2019-12-12 19:20:01--  http://nlp.stanford.edu/data/glove.6B.zip\n",
      "Resolving nlp.stanford.edu (nlp.stanford.edu)... 171.64.67.140\n",
      "Connecting to nlp.stanford.edu (nlp.stanford.edu)|171.64.67.140|:80... connected.\n",
      "HTTP request sent, awaiting response... 302 Found\n",
      "Location: https://nlp.stanford.edu/data/glove.6B.zip [following]\n",
      "--2019-12-12 19:20:01--  https://nlp.stanford.edu/data/glove.6B.zip\n",
      "Connecting to nlp.stanford.edu (nlp.stanford.edu)|171.64.67.140|:443... connected.\n",
      "HTTP request sent, awaiting response... 301 Moved Permanently\n",
      "Location: http://downloads.cs.stanford.edu/nlp/data/glove.6B.zip [following]\n",
      "--2019-12-12 19:20:01--  http://downloads.cs.stanford.edu/nlp/data/glove.6B.zip\n",
      "Resolving downloads.cs.stanford.edu (downloads.cs.stanford.edu)... 171.64.64.22\n",
      "Connecting to downloads.cs.stanford.edu (downloads.cs.stanford.edu)|171.64.64.22|:80... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 862182613 (822M) [application/zip]\n",
      "Saving to: ‘glove.6B.zip.1’\n",
      "\n",
      "glove.6B.zip.1      100%[===================>] 822.24M  2.03MB/s    in 6m 31s  \n",
      "\n",
      "2019-12-12 19:26:33 (2.10 MB/s) - ‘glove.6B.zip.1’ saved [862182613/862182613]\n",
      "\n",
      "Archive:  glove.6B.zip\n",
      "replace glove.6B.50d.txt? [y]es, [n]o, [A]ll, [N]one, [r]ename: ^C\n"
     ]
    }
   ],
   "source": [
    "!wget 'http://nlp.stanford.edu/data/glove.6B.zip'\n",
    "!unzip glove.6B.zip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 400000 word vectors.\n"
     ]
    }
   ],
   "source": [
    "embeddings_index = {}\n",
    "f = open('glove.6B.300d.txt')\n",
    "for line in f:\n",
    "    values = line.split()\n",
    "    word = values[0]\n",
    "    coefs = np.asarray(values[1:], dtype='float32')\n",
    "    embeddings_index[word] = coefs\n",
    "f.close()\n",
    "\n",
    "print('Found %s word vectors.' % len(embeddings_index))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "#At this point we can leverage our embedding_index dictionary and our word_index to compute our embedding matrix:\n",
    "glove_embedding_matrix = np.zeros((len(word_index) + 1, 300))\n",
    "for word, i in word_index.items():\n",
    "    embedding_vector = embeddings_index.get(word)\n",
    "    if embedding_vector is not None:\n",
    "        # words not found in embedding index will be all-zeros.\n",
    "        glove_embedding_matrix[i] = embedding_vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We load this embedding matrix into an Embedding layer. \n",
    "#Note that we set trainable=False to prevent the weights from being updated during training.\n",
    "embedding_layer = Embedding(len(word_index) + 1,\n",
    "                            300,\n",
    "                            weights=[glove_embedding_matrix],\n",
    "                            input_length=70,\n",
    "                            trainable=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "An Embedding layer should be fed sequences of integers, i.e. a 2D input of shape (samples, indices). These input sequences should be padded so that they all have the same length in a batch of input data (although an Embedding layer is capable of processing sequence of heterogenous length, if you don't pass an explicit input_length argument to the layer).\n",
    "\n",
    "All that the Embedding layer does is to map the integer inputs to the vectors found at the corresponding index in the embedding matrix, i.e. the sequence [1, 2] would be converted to [embeddings[1], embeddings[2]]. This means that the output of the Embedding layer will be a 3D tensor of shape (samples, sequence_length, embedding_dim)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_15\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "embedding_12 (Embedding)     (None, 70, 300)           21321300  \n",
      "_________________________________________________________________\n",
      "conv1d_33 (Conv1D)           (None, 68, 128)           115328    \n",
      "_________________________________________________________________\n",
      "conv1d_34 (Conv1D)           (None, 66, 128)           49280     \n",
      "_________________________________________________________________\n",
      "max_pooling1d_16 (MaxPooling (None, 22, 128)           0         \n",
      "_________________________________________________________________\n",
      "flatten_17 (Flatten)         (None, 2816)              0         \n",
      "_________________________________________________________________\n",
      "dense_26 (Dense)             (None, 128)               360576    \n",
      "_________________________________________________________________\n",
      "dropout_13 (Dropout)         (None, 128)               0         \n",
      "_________________________________________________________________\n",
      "dense_27 (Dense)             (None, 1)                 129       \n",
      "=================================================================\n",
      "Total params: 21,846,613\n",
      "Trainable params: 525,313\n",
      "Non-trainable params: 21,321,300\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# Final model\n",
    "glove_model = Sequential()\n",
    "\n",
    "glove_model.add(embedding_layer)\n",
    "\n",
    "\n",
    "# Check for 64 sequences of length 3.\n",
    "#Add first convolution, the operation is to add a Convolution1D layer, called Conv1D.\n",
    "glove_model.add(Conv1D(filters=128,           # How many filters to calculate.\n",
    "                 kernel_size=3,         # How many words to calculate per filter.\n",
    "                 padding='valid',       # Add padding?\n",
    "                 activation='relu',     # What activation to use?\n",
    "                 strides=1)             # What stride to use?\n",
    "         )\n",
    "#Add second convolutional layer\n",
    "glove_model.add(Conv1D(filters=128,           # How many filters to calculate.\n",
    "                 kernel_size=3,         # How many words to calculate per filter.\n",
    "                 padding='valid',       # Add padding?\n",
    "                 activation='relu',     # What activation to use?\n",
    "                 strides=1)             # What stride to use?\n",
    "         )\n",
    "\n",
    "\n",
    "#And now we add max pooling. We will reduce filters by a factor of 3, to keep with the number. \n",
    "#Basically, we will only choose one out of every three sequences that we are studying, the most intense one.\n",
    "glove_model.add(MaxPooling1D(pool_size = 3))\n",
    "\n",
    "#Almost done, First we flatten, and then add a dense layer. Dropout and an output layer finalize the problem.\n",
    "# Flatten\n",
    "# Turn output matrices into 1D tensor for shallow network.\n",
    "glove_model.add(Flatten())\n",
    "\n",
    "# Dense Layer of size 128 with Dropout:  Add 128 neurons with ReLU activation.\n",
    "glove_model.add(Dense(128, activation = 'relu'))\n",
    "#Add droout\n",
    "glove_model.add(Dropout(0.5))\n",
    "\n",
    "\n",
    "#Add an output layer with a sigmoid.\n",
    "# Output layer of size 1\n",
    "glove_model.add(Dense(1, activation = 'sigmoid'))\n",
    "\n",
    "#we need a binary_crossentropy error function. I will use Adam for training.\n",
    "# Use Adam as optimizer, with a binary_crossentropy error.\n",
    "glove_model.compile(loss='binary_crossentropy',\n",
    "              optimizer='adam',\n",
    "              metrics=['acc'])\n",
    "glove_model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 91601 samples, validate on 45117 samples\n",
      "Epoch 1/20\n",
      "91601/91601 [==============================] - 117s 1ms/sample - loss: 0.4208 - acc: 0.8020 - val_loss: 0.3897 - val_acc: 0.8170\n",
      "Epoch 2/20\n",
      "91601/91601 [==============================] - 129s 1ms/sample - loss: 0.3739 - acc: 0.8286 - val_loss: 0.3954 - val_acc: 0.8150\n",
      "Epoch 3/20\n",
      "91601/91601 [==============================] - 110s 1ms/sample - loss: 0.3413 - acc: 0.8456 - val_loss: 0.3926 - val_acc: 0.8231\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Now we train. We will use 33% of the data as a test set, and train for 10 epochs.\n",
    "#We will calculate the model over the training set, \n",
    "#and then estimate the AUC of the model over both the training and testing set.\n",
    "# Fit the model\n",
    "callbacks_list=[keras.callbacks.EarlyStopping(monitor='val_loss',patience=2),keras.callbacks.ModelCheckpoint(filepath='golve_seq_model.h5',monitor='val_loss',save_best_only=True)]\n",
    "history = glove_model.fit(X_train, y_train, validation_split=0.33, epochs=20, batch_size=20,callbacks=callbacks_list)\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "epochs = range(1, len(loss) + 1)\n",
    "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
    "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67340/67340 [==============================] - 25s 365us/sample\n",
      "136718/136718 [==============================] - 53s 391us/sample\n",
      "\n",
      "AUC train:  0.8927714790600321\n",
      "AUC test:  0.8828415971893422\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate outputs in test set\n",
    "glove_model.load_weights(\"golve_seq_model.h5\")\n",
    "prob_test = glove_model.predict(X_test, verbose = 1)\n",
    "prob_train = glove_model.predict(X_train, verbose = 1)\n",
    "\n",
    "# Compute ROC curve and ROC area\n",
    "fpr, tpr, _ = roc_curve(y_train, prob_train)\n",
    "roc_auc = auc(fpr, tpr)\n",
    "print('\\nAUC train: ', roc_auc)\n",
    "\n",
    "# Compute ROC curve and ROC area\n",
    "fpr, tpr, _ = roc_curve(y_test, prob_test)\n",
    "roc_auc = auc(fpr, tpr)\n",
    "print('AUC test: ', roc_auc)\n",
    "\n",
    "sns.set('talk', 'darkgrid', 'dark', font_scale=1, \\\n",
    "        rc={\"lines.linewidth\": 2, 'grid.linestyle': '--'})\n",
    "\n",
    "lw = 2\n",
    "plt.figure()\n",
    "plt.plot(fpr, tpr, color='darkorange',\n",
    "         lw=lw, label='ROC curve (AUC = %0.2f)' % roc_auc)\n",
    "plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('Receiver Operating Characteristic curve')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.savefig('roc_auc.pdf', format = \"pdf\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "Glove Model Acuracy is 0.82\n",
      "Glove Model Recall is 0.92\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Confusion matrix\n",
    "ypreds = glove_model.predict_classes(X_test)\n",
    "\n",
    "plot_confusion_matrix(y_test, ypreds, classes = np.array([0.0,1.0]));\n",
    "cm = confusion_matrix(y_test, ypreds)\n",
    "\n",
    "# Sum of diagonal entries divided by total sum\n",
    "glove_model_accuracy = np.diag(cm).sum()/cm.sum()\n",
    "\n",
    "# Bottom right divided by sum of second column\n",
    "glove_model_precision = cm[1,1]/np.sum(cm[:,1])\n",
    "\n",
    "# Bottom right divided by sum of second row\n",
    "glove_model_recall = cm[1,1]/np.sum(cm[1,:])\n",
    "\n",
    "print(f\"Glove Model Acuracy is {glove_model_accuracy:.2f}\")\n",
    "print(f\"Glove Model Recall is {glove_model_recall:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Parallel Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"graphModel\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input_3 (InputLayer)            [(None, 70, 300)]    0                                            \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_35 (Conv1D)              (None, 69, 128)      76928       input_3[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_36 (Conv1D)              (None, 68, 128)      115328      input_3[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_37 (Conv1D)              (None, 66, 128)      192128      input_3[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_38 (Conv1D)              (None, 63, 128)      307328      input_3[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "max_pooling1d_17 (MaxPooling1D) (None, 1, 128)       0           conv1d_35[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "max_pooling1d_18 (MaxPooling1D) (None, 1, 128)       0           conv1d_36[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "max_pooling1d_19 (MaxPooling1D) (None, 1, 128)       0           conv1d_37[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "max_pooling1d_20 (MaxPooling1D) (None, 1, 128)       0           conv1d_38[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "flatten_18 (Flatten)            (None, 128)          0           max_pooling1d_17[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "flatten_19 (Flatten)            (None, 128)          0           max_pooling1d_18[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "flatten_20 (Flatten)            (None, 128)          0           max_pooling1d_19[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "flatten_21 (Flatten)            (None, 128)          0           max_pooling1d_20[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "concatenate_2 (Concatenate)     (None, 512)          0           flatten_18[0][0]                 \n",
      "                                                                 flatten_19[0][0]                 \n",
      "                                                                 flatten_20[0][0]                 \n",
      "                                                                 flatten_21[0][0]                 \n",
      "==================================================================================================\n",
      "Total params: 691,712\n",
      "Trainable params: 691,712\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# Parallel model\n",
    "# Filter sizes to use.\n",
    "filter_sizes = (2,3,5,8)\n",
    "\n",
    "# Initialize. We need to give it the input dimension (from the Embedding!)\n",
    "graph_in = Input(shape=(70, 300)) #70 and 300 dimensions\n",
    "convs = []\n",
    "avgs = []\n",
    "\n",
    "# This for stacks the layers. Inside each for, we build the sequence of layer. The command \"append\" adds\n",
    "# that to the \"conv\" variable, which is simply a stack of convolutions.\n",
    "for fsz in filter_sizes:\n",
    "    conv = Conv1D(filters=128,\n",
    "                  kernel_size=fsz,\n",
    "                         padding='valid',\n",
    "                         activation='relu',\n",
    "                         strides=1)(graph_in) # Note the (graph_in). This means \"put this layer AFTER the graph_in layer.\n",
    "    pool = MaxPooling1D(pool_size=70 - fsz + 1)(conv) # Put this layer AFTER the convolution just created.\n",
    "    flattenMax = Flatten()(pool) # Flatten the pooling layer.\n",
    "    convs.append(flattenMax) # Append this to the convs object that saves the stack.\n",
    "    \n",
    "# Concatenate layers.\n",
    "if len(filter_sizes)>1:\n",
    "    out = Concatenate()(convs)\n",
    "else:\n",
    "    out = convs[0]\n",
    "\n",
    "graph = Model(inputs=graph_in, outputs=out, name=\"graphModel\")\n",
    "\n",
    "graph.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_16\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "embedding_13 (Embedding)     (None, 70, 300)           21321300  \n",
      "_________________________________________________________________\n",
      "graphModel (Model)           (None, 512)               691712    \n",
      "_________________________________________________________________\n",
      "dense_28 (Dense)             (None, 128)               65664     \n",
      "_________________________________________________________________\n",
      "dropout_14 (Dropout)         (None, 128)               0         \n",
      "_________________________________________________________________\n",
      "dense_29 (Dense)             (None, 1)                 129       \n",
      "=================================================================\n",
      "Total params: 22,078,805\n",
      "Trainable params: 757,505\n",
      "Non-trainable params: 21,321,300\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# Final model\n",
    "glove_model2 = Sequential()\n",
    "embedding_layer = Embedding(len(word_index) + 1,\n",
    "                            300,\n",
    "                            weights=[glove_embedding_matrix],\n",
    "                            input_length=70,\n",
    "                            trainable=False)\n",
    "\n",
    "glove_model2.add(embedding_layer)\n",
    "\n",
    "# Now we add our graph model\n",
    "glove_model2.add(graph)\n",
    "\n",
    "# Add a few layers\n",
    "glove_model2.add(Dense(128, activation='relu'))\n",
    "glove_model2.add(Dropout(0.5))\n",
    "glove_model2.add(Dense(1, activation='sigmoid'))\n",
    "\n",
    "# adam = Adam(clipnorm=.1)\n",
    "glove_model2.compile(loss='binary_crossentropy',\n",
    "              optimizer='adam',\n",
    "              metrics=['acc'])\n",
    "glove_model2.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 91601 samples, validate on 45117 samples\n",
      "Epoch 1/20\n",
      "91601/91601 [==============================] - 330s 4ms/sample - loss: 0.4218 - acc: 0.8011 - val_loss: 0.3851 - val_acc: 0.8212\n",
      "Epoch 2/20\n",
      "91601/91601 [==============================] - 335s 4ms/sample - loss: 0.3631 - acc: 0.8355 - val_loss: 0.3834 - val_acc: 0.8202\n",
      "Epoch 3/20\n",
      "91601/91601 [==============================] - 336s 4ms/sample - loss: 0.3014 - acc: 0.8651 - val_loss: 0.4474 - val_acc: 0.8205\n",
      "Epoch 4/20\n",
      "91601/91601 [==============================] - 333s 4ms/sample - loss: 0.2244 - acc: 0.9033 - val_loss: 0.4785 - val_acc: 0.8163\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Train model\n",
    "#We will use 33% of the data as a test set, and train for 10 epochs.\n",
    "#We will calculate the model over the training set, \n",
    "#and then estimate the AUC of the model over both the training and testing set.\n",
    "# Fit the model\n",
    "callbacks_list=[keras.callbacks.EarlyStopping(monitor='val_loss',patience=2),keras.callbacks.ModelCheckpoint(filepath='glove_model2.h5',monitor='val_loss',save_best_only=True)]\n",
    "history = glove_model2.fit(X_train, y_train, validation_split=0.33, epochs=20, batch_size=20,callbacks=callbacks_list)\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "epochs = range(1, len(loss) + 1)\n",
    "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
    "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67340/67340 [==============================] - 70s 1ms/sample\n",
      "136718/136718 [==============================] - 156s 1ms/sample\n",
      "\n",
      "AUC train:  0.9257203549215255\n",
      "AUC test:  0.8872720745251089\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate outputs in test set\n",
    "glove_model2.load_weights(\"glove_model2.h5\")\n",
    "prob_test = glove_model2.predict(X_test, verbose = 1)\n",
    "prob_train = glove_model2.predict(X_train, verbose = 1)\n",
    "\n",
    "# Compute ROC curve and ROC area\n",
    "fpr, tpr, _ = roc_curve(y_train, prob_train)\n",
    "roc_auc = auc(fpr, tpr)\n",
    "print('\\nAUC train: ', roc_auc)\n",
    "\n",
    "# Compute ROC curve and ROC area\n",
    "fpr, tpr, _ = roc_curve(y_test, prob_test)\n",
    "roc_auc = auc(fpr, tpr)\n",
    "print('AUC test: ', roc_auc)\n",
    "\n",
    "sns.set('talk', 'darkgrid', 'dark', font_scale=1, \\\n",
    "        rc={\"lines.linewidth\": 2, 'grid.linestyle': '--'})\n",
    "\n",
    "lw = 2\n",
    "plt.figure()\n",
    "plt.plot(fpr, tpr, color='darkorange',\n",
    "         lw=lw, label='ROC curve (AUC = %0.2f)' % roc_auc)\n",
    "plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('Receiver Operating Characteristic curve')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.savefig('roc_auc.pdf', format = \"pdf\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "Glove Model2 Acuracy is 0.82\n",
      "Glove Model2 Recall is 0.93\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Confusion matrix\n",
    "ypreds = glove_model2.predict_classes(X_test)\n",
    "\n",
    "plot_confusion_matrix(y_test, ypreds, classes = np.array([0.0,1.0]));\n",
    "cm = confusion_matrix(y_test, ypreds)\n",
    "\n",
    "# Sum of diagonal entries divided by total sum\n",
    "glove_model2_accuracy = np.diag(cm).sum()/cm.sum()\n",
    "\n",
    "# Bottom right divided by sum of second column\n",
    "glove_model2_precision = cm[1,1]/np.sum(cm[:,1])\n",
    "\n",
    "# Bottom right divided by sum of second row\n",
    "glove_model2_recall = cm[1,1]/np.sum(cm[1,:])\n",
    "\n",
    "print(f\"Glove Model2 Acuracy is {glove_model2_accuracy:.2f}\")\n",
    "print(f\"Glove Model2 Recall is {glove_model2_recall:.2f}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
